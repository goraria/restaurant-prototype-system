import { Request, Response } from 'express';
import {
  createMenu as createMenuService,
  getMenuById as getMenuByIdService,
  getAllMenus as getAllMenusService,
  getMenus as getMenusService,
  getMenusByRestaurantId as getMenusByRestaurantIdService,
  updateMenu as updateMenuService,
  deleteMenu as deleteMenuService,
  createMenuItem as createMenuItemService,
  getMenuItemById as getMenuItemByIdService,
  getMenuItems as getMenuItemsService,
  getAllMenuItems as getAllMenuItemsService,
  getFeaturedMenuItems as getFeaturedMenuItemsService,
  updateMenuItem as updateMenuItemService,
  deleteMenuItem as deleteMenuItemService,
  bulkUpdateMenuItems as bulkUpdateMenuItemsService,
  bulkToggleAvailability as bulkToggleAvailabilityService,
  getMenuStats as getMenuStatsService,
  //
  getAllMenuItemNames as getAllMenuItemNamesService,
} from '@/services/menuServices';
import {
  CreateMenuSchema,
  UpdateMenuSchema,
  MenuQuerySchema,
  CreateMenuItemSchema,
  UpdateMenuItemSchema,
  MenuItemQuerySchema,
  BulkUpdateMenuItemsSchema,
  BulkToggleAvailabilitySchema,
  FeaturedItemsQuerySchema
} from '@/schemas/menuSchemas';

// ================================
// üçΩÔ∏è MENU CONTROLLERS
// ================================

/**
 * T·∫°o menu m·ªõi
 */
export const createMenu = async (req: Request, res: Response) => {
  try {
    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    const result = CreateMenuSchema.safeParse(req.body);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: result.error.issues
      });
    }

    const menu = await createMenuService(result.data);

    res.status(201).json({
      success: true,
      message: 'T·∫°o menu th√†nh c√¥ng',
      data: menu
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi t·∫°o menu';
    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

/**
 * L·∫•y menu theo ID
 */
export const getMenuById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        message: 'ID menu l√† b·∫Øt bu·ªôc'
      });
    }

    const menu = await getMenuByIdService(id);

    res.status(200).json({
      success: true,
      message: 'L·∫•y th√¥ng tin menu th√†nh c√¥ng',
      data: menu
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi l·∫•y th√¥ng tin menu';

    if (errorMessage.includes('kh√¥ng t√¨m th·∫•y') || errorMessage.includes('kh√¥ng h·ª£p l·ªá')) {
      return res.status(404).json({
        success: false,
        message: errorMessage
      });
    }

    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};


export const getAllMenus = async (req: Request, res: Response) => {
  try {
    const menus = await getAllMenusService();

    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch menu th√†nh c√¥ng',
      data: menus.data,
      total: menus.total
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi l·∫•y danh s√°ch menu';
    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

/**
 * L·∫•y danh s√°ch menu v·ªõi filter v√† pagination
 */
export const getMenus = async (req: Request, res: Response) => {
  try {
    // Validate query parameters
    const result = MenuQuerySchema.safeParse(req.query);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
        errors: result.error.issues
      });
    }

    const menus = await getMenusService(result.data);

    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch menu th√†nh c√¥ng',
      data: menus.data,
      pagination: menus.pagination
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi l·∫•y danh s√°ch menu';
    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

/**
 * L·∫•y menu theo restaurant ID
 */
export const getMenusByRestaurantId = async (req: Request, res: Response) => {
  try {
    const { restaurantId } = req.params;

    if (!restaurantId) {
      return res.status(400).json({
        success: false,
        message: 'ID nh√† h√†ng l√† b·∫Øt bu·ªôc'
      });
    }

    const menus = await getMenusByRestaurantIdService(restaurantId);

    res.status(200).json({
      success: true,
      message: 'L·∫•y menu c·ªßa nh√† h√†ng th√†nh c√¥ng',
      data: menus
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi l·∫•y menu c·ªßa nh√† h√†ng';

    if (errorMessage.includes('kh√¥ng h·ª£p l·ªá')) {
      return res.status(400).json({
        success: false,
        message: errorMessage
      });
    }

    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

/**
 * C·∫≠p nh·∫≠t menu
 */
export const updateMenu = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        message: 'ID menu l√† b·∫Øt bu·ªôc'
      });
    }

    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    const result = UpdateMenuSchema.safeParse(req.body);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: result.error.issues
      });
    }

    const menu = await updateMenuService(id, result.data);

    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t menu th√†nh c√¥ng',
      data: menu
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi c·∫≠p nh·∫≠t menu';

    if (errorMessage.includes('kh√¥ng t√¨m th·∫•y') || errorMessage.includes('kh√¥ng h·ª£p l·ªá')) {
      return res.status(404).json({
        success: false,
        message: errorMessage
      });
    }

    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

/**
 * X√≥a menu
 */
export const deleteMenu = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        message: 'ID menu l√† b·∫Øt bu·ªôc'
      });
    }

    await deleteMenuService(id);

    res.status(200).json({
      success: true,
      message: 'X√≥a menu th√†nh c√¥ng'
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi x√≥a menu';

    if (errorMessage.includes('kh√¥ng t√¨m th·∫•y') || errorMessage.includes('kh√¥ng h·ª£p l·ªá')) {
      return res.status(404).json({
        success: false,
        message: errorMessage
      });
    }

    if (errorMessage.includes('kh√¥ng th·ªÉ x√≥a')) {
      return res.status(400).json({
        success: false,
        message: errorMessage
      });
    }

    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

// ================================
// üçΩÔ∏è MENU ITEM CONTROLLERS
// ================================

/**
 * T·∫°o m√≥n ƒÉn m·ªõi
 */
export const createMenuItem = async (req: Request, res: Response) => {
  try {
    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    const result = CreateMenuItemSchema.safeParse(req.body);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: result.error.issues
      });
    }

    const menuItem = await createMenuItemService(result.data);

    res.status(201).json({
      success: true,
      message: 'T·∫°o m√≥n ƒÉn th√†nh c√¥ng',
      data: menuItem
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi t·∫°o m√≥n ƒÉn';

    if (errorMessage.includes('kh√¥ng t·ªìn t·∫°i')) {
      return res.status(404).json({
        success: false,
        message: errorMessage
      });
    }

    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

/**
 * L·∫•y m√≥n ƒÉn theo ID
 */
export const getMenuItemById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        message: 'ID m√≥n ƒÉn l√† b·∫Øt bu·ªôc'
      });
    }

    const menuItem = await getMenuItemByIdService(id);

    res.status(200).json({
      success: true,
      message: 'L·∫•y th√¥ng tin m√≥n ƒÉn th√†nh c√¥ng',
      data: menuItem
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi l·∫•y th√¥ng tin m√≥n ƒÉn';

    if (errorMessage.includes('kh√¥ng t√¨m th·∫•y') || errorMessage.includes('kh√¥ng h·ª£p l·ªá')) {
      return res.status(404).json({
        success: false,
        message: errorMessage
      });
    }

    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

/**
 * L·∫•y danh s√°ch m√≥n ƒÉn v·ªõi filter v√† pagination
 */
export const getMenuItems = async (req: Request, res: Response) => {
  try {
    // Validate query parameters
    const result = MenuItemQuerySchema.safeParse(req.query);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
        errors: result.error.issues
      });
    }

    const menuItems = await getMenuItemsService(result.data);

    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch m√≥n ƒÉn th√†nh c√¥ng',
      data: menuItems.data,
      pagination: menuItems.pagination
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi l·∫•y danh s√°ch m√≥n ƒÉn';
    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

export const getAllMenuItems = async (req: Request, res: Response) => {
  try {
    const menuItems = await getAllMenuItemsService();

    res.status(200).json({
      success: true,
      message: 'L·∫•y t·∫•t c·∫£ m√≥n ƒÉn th√†nh c√¥ng',
      data: menuItems.data,
      total: menuItems.total
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi l·∫•y t·∫•t c·∫£ m√≥n ƒÉn';
    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

export function getAllMenuItemNames(req: Request, res: Response) {
  try {
    const names = getAllMenuItemNamesService();
    res.status(200).json({
      success: true,
      message: 'L·∫•y t√™n t·∫•t c·∫£ m√≥n ƒÉn th√†nh c√¥ng',
      data: names
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi l·∫•y t√™n t·∫•t c·∫£ m√≥n ƒÉn';
    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
}

/**
 * L·∫•y m√≥n ƒÉn n·ªïi b·∫≠t
 */
export const getFeaturedMenuItems = async (req: Request, res: Response) => {
  try {
    // Validate query parameters
    const result = FeaturedItemsQuerySchema.safeParse(req.query);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
        errors: result.error.issues
      });
    }

    const featuredItems = await getFeaturedMenuItemsService(result.data);

    res.status(200).json({
      success: true,
      message: 'L·∫•y m√≥n ƒÉn n·ªïi b·∫≠t th√†nh c√¥ng',
      data: featuredItems
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi l·∫•y m√≥n ƒÉn n·ªïi b·∫≠t';
    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

/**
 * C·∫≠p nh·∫≠t m√≥n ƒÉn
 */
export const updateMenuItem = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        message: 'ID m√≥n ƒÉn l√† b·∫Øt bu·ªôc'
      });
    }

    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    const result = UpdateMenuItemSchema.safeParse(req.body);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: result.error.issues
      });
    }

    const menuItem = await updateMenuItemService(id, result.data);

    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t m√≥n ƒÉn th√†nh c√¥ng',
      data: menuItem
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi c·∫≠p nh·∫≠t m√≥n ƒÉn';

    if (errorMessage.includes('kh√¥ng t√¨m th·∫•y') || errorMessage.includes('kh√¥ng h·ª£p l·ªá') || errorMessage.includes('kh√¥ng t·ªìn t·∫°i')) {
      return res.status(404).json({
        success: false,
        message: errorMessage
      });
    }

    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

/**
 * X√≥a m√≥n ƒÉn
 */
export const deleteMenuItem = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        message: 'ID m√≥n ƒÉn l√† b·∫Øt bu·ªôc'
      });
    }

    await deleteMenuItemService(id);

    res.status(200).json({
      success: true,
      message: 'X√≥a m√≥n ƒÉn th√†nh c√¥ng'
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi x√≥a m√≥n ƒÉn';

    if (errorMessage.includes('kh√¥ng t√¨m th·∫•y') || errorMessage.includes('kh√¥ng h·ª£p l·ªá')) {
      return res.status(404).json({
        success: false,
        message: errorMessage
      });
    }

    if (errorMessage.includes('kh√¥ng th·ªÉ x√≥a')) {
      return res.status(400).json({
        success: false,
        message: errorMessage
      });
    }

    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

// ================================
// üîß BULK OPERATIONS CONTROLLERS
// ================================

/**
 * C·∫≠p nh·∫≠t h√†ng lo·∫°t m√≥n ƒÉn
 */
export const bulkUpdateMenuItems = async (req: Request, res: Response) => {
  try {
    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    const result = BulkUpdateMenuItemsSchema.safeParse(req.body);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: result.error.issues
      });
    }

    const updateResult = await bulkUpdateMenuItemsService(result.data);

    res.status(200).json({
      success: true,
      message: updateResult.message,
      data: { count: updateResult.count }
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi c·∫≠p nh·∫≠t h√†ng lo·∫°t m√≥n ƒÉn';

    if (errorMessage.includes('kh√¥ng h·ª£p l·ªá')) {
      return res.status(400).json({
        success: false,
        message: errorMessage
      });
    }

    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};

/**
 * B·∫≠t/t·∫Øt tr·∫°ng th√°i c√≥ s·∫µn h√†ng lo·∫°t
 */
export const bulkToggleAvailability = async (req: Request, res: Response) => {
  try {
    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    const result = BulkToggleAvailabilitySchema.safeParse(req.body);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: result.error.issues
      });
    }

    const toggleResult = await bulkToggleAvailabilityService(result.data);

    res.status(200).json({
      success: true,
      message: toggleResult.message,
      data: { count: toggleResult.count }
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i h√†ng lo·∫°t';

    if (errorMessage.includes('kh√¥ng h·ª£p l·ªá')) {
      return res.status(400).json({
        success: false,
        message: errorMessage
      });
    }

    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};



// ================================
// üìä STATISTICS CONTROLLERS
// ================================

/**
 * L·∫•y th·ªëng k√™ menu
 */
export const getMenuStats = async (req: Request, res: Response) => {
  try {
    const { restaurantId } = req.params;

    if (!restaurantId) {
      return res.status(400).json({
        success: false,
        message: 'ID nh√† h√†ng l√† b·∫Øt bu·ªôc'
      });
    }

    const stats = await getMenuStatsService(restaurantId);

    res.status(200).json({
      success: true,
      message: 'L·∫•y th·ªëng k√™ menu th√†nh c√¥ng',
      data: stats
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'L·ªói khi l·∫•y th·ªëng k√™ menu';

    if (errorMessage.includes('kh√¥ng h·ª£p l·ªá')) {
      return res.status(400).json({
        success: false,
        message: errorMessage
      });
    }

    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
};
