import { Request, Response } from 'express';
import { 
  CreateInventoryItemSchema,
  UpdateInventoryItemSchema,
  InventoryQuerySchema,
  BulkUpdateInventorySchema,
  LowStockAlertSchema,
  CreateInventoryTransactionSchema,
  TransactionQuerySchema,
  CreateRecipeSchema,
  UpdateRecipeSchema,
  RecipeQuerySchema,
  UpdateRecipeIngredientsSchema,
  RecipeCostCalculationSchema,
  InventoryStatsQuerySchema,
  StockValuationSchema,
  UsageForecastSchema,
  WasteAnalysisSchema,
  BatchStockAdjustmentSchema,
  ImportInventoryDataSchema,
  QRInventoryCheckSchema,
  QuickStockUpdateSchema
} from '@/schemas/inventorySchemas';
import {
  getAllInventoryItems as getAllInventoryItemsService,
  getInventoryItems as getInventoryItemsService,
  createInventoryItem as createInventoryItemService,
  getInventoryItemById as getInventoryItemByIdService,
  getInventoryItemsByRestaurantId as getInventoryItemsByRestaurantIdService,
  updateInventoryItem as updateInventoryItemService,
  deleteInventoryItem as deleteInventoryItemService,
  bulkUpdateInventory as bulkUpdateInventoryService,
  getLowStockAlert as getLowStockAlertService,
  createInventoryTransaction as createInventoryTransactionService,
  getInventoryTransactions as getInventoryTransactionsService,
  createRecipe as createRecipeService,
  getRecipeById as getRecipeByIdService,
  getRecipes as getRecipesService,
  updateRecipe as updateRecipeService,
  calculateRecipeCost as calculateRecipeCostService,
  getInventoryStats as getInventoryStatsService,
} from '@/services/inventoryServices';

// ================================
// üè™ INVENTORY ITEM CONTROLLERS
// ================================

export async function getAllInventoryItem(
  req: Request,
  res: Response
) {
  try {
    const result = await getAllInventoryItemsService();
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch nguy√™n li·ªáu th√†nh c√¥ng',
      data: result
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch nguy√™n li·ªáu',
      error: error.issues || error
    });
  }
}

// T·∫°o nguy√™n li·ªáu m·ªõi
export const createInventoryItem = async (req: Request, res: Response) => {
  try {
    console.log(req.body)
    const validatedData = CreateInventoryItemSchema.parse(req.body);
    const item = await createInventoryItemService(validatedData);
    
    res.status(201).json({
      success: true,
      message: 'T·∫°o nguy√™n li·ªáu th√†nh c√¥ng',
      data: item
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi t·∫°o nguy√™n li·ªáu',
      error: error.issues || error
    });
  }
};

// L·∫•y nguy√™n li·ªáu theo ID
export const getInventoryItemById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        message: 'ID inventory l√† b·∫Øt bu·ªôc'
      });
    }

    const item = await getInventoryItemByIdService(id);
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y th√¥ng tin nguy√™n li·ªáu th√†nh c√¥ng',
      data: item
    });
  } catch (error: any) {
    res.status(404).json({
      success: false,
      message: error.message || 'Kh√¥ng t√¨m th·∫•y nguy√™n li·ªáu',
    });
  }
};

// L·∫•y danh s√°ch nguy√™n li·ªáu v·ªõi filter
export const getInventoryItems = async (req: Request, res: Response) => {
  try {
    const validatedQuery = InventoryQuerySchema.parse(req.query);
    const result = await getInventoryItemsService(validatedQuery);
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch nguy√™n li·ªáu th√†nh c√¥ng',
      ...result
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch nguy√™n li·ªáu',
      error: error.issues || error
    });
  }
};

// L·∫•y nguy√™n li·ªáu theo nh√† h√†ng
// export const getInventoryItemsByRestaurantId = async (req: Request, res: Response) => {
//   try {
//     const { restaurantId } = req.params;
//     const items = await getInventoryItemsByRestaurantIdService(restaurantId);
    
//     res.status(200).json({
//       success: true,
//       message: 'L·∫•y nguy√™n li·ªáu c·ªßa nh√† h√†ng th√†nh c√¥ng',
//       data: items
//     });
//   } catch (error: any) {
//     res.status(400).json({
//       success: false,
//       message: error.message || 'L·ªói khi l·∫•y nguy√™n li·ªáu c·ªßa nh√† h√†ng',
//     });
//   }
// };

// C·∫≠p nh·∫≠t nguy√™n li·ªáu
export const updateInventoryItem = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        message: 'ID inventory l√† b·∫Øt bu·ªôc'
      });
    }

    const validatedData = UpdateInventoryItemSchema.parse(req.body);
    const item = await updateInventoryItemService(id, validatedData);
    
    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t nguy√™n li·ªáu th√†nh c√¥ng',
      data: item
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t nguy√™n li·ªáu',
      error: error.issues || error
    });
  }
};

// X√≥a nguy√™n li·ªáu
export const deleteInventoryItem = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        message: 'ID inventory l√† b·∫Øt bu·ªôc'
      });
    }

    const result = await deleteInventoryItemService(id);
    
    res.status(200).json({
      success: true,
      message: result.message
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi x√≥a nguy√™n li·ªáu',
    });
  }
};

// C·∫≠p nh·∫≠t h√†ng lo·∫°t
export const bulkUpdateInventory = async (req: Request, res: Response) => {
  try {
    const validatedData = BulkUpdateInventorySchema.parse(req.body);
    const result = await bulkUpdateInventoryService(validatedData);
    
    res.status(200).json({
      success: true,
      message: result.message,
      count: result.count
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t h√†ng lo·∫°t',
      error: error.issues || error
    });
  }
};

// C·∫£nh b√°o t·ªìn kho th·∫•p
export const getLowStockAlert = async (req: Request, res: Response) => {
  try {
    const validatedQuery = LowStockAlertSchema.parse(req.query);
    const result = await getLowStockAlertService(validatedQuery);
    
    res.status(200).json({
      success: true,
      message: `T√¨m th·∫•y ${result.total_alerts} c·∫£nh b√°o`,
      data: result
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y c·∫£nh b√°o t·ªìn kho',
      error: error.issues || error
    });
  }
};

// ================================
// üì¶ INVENTORY TRANSACTION CONTROLLERS
// ================================

// T·∫°o giao d·ªãch kho
export const createInventoryTransaction = async (req: Request, res: Response) => {
  try {
    const validatedData = CreateInventoryTransactionSchema.parse(req.body);
    const transaction = await createInventoryTransactionService(validatedData);
    
    res.status(201).json({
      success: true,
      message: 'T·∫°o giao d·ªãch kho th√†nh c√¥ng',
      data: transaction
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi t·∫°o giao d·ªãch kho',
      error: error.issues || error
    });
  }
};

// L·∫•y danh s√°ch giao d·ªãch
export const getInventoryTransactions = async (req: Request, res: Response) => {
  try {
    const validatedQuery = TransactionQuerySchema.parse(req.query);
    const result = await getInventoryTransactionsService(validatedQuery);
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch giao d·ªãch th√†nh c√¥ng',
      ...result
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch giao d·ªãch',
      error: error.issues || error
    });
  }
};

// ================================
// üë®‚Äçüç≥ RECIPE CONTROLLERS
// ================================

// T·∫°o c√¥ng th·ª©c m·ªõi
export const createRecipe = async (req: Request, res: Response) => {
  try {
    const validatedData = CreateRecipeSchema.parse(req.body);
    const recipe = await createRecipeService(validatedData);
    
    res.status(201).json({
      success: true,
      message: 'T·∫°o c√¥ng th·ª©c th√†nh c√¥ng',
      data: recipe
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi t·∫°o c√¥ng th·ª©c',
      error: error.issues || error
    });
  }
};

// L·∫•y c√¥ng th·ª©c theo ID
// export const getRecipeById = async (req: Request, res: Response) => {
//   try {
//     const { id } = req.params;
//     const recipe = await getRecipeByIdService(id);
    
//     res.status(200).json({
//       success: true,
//       message: 'L·∫•y th√¥ng tin c√¥ng th·ª©c th√†nh c√¥ng',
//       data: recipe
//     });
//   } catch (error: any) {
//     res.status(404).json({
//       success: false,
//       message: error.message || 'Kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c',
//     });
//   }
// };

// L·∫•y danh s√°ch c√¥ng th·ª©c
export const getRecipes = async (req: Request, res: Response) => {
  try {
    const validatedQuery = RecipeQuerySchema.parse(req.query);
    const result = await getRecipesService(validatedQuery);
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch c√¥ng th·ª©c th√†nh c√¥ng',
      ...result
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch c√¥ng th·ª©c',
      error: error.issues || error
    });
  }
};

// C·∫≠p nh·∫≠t c√¥ng th·ª©c
// export const updateRecipe = async (req: Request, res: Response) => {
//   try {
//     const { id } = req.params;
//     const validatedData = UpdateRecipeSchema.parse(req.body);
//     const recipe = await updateRecipeService(id, validatedData);
    
//     res.status(200).json({
//       success: true,
//       message: 'C·∫≠p nh·∫≠t c√¥ng th·ª©c th√†nh c√¥ng',
//       data: recipe
//     });
//   } catch (error: any) {
//     res.status(400).json({
//       success: false,
//       message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t c√¥ng th·ª©c',
//       error: error.issues || error
//     });
//   }
// };

// T√≠nh chi ph√≠ c√¥ng th·ª©c
export const calculateRecipeCost = async (req: Request, res: Response) => {
  try {
    const validatedData = RecipeCostCalculationSchema.parse(req.body);
    const result = await calculateRecipeCostService(validatedData);
    
    res.status(200).json({
      success: true,
      message: 'T√≠nh chi ph√≠ c√¥ng th·ª©c th√†nh c√¥ng',
      data: result
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi t√≠nh chi ph√≠ c√¥ng th·ª©c',
      error: error.issues || error
    });
  }
};

// ================================
// üìä ANALYTICS CONTROLLERS
// ================================

// Th·ªëng k√™ t·ªìn kho
export const getInventoryStats = async (req: Request, res: Response) => {
  try {
    const validatedQuery = InventoryStatsQuerySchema.parse(req.query);
    const stats = await getInventoryStatsService(validatedQuery);
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y th·ªëng k√™ t·ªìn kho th√†nh c√¥ng',
      data: stats
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y th·ªëng k√™ t·ªìn kho',
      error: error.issues || error
    });
  }
};

// ================================
// üì± MOBILE/QUICK OPERATIONS
// ================================

// Ki·ªÉm tra QR Code
export const checkQRInventory = async (req: Request, res: Response) => {
  try {
    const validatedData = QRInventoryCheckSchema.parse(req.body);
    // Implementation for QR code checking would go here
    
    res.status(200).json({
      success: true,
      message: 'Ki·ªÉm tra QR th√†nh c√¥ng',
      data: { qr_code: validatedData.qr_code }
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi ki·ªÉm tra QR',
      error: error.issues || error
    });
  }
};

// C·∫≠p nh·∫≠t nhanh s·ªë l∆∞·ª£ng
export const quickStockUpdate = async (req: Request, res: Response) => {
  try {
    const validatedData = QuickStockUpdateSchema.parse(req.body);
    // Implementation for quick stock update would go here
    
    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t nhanh th√†nh c√¥ng',
      data: validatedData
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t nhanh',
      error: error.issues || error
    });
  }
};
