import { Request, Response } from 'express';
// import { Request } from '@/types/auth';
import {
  CreateReservationSchema,
  UpdateReservationSchema,
  UpdateReservationStatusSchema,
  ReservationQuerySchema,
  CheckAvailabilitySchema,
  BulkUpdateReservationSchema,
  ReservationAnalyticsSchema,
  CreateWalkInSchema,
  CreateWaitlistSchema
} from '@/schemas/reservationSchemas';
import {
  getAllReservations as getAllReservationsService,
  updateStatusReservation as updateStatusReservationService,
  createReservation,
  getReservations,
  getReservationById,
  updateReservation,
  updateReservationStatus,
  deleteReservation,
  checkTableAvailability,
  bulkUpdateReservations,
  createWalkIn,
  getReservationAnalytics,
  createWaitlist,
  getWaitlist,
  updateWaitlistStatus,
  getReservationsByCustomer,
  searchReservationsByPhone,
  getDailyReservationStats
} from '@/services/reservationServices';

// ================================
// üéØ RESERVATION CONTROLLERS
// ================================

export async function getAllReservations(
  req: Request,
  res: Response
) {
  try {
    const result = await getAllReservationsService();

    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch ƒë∆°n ƒë·∫∑t b√†n th√†nh c√¥ng',
      data: result
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch ƒë·∫∑t b√†n',
      error: error.issues || error
    });
  }
}

export async function updateStatusReservation(
  req: Request,
  res: Response
) {
  try {
    const { id } = req.params;
    const { status } = req.body;

    if (!id) {
      return res.status(400).json({
        success: false,
        message: 'Category ID is required'
      });
    }

    // Validate request body
    // const result = await UpdateReservationSchema.safeParseAsync(req.body);
    //
    // if (!result.success) {
    //   return res.status(400).json({
    //     success: false,
    //     message: 'Validation failed',
    //     errors: result.error.issues
    //   });
    // }

    const reservation = await updateStatusReservationService(id, status);

    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n ƒë·∫∑t b√†n th√†nh c√¥ng',
      data: reservation
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Failed to update category';
    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
}
/**
 * T·∫°o ƒë·∫∑t b√†n m·ªõi
 * POST /api/reservations
 */
export async function createReservationController(req: Request, res: Response) {
  try {
    const validatedData = CreateReservationSchema.parse(req.body);
    
    const result = await createReservation(validatedData);

    if (result.success) {
      res.status(201).json({
        success: true,
        data: result.data,
        message: result.message
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    if (error instanceof Error && error.name === 'ZodError') {
      res.status(400).json({
        success: false,
        error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        details: error.message
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'L·ªói server'
      });
    }
  }
}

/**
 * L·∫•y danh s√°ch ƒë·∫∑t b√†n
 * GET /api/reservations
 */
export async function getReservationsController(req: Request, res: Response) {
  try {
    const queryParams = {
      ...req.query,
      page: req.query.page ? parseInt(req.query.page as string) : 1,
      limit: req.query.limit ? parseInt(req.query.limit as string) : 10
    };

    const validatedQuery = ReservationQuerySchema.parse(queryParams);
    
    // N·∫øu user kh√¥ng ph·∫£i admin, ch·ªâ xem ƒë∆∞·ª£c reservations c·ªßa restaurant m√¨nh
    // if (req.user?.role !== 'admin' && req.user?.restaurant_context?.restaurant_id) {
    //   validatedQuery.restaurant_id = req.user.restaurant_context.restaurant_id;
    // }

    const result = await getReservations(validatedQuery);

    if (result.success) {
      res.status(200).json({
        success: true,
        data: result.data
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    if (error instanceof Error && error.name === 'ZodError') {
      res.status(400).json({
        success: false,
        error: 'Tham s·ªë truy v·∫•n kh√¥ng h·ª£p l·ªá',
        details: error.message
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'L·ªói server'
      });
    }
  }
}

/**
 * L·∫•y th√¥ng tin ƒë·∫∑t b√†n theo ID
 * GET /api/reservations/:id
 */
export async function getReservationByIdController(req: Request, res: Response) {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ID ƒë·∫∑t b√†n l√† b·∫Øt bu·ªôc'
      });
    }

    const result = await getReservationById(id);

    if (result.success) {
      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
      // if (req.user?.role !== 'admin' && req.user?.restaurant_context?.restaurant_id !== result.data?.tables.restaurant_id) {
      //   return res.status(403).json({
      //     success: false,
      //     error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
      //   });
      // }

      res.status(200).json({
        success: true,
        data: result.data
      });
    } else {
      res.status(404).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói server'
    });
  }
}

/**
 * C·∫≠p nh·∫≠t th√¥ng tin ƒë·∫∑t b√†n
 * PUT /api/reservations/:id
 */
export async function updateReservationController(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const validatedData = UpdateReservationSchema.parse(req.body);

    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ID ƒë·∫∑t b√†n l√† b·∫Øt bu·ªôc'
      });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p tr∆∞·ªõc khi update
    const existingReservation = await getReservationById(id);
    if (!existingReservation.success) {
      return res.status(404).json({
        success: false,
        error: existingReservation.error
      });
    }

    // if (req.user?.role !== 'admin' && req.user?.restaurant_context?.restaurant_id !== existingReservation.data?.tables.restaurant_id) {
    //   return res.status(403).json({
    //     success: false,
    //     error: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t'
    //   });
    // }

    const result = await updateReservation(id, validatedData);

    if (result.success) {
      res.status(200).json({
        success: true,
        data: result.data,
        message: result.message
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    if (error instanceof Error && error.name === 'ZodError') {
      res.status(400).json({
        success: false,
        error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        details: error.message
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'L·ªói server'
      });
    }
  }
}

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t b√†n
 * PATCH /api/reservations/:id/status
 */
export async function updateReservationStatusController(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const validatedData = UpdateReservationStatusSchema.parse(req.body);

    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ID ƒë·∫∑t b√†n l√† b·∫Øt bu·ªôc'
      });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    const existingReservation = await getReservationById(id);
    if (!existingReservation.success) {
      return res.status(404).json({
        success: false,
        error: existingReservation.error
      });
    }

    // if (req.user?.role !== 'admin' && req.user?.restaurant_context?.restaurant_id !== existingReservation.data?.tables.restaurant_id) {
    //   return res.status(403).json({
    //     success: false,
    //     error: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t'
    //   });
    // }

    const result = await updateReservationStatus(id, validatedData);

    if (result.success) {
      res.status(200).json({
        success: true,
        data: result.data,
        message: result.message
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    if (error instanceof Error && error.name === 'ZodError') {
      res.status(400).json({
        success: false,
        error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        details: error.message
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'L·ªói server'
      });
    }
  }
}

/**
 * X√≥a ƒë·∫∑t b√†n
 * DELETE /api/reservations/:id
 */
export async function deleteReservationController(req: Request, res: Response) {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ID ƒë·∫∑t b√†n l√† b·∫Øt bu·ªôc'
      });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    const existingReservation = await getReservationById(id);
    if (!existingReservation.success) {
      return res.status(404).json({
        success: false,
        error: existingReservation.error
      });
    }

    // if (req.user?.role !== 'admin' && req.user?.restaurant_context?.restaurant_id !== existingReservation.data?.tables.restaurant_id) {
    //   return res.status(403).json({
    //     success: false,
    //     error: 'Kh√¥ng c√≥ quy·ªÅn x√≥a'
    //   });
    // }

    const result = await deleteReservation(id);

    if (result.success) {
      res.status(200).json({
        success: true,
        message: result.message
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói server'
    });
  }
}

/**
 * Ki·ªÉm tra t√¨nh tr·∫°ng b√†n tr·ªëng
 * POST /api/reservations/check-availability
 */
export async function checkAvailabilityController(req: Request, res: Response) {
  try {
    const validatedData = CheckAvailabilitySchema.parse(req.body);

    const result = await checkTableAvailability(validatedData);

    if (result.success) {
      res.status(200).json({
        success: true,
        data: result.data
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    if (error instanceof Error && error.name === 'ZodError') {
      res.status(400).json({
        success: false,
        error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        details: error.message
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'L·ªói server'
      });
    }
  }
}

/**
 * C·∫≠p nh·∫≠t h√†ng lo·∫°t ƒë·∫∑t b√†n
 * PATCH /api/reservations/bulk-update
 */
export async function bulkUpdateReservationsController(req: Request, res: Response) {
  try {
    const validatedData = BulkUpdateReservationSchema.parse(req.body);

    // Ch·ªâ admin ho·∫∑c manager m·ªõi c√≥ quy·ªÅn bulk update
    // if (!['admin', 'manager'].includes(req.user?.role || '')) {
    //   return res.status(403).json({
    //     success: false,
    //     error: 'Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y'
    //   });
    // }

    const result = await bulkUpdateReservations(validatedData);

    if (result.success) {
      res.status(200).json({
        success: true,
        data: result.data,
        message: result.message
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    if (error instanceof Error && error.name === 'ZodError') {
      res.status(400).json({
        success: false,
        error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        details: error.message
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'L·ªói server'
      });
    }
  }
}

/**
 * T·∫°o kh√°ch v√£ng lai (walk-in)
 * POST /api/reservations/walk-in
 */
export async function createWalkInController(req: Request, res: Response) {
  try {
    const validatedData = CreateWalkInSchema.parse(req.body);

    const result = await createWalkIn(validatedData);

    if (result.success) {
      res.status(201).json({
        success: true,
        data: result.data,
        message: result.message
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    if (error instanceof Error && error.name === 'ZodError') {
      res.status(400).json({
        success: false,
        error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        details: error.message
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'L·ªói server'
      });
    }
  }
}

/**
 * Ph√¢n t√≠ch th·ªëng k√™ ƒë·∫∑t b√†n
 * POST /api/reservations/analytics
 */
export async function getReservationAnalyticsController(req: Request, res: Response) {
  try {
    const validatedData = ReservationAnalyticsSchema.parse(req.body);

    // N·∫øu kh√¥ng ph·∫£i admin, ch·ªâ xem analytics c·ªßa restaurant m√¨nh
    // if (req.user?.role !== 'admin' && req.user?.restaurant_context?.restaurant_id) {
    //   validatedData.restaurant_id = req.user.restaurant_context?.restaurant_id;
    // }

    const result = await getReservationAnalytics(validatedData);

    if (result.success) {
      res.status(200).json({
        success: true,
        data: result.data
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    if (error instanceof Error && error.name === 'ZodError') {
      res.status(400).json({
        success: false,
        error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        details: error.message
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'L·ªói server'
      });
    }
  }
}

/**
 * L·∫•y ƒë·∫∑t b√†n h√¥m nay
 * GET /api/reservations/today
 */
export async function getTodayReservationsController(req: Request, res: Response) {
  try {
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);

    const queryParams = {
      // restaurant_id: req.user?.restaurant_context?.restaurant_id,
      date_from: startOfDay.toISOString(),
      date_to: endOfDay.toISOString(),
      page: 1,
      limit: 100,
      sort_by: 'reservation_date' as const,
      sort_order: 'asc' as const
    };

    const result = await getReservations(queryParams);

    if (result.success) {
      res.status(200).json({
        success: true,
        data: result.data
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói server'
    });
  }
}

/**
 * L·∫•y ƒë·∫∑t b√†n s·∫Øp t·ªõi (trong 2 ti·∫øng)
 * GET /api/reservations/upcoming
 */
export async function getUpcomingReservationsController(req: Request, res: Response) {
  try {
    const now = new Date();
    const twoHoursLater = new Date(now.getTime() + 2 * 60 * 60 * 1000);

    const queryParams = {
      // restaurant_id: req.user?.restaurant_context?.restaurant_id,
      date_from: now.toISOString(),
      date_to: twoHoursLater.toISOString(),
      status: 'confirmed' as const,
      page: 1,
      limit: 50,
      sort_by: 'reservation_date' as const,
      sort_order: 'asc' as const
    };

    const result = await getReservations(queryParams);

    if (result.success) {
      res.status(200).json({
        success: true,
        data: result.data
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói server'
    });
  }
}

/**
 * T·∫°o waitlist
 * POST /api/reservations/waitlist
 */
// export async function createWaitlistController(req: Request, res: Response) {
export async function createWaitlistController(req: Request, res: Response) {
  try {
    const validatedData = CreateWaitlistSchema.parse(req.body);

    const result = await createWaitlist(validatedData);

    if (result.success) {
      res.status(201).json({
        success: true,
        // data: result.data,
        // message: result.message
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    if (error instanceof Error && error.name === 'ZodError') {
      res.status(400).json({
        success: false,
        error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        details: error.message
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'L·ªói server'
      });
    }
  }
}

/**
 * L·∫•y danh s√°ch waitlist
 * GET /api/reservations/waitlist
 */
export async function getWaitlistController(req: Request, res: Response) {
  try {
    const { restaurant_id, status } = req.query;

    if (!restaurant_id) {
      return res.status(400).json({
        success: false,
        error: 'ID nh√† h√†ng l√† b·∫Øt bu·ªôc'
      });
    }

    const result = await getWaitlist(restaurant_id as string, status as string);

    if (result.success) {
      res.status(200).json({
        success: true,
        // data: result.data
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói server'
    });
  }
}

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i waitlist
 * PATCH /api/reservations/waitlist/:id/status
 */
export async function updateWaitlistStatusController(req: Request, res: Response) {
  try {
    const { id } = req.params;
    const { status, notes } = req.body;

    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ID waitlist l√† b·∫Øt bu·ªôc'
      });
    }

    const result = await updateWaitlistStatus(id, status, notes);

    if (result.success) {
      res.status(200).json({
        success: true,
        // data: result.data,
        // message: result.message
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói server'
    });
  }
}

/**
 * L·∫•y ƒë·∫∑t b√†n theo kh√°ch h√†ng
 * GET /api/reservations/customer/:customer_id
 */
export async function getReservationsByCustomerController(req: Request, res: Response) {
  try {
    const { customer_id } = req.params;
    const { status } = req.query;

    if (!customer_id) {
      return res.status(400).json({
        success: false,
        error: 'ID kh√°ch h√†ng l√† b·∫Øt bu·ªôc'
      });
    }

    const result = await getReservationsByCustomer(customer_id, status as string);

    if (result.success) {
      res.status(200).json({
        success: true,
        data: result.data
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói server'
    });
  }
}

/**
 * T√¨m ki·∫øm ƒë·∫∑t b√†n theo s·ªë ƒëi·ªán tho·∫°i
 * GET /api/reservations/search/phone
 */
export async function searchReservationsByPhoneController(req: Request, res: Response) {
  try {
    const { phone, restaurant_id } = req.query;

    if (!phone) {
      return res.status(400).json({
        success: false,
        error: 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc'
      });
    }

    const result = await searchReservationsByPhone(phone as string, restaurant_id as string);

    if (result.success) {
      res.status(200).json({
        success: true,
        data: result.data
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói server'
    });
  }
}

/**
 * L·∫•y th·ªëng k√™ ƒë·∫∑t b√†n theo ng√†y
 * GET /api/reservations/stats/daily
 */
export async function getDailyReservationStatsController(req: Request, res: Response) {
  try {
    const { restaurant_id, date } = req.query;

    if (!restaurant_id || !date) {
      return res.status(400).json({
        success: false,
        error: 'ID nh√† h√†ng v√† ng√†y l√† b·∫Øt bu·ªôc'
      });
    }

    const result = await getDailyReservationStats(restaurant_id as string, date as string);

    if (result.success) {
      res.status(200).json({
        success: true,
        data: result.data
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'L·ªói server'
    });
  }
}
