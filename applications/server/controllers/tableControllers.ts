import { Request, Response } from 'express';
import { 
  CreateTableSchema,
  UpdateTableSchema,
  TableQuerySchema,
  CreateReservationSchema,
  UpdateReservationSchema,
  ReservationQuerySchema,
  CreateTableOrderSchema,
  UpdateTableOrderSchema,
  TableOrderQuerySchema,
  TableAvailabilitySchema,
  UpdateTableStatusSchema,
  ConfirmReservationSchema,
  TableCheckInSchema,
  TableStatsQuerySchema,
  ReservationStatsQuerySchema
} from '@/schemas/tableSchemas';
import {
  getAllTable as getAllTableService,
  createTable as createTableService,
  getTableById as getTableByIdService,
  getTables as getTablesService,
  getTablesByRestaurantId as getTablesByRestaurantIdService,
  updateTable as updateTableService,
  deleteTable as deleteTableService,
  checkTableAvailability as checkTableAvailabilityService,
  updateTableStatus as updateTableStatusService,
  createReservation as createReservationService,
  getReservationById as getReservationByIdService,
  getReservations as getReservationsService,
  updateReservation as updateReservationService,
  confirmReservation as confirmReservationService,
  checkInTable as checkInTableService,
  createTableOrder as createTableOrderService,
  getTableOrderById as getTableOrderByIdService,
  getTableOrders as getTableOrdersService,
  updateTableOrder as updateTableOrderService,
  getTableStats as getTableStatsService,
  getReservationStats as getReservationStatsService,
} from '@/services/tableServices';

// ================================
// ü™ë TABLE CONTROLLERS
// ================================

export async function getAllTable(
  req: Request,
  res: Response
) {
  try {
    const result = await getAllTableService();
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch b√†n th√†nh c√¥ng',
      data: result
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch b√†n',
      error: error.issues || error
    });
  }
}

// T·∫°o b√†n m·ªõi
export const createTable = async (req: Request, res: Response) => {
  try {
    const validatedData = CreateTableSchema.parse(req.body);
    const table = await createTableService(validatedData);
    
    res.status(201).json({
      success: true,
      message: 'T·∫°o b√†n th√†nh c√¥ng',
      data: table
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi t·∫°o b√†n',
      error: error.issues || error
    });
  }
};

// L·∫•y b√†n theo ID
// export const getTableById = async (req: Request, res: Response) => {
//   try {
//     const { id } = req.params;
//     const table = await getTableByIdService(id);
    
//     res.status(200).json({
//       success: true,
//       message: 'L·∫•y th√¥ng tin b√†n th√†nh c√¥ng',
//       data: table
//     });
//   } catch (error: any) {
//     res.status(404).json({
//       success: false,
//       message: error.message || 'Kh√¥ng t√¨m th·∫•y b√†n',
//     });
//   }
// };

// L·∫•y danh s√°ch b√†n v·ªõi filter
export const getTables = async (req: Request, res: Response) => {
  try {
    const validatedQuery = TableQuerySchema.parse(req.query);
    const result = await getTablesService(validatedQuery);
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch b√†n th√†nh c√¥ng',
      ...result
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch b√†n',
      error: error.issues || error
    });
  }
};

// L·∫•y b√†n theo nh√† h√†ng
// export const getTablesByRestaurantId = async (req: Request, res: Response) => {
//   try {
//     const { restaurantId } = req.params;
//     const tables = await getTablesByRestaurantIdService(restaurantId);
    
//     res.status(200).json({
//       success: true,
//       message: 'L·∫•y b√†n c·ªßa nh√† h√†ng th√†nh c√¥ng',
//       data: tables
//     });
//   } catch (error: any) {
//     res.status(400).json({
//       success: false,
//       message: error.message || 'L·ªói khi l·∫•y b√†n c·ªßa nh√† h√†ng',
//     });
//   }
// };

// C·∫≠p nh·∫≠t b√†n
// export const updateTable = async (req: Request, res: Response) => {
//   try {
//     const { id } = req.params;
//     const validatedData = UpdateTableSchema.parse(req.body);
//     const table = await updateTableService(id, validatedData);
    
//     res.status(200).json({
//       success: true,
//       message: 'C·∫≠p nh·∫≠t b√†n th√†nh c√¥ng',
//       data: table
//     });
//   } catch (error: any) {
//     res.status(400).json({
//       success: false,
//       message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t b√†n',
//       error: error.issues || error
//     });
//   }
// };

// X√≥a b√†n
// export const deleteTable = async (req: Request, res: Response) => {
//   try {
//     const { id } = req.params;
//     const result = await deleteTableService(id);
    
//     res.status(200).json({
//       success: true,
//       message: result.message
//     });
//   } catch (error: any) {
//     res.status(400).json({
//       success: false,
//       message: error.message || 'L·ªói khi x√≥a b√†n',
//     });
//   }
// };

// Ki·ªÉm tra b√†n tr·ªëng
export const checkTableAvailability = async (req: Request, res: Response) => {
  try {
    const validatedData = TableAvailabilitySchema.parse(req.body);
    const availableTables = await checkTableAvailabilityService(validatedData);
    
    res.status(200).json({
      success: true,
      message: `T√¨m th·∫•y ${availableTables.length} b√†n tr·ªëng`,
      data: availableTables
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi ki·ªÉm tra b√†n tr·ªëng',
      error: error.issues || error
    });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i nhi·ªÅu b√†n
export const updateTableStatus = async (req: Request, res: Response) => {
  try {
    const validatedData = UpdateTableStatusSchema.parse(req.body);
    const result = await updateTableStatusService(validatedData);
    
    res.status(200).json({
      success: true,
      message: result.message,
      count: result.count
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n',
      error: error.issues || error
    });
  }
};

// ================================
// üìÖ RESERVATION CONTROLLERS
// ================================

// T·∫°o ƒë·∫∑t b√†n m·ªõi
export const createReservation = async (req: Request, res: Response) => {
  try {
    const validatedData = CreateReservationSchema.parse(req.body);
    const reservation = await createReservationService(validatedData);
    
    res.status(201).json({
      success: true,
      message: 'T·∫°o ƒë·∫∑t b√†n th√†nh c√¥ng',
      data: reservation
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi t·∫°o ƒë·∫∑t b√†n',
      error: error.issues || error
    });
  }
};

// L·∫•y ƒë·∫∑t b√†n theo ID
// export const getReservationById = async (req: Request, res: Response) => {
//   try {
//     const { id } = req.params;
//     const reservation = await getReservationByIdService(id);
    
//     res.status(200).json({
//       success: true,
//       message: 'L·∫•y th√¥ng tin ƒë·∫∑t b√†n th√†nh c√¥ng',
//       data: reservation
//     });
//   } catch (error: any) {
//     res.status(404).json({
//       success: false,
//       message: error.message || 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n',
//     });
//   }
// };

// L·∫•y danh s√°ch ƒë·∫∑t b√†n
export const getReservations = async (req: Request, res: Response) => {
  try {
    const validatedQuery = ReservationQuerySchema.parse(req.query);
    const result = await getReservationsService(validatedQuery);
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch ƒë·∫∑t b√†n th√†nh c√¥ng',
      ...result
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch ƒë·∫∑t b√†n',
      error: error.issues || error
    });
  }
};

// C·∫≠p nh·∫≠t ƒë·∫∑t b√†n
// export const updateReservation = async (req: Request, res: Response) => {
//   try {
//     const { id } = req.params;
//     const validatedData = UpdateReservationSchema.parse(req.body);
//     const reservation = await updateReservationService(id, validatedData);
    
//     res.status(200).json({
//       success: true,
//       message: 'C·∫≠p nh·∫≠t ƒë·∫∑t b√†n th√†nh c√¥ng',
//       data: reservation
//     });
//   } catch (error: any) {
//     res.status(400).json({
//       success: false,
//       message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t ƒë·∫∑t b√†n',
//       error: error.issues || error
//     });
//   }
// };

// X√°c nh·∫≠n ƒë·∫∑t b√†n
export const confirmReservation = async (req: Request, res: Response) => {
  try {
    const validatedData = ConfirmReservationSchema.parse(req.body);
    const reservation = await confirmReservationService(validatedData);
    
    res.status(200).json({
      success: true,
      message: 'X√°c nh·∫≠n ƒë·∫∑t b√†n th√†nh c√¥ng',
      data: reservation
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi x√°c nh·∫≠n ƒë·∫∑t b√†n',
      error: error.issues || error
    });
  }
};

// Check-in kh√°ch h√†ng
export const checkInTable = async (req: Request, res: Response) => {
  try {
    const validatedData = TableCheckInSchema.parse(req.body);
    const tableOrder = await checkInTableService(validatedData);
    
    res.status(201).json({
      success: true,
      message: 'Check-in th√†nh c√¥ng',
      data: tableOrder
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi check-in',
      error: error.issues || error
    });
  }
};

// ================================
// üçΩÔ∏è TABLE ORDER CONTROLLERS
// ================================

// T·∫°o table order
export const createTableOrder = async (req: Request, res: Response) => {
  try {
    const validatedData = CreateTableOrderSchema.parse(req.body);
    const tableOrder = await createTableOrderService(validatedData);
    
    res.status(201).json({
      success: true,
      message: 'T·∫°o phi√™n b√†n th√†nh c√¥ng',
      data: tableOrder
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi t·∫°o phi√™n b√†n',
      error: error.issues || error
    });
  }
};

// L·∫•y table order theo ID
// export const getTableOrderById = async (req: Request, res: Response) => {
//   try {
//     const { id } = req.params;
//     const tableOrder = await getTableOrderByIdService(id);
    
//     res.status(200).json({
//       success: true,
//       message: 'L·∫•y th√¥ng tin phi√™n b√†n th√†nh c√¥ng',
//       data: tableOrder
//     });
//   } catch (error: any) {
//     res.status(404).json({
//       success: false,
//       message: error.message || 'Kh√¥ng t√¨m th·∫•y phi√™n b√†n',
//     });
//   }
// };

// L·∫•y danh s√°ch table orders
export const getTableOrders = async (req: Request, res: Response) => {
  try {
    const validatedQuery = TableOrderQuerySchema.parse(req.query);
    const result = await getTableOrdersService(validatedQuery);
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y danh s√°ch phi√™n b√†n th√†nh c√¥ng',
      ...result
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch phi√™n b√†n',
      error: error.issues || error
    });
  }
};

// C·∫≠p nh·∫≠t table order
// export const updateTableOrder = async (req: Request, res: Response) => {
//   try {
//     const { id } = req.params;
//     const validatedData = UpdateTableOrderSchema.parse(req.body);
//     const tableOrder = await updateTableOrderService(id, validatedData);
    
//     res.status(200).json({
//       success: true,
//       message: 'C·∫≠p nh·∫≠t phi√™n b√†n th√†nh c√¥ng',
//       data: tableOrder
//     });
//   } catch (error: any) {
//     res.status(400).json({
//       success: false,
//       message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t phi√™n b√†n',
//       error: error.issues || error
//     });
//   }
// };

// ================================
// üìä STATISTICS CONTROLLERS
// ================================

// Th·ªëng k√™ b√†n
export const getTableStats = async (req: Request, res: Response) => {
  try {
    const validatedQuery = TableStatsQuerySchema.parse(req.query);
    const stats = await getTableStatsService(validatedQuery);
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y th·ªëng k√™ b√†n th√†nh c√¥ng',
      data: stats
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y th·ªëng k√™ b√†n',
      error: error.issues || error
    });
  }
};

// Th·ªëng k√™ ƒë·∫∑t b√†n
export const getReservationStats = async (req: Request, res: Response) => {
  try {
    const validatedQuery = ReservationStatsQuerySchema.parse(req.query);
    const stats = await getReservationStatsService(validatedQuery);
    
    res.status(200).json({
      success: true,
      message: 'L·∫•y th·ªëng k√™ ƒë·∫∑t b√†n th√†nh c√¥ng',
      data: stats
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y th·ªëng k√™ ƒë·∫∑t b√†n',
      error: error.issues || error
    });
  }
};
