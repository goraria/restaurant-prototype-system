import { z } from 'zod';

// ================================
// üéüÔ∏è VOUCHER & PROMOTION SCHEMAS
// ================================

// Voucher schemas (existing patterns)
export const CreateVoucherSchema = z.object({
  restaurant_id: z.string()
    .uuid('ID nh√† h√†ng kh√¥ng h·ª£p l·ªá')
    .optional(),
  code: z.string()
    .min(3, 'M√£ voucher t·ªëi thi·ªÉu 3 k√Ω t·ª±')
    .max(50, 'M√£ voucher t·ªëi ƒëa 50 k√Ω t·ª±')
    .regex(/^[A-Z0-9_-]+$/, 'M√£ voucher ch·ªâ ch·ª©a ch·ªØ in hoa, s·ªë, g·∫°ch d∆∞·ªõi v√† g·∫°ch ngang'),
  name: z.string()
    .min(1, 'T√™n voucher kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    .max(100, 'T√™n voucher kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±'),
  description: z.string()
    .max(500, 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±')
    .optional(),
  discount_type: z.enum(['percentage', 'fixed_amount']),
  discount_value: z.number()
    .min(0, 'Gi√° tr·ªã gi·∫£m gi√° ph·∫£i l·ªõn h∆°n 0'),
  min_order_value: z.number()
    .min(0, 'Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu ph·∫£i l·ªõn h∆°n 0')
    .optional(),
  max_discount: z.number()
    .min(0, 'Gi√° tr·ªã gi·∫£m t·ªëi ƒëa ph·∫£i l·ªõn h∆°n 0')
    .optional(),
  usage_limit: z.number()
    .min(1, 'Gi·ªõi h·∫°n s·ª≠ d·ª•ng ph·∫£i l·ªõn h∆°n 0')
    .optional(),
  start_date: z.string()
    .datetime('Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá'),
  end_date: z.string()
    .datetime('Ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá'),
  is_active: z.boolean()
    .optional()
    .default(true)
});

// Promotion schemas
export const CreatePromotionSchema = z.object({
  restaurant_id: z.string()
    .uuid('ID nh√† h√†ng kh√¥ng h·ª£p l·ªá'),
  name: z.string()
    .min(1, 'T√™n khuy·∫øn m√£i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    .max(100, 'T√™n khuy·∫øn m√£i kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±'),
  description: z.string()
    .max(500, 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±')
    .optional(),
  type: z.enum(['percentage', 'fixed_amount', 'buy_one_get_one', 'combo_deal', 'happy_hour', 'seasonal']),
  discount_value: z.number()
    .min(0, 'Gi√° tr·ªã gi·∫£m gi√° ph·∫£i l·ªõn h∆°n 0'),
  conditions: z.object({
    min_order_value: z.number().min(0).optional(),
    min_quantity: z.number().min(1).optional(),
    customer_type: z.enum(['all', 'new', 'vip', 'birthday']).optional(),
    day_of_week: z.array(z.number().min(0).max(6)).optional(), // 0-6 for Sun-Sat
    order_type: z.enum(['dine_in', 'takeaway', 'delivery']).optional()
  }).optional(),
  applicable_items: z.array(z.string().uuid('ID m√≥n ƒÉn kh√¥ng h·ª£p l·ªá'))
    .optional()
    .default([]),
  time_restrictions: z.object({
    start_time: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Gi·ªù b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá (HH:mm)').optional(),
    end_time: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Gi·ªù k·∫øt th√∫c kh√¥ng h·ª£p l·ªá (HH:mm)').optional(),
    days_of_week: z.array(z.number().min(0).max(6)).optional(),
    exclude_holidays: z.boolean().optional().default(false)
  }).optional(),
  start_date: z.string()
    .datetime('Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá'),
  end_date: z.string()
    .datetime('Ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá'),
  is_active: z.boolean()
    .optional()
    .default(true)
});

// Update schemas
export const UpdateVoucherSchema = CreateVoucherSchema.partial().omit({ code: true });
export const UpdatePromotionSchema = CreatePromotionSchema.partial().omit({ restaurant_id: true });

// Query schemas
export const VoucherQuerySchema = z.object({
  restaurant_id: z.string()
    .uuid('ID nh√† h√†ng kh√¥ng h·ª£p l·ªá')
    .optional(),
  code: z.string()
    .optional(),
  discount_type: z.enum(['percentage', 'fixed_amount'])
    .optional(),
  is_active: z.boolean()
    .optional(),
  is_expired: z.boolean()
    .optional(),
  sort_by: z.enum(['created_at', 'start_date', 'end_date', 'used_count'])
    .optional()
    .default('created_at'),
  sort_order: z.enum(['asc', 'desc'])
    .optional()
    .default('desc'),
  page: z.number()
    .min(1, 'Trang ph·∫£i l·ªõn h∆°n 0')
    .int('Trang ph·∫£i l√† s·ªë nguy√™n')
    .optional()
    .default(1),
  limit: z.number()
    .min(1, 'Gi·ªõi h·∫°n ph·∫£i l·ªõn h∆°n 0')
    .max(100, 'Gi·ªõi h·∫°n t·ªëi ƒëa 100')
    .int('Gi·ªõi h·∫°n ph·∫£i l√† s·ªë nguy√™n')
    .optional()
    .default(20)
});

export const PromotionQuerySchema = z.object({
  restaurant_id: z.string()
    .uuid('ID nh√† h√†ng kh√¥ng h·ª£p l·ªá')
    .optional(),
  type: z.enum(['percentage', 'fixed_amount', 'buy_one_get_one', 'combo_deal', 'happy_hour', 'seasonal'])
    .optional(),
  is_active: z.boolean()
    .optional(),
  is_expired: z.boolean()
    .optional(),
  applicable_to_item: z.string()
    .uuid('ID m√≥n ƒÉn kh√¥ng h·ª£p l·ªá')
    .optional(),
  sort_by: z.enum(['created_at', 'start_date', 'end_date', 'discount_value'])
    .optional()
    .default('created_at'),
  sort_order: z.enum(['asc', 'desc'])
    .optional()
    .default('desc'),
  page: z.number()
    .min(1, 'Trang ph·∫£i l·ªõn h∆°n 0')
    .int('Trang ph·∫£i l√† s·ªë nguy√™n')
    .optional()
    .default(1),
  limit: z.number()
    .min(1, 'Gi·ªõi h·∫°n ph·∫£i l·ªõn h∆°n 0')
    .max(100, 'Gi·ªõi h·∫°n t·ªëi ƒëa 100')
    .int('Gi·ªõi h·∫°n ph·∫£i l√† s·ªë nguy√™n')
    .optional()
    .default(20)
});

// Voucher application schema
export const ApplyVoucherSchema = z.object({
  voucher_code: z.string()
    .min(1, 'M√£ voucher kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
  order_total: z.number()
    .min(0, 'T·ªïng ti·ªÅn ƒë∆°n h√†ng ph·∫£i l·ªõn h∆°n 0'),
  restaurant_id: z.string()
    .uuid('ID nh√† h√†ng kh√¥ng h·ª£p l·ªá'),
  menu_items: z.array(z.object({
    id: z.string().uuid(),
    quantity: z.number().min(1),
    price: z.number().min(0)
  })).optional()
});

// Promotion check schema
export const CheckPromotionsSchema = z.object({
  restaurant_id: z.string()
    .uuid('ID nh√† h√†ng kh√¥ng h·ª£p l·ªá'),
  order_total: z.number()
    .min(0, 'T·ªïng ti·ªÅn ƒë∆°n h√†ng ph·∫£i l·ªõn h∆°n 0'),
  order_type: z.enum(['dine_in', 'takeaway', 'delivery']),
  customer_id: z.string()
    .uuid('ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá')
    .optional(),
  menu_items: z.array(z.object({
    id: z.string().uuid(),
    quantity: z.number().min(1),
    price: z.number().min(0)
  })),
  order_time: z.string()
    .datetime('Th·ªùi gian ƒë·∫∑t h√†ng kh√¥ng h·ª£p l·ªá')
    .optional()
});

// Combined discount calculation schema
export const CalculateDiscountSchema = z.object({
  restaurant_id: z.string()
    .uuid('ID nh√† h√†ng kh√¥ng h·ª£p l·ªá'),
  order_total: z.number()
    .min(0, 'T·ªïng ti·ªÅn ƒë∆°n h√†ng ph·∫£i l·ªõn h∆°n 0'),
  order_type: z.enum(['dine_in', 'takeaway', 'delivery']),
  customer_id: z.string()
    .uuid('ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá')
    .optional(),
  menu_items: z.array(z.object({
    id: z.string().uuid(),
    quantity: z.number().min(1),
    price: z.number().min(0)
  })),
  voucher_code: z.string()
    .optional(),
  order_time: z.string()
    .datetime('Th·ªùi gian ƒë·∫∑t h√†ng kh√¥ng h·ª£p l·ªá')
    .optional()
});

// Bulk operations
export const BulkVoucherActionSchema = z.object({
  voucher_ids: z.array(z.string().uuid('ID voucher kh√¥ng h·ª£p l·ªá'))
    .min(1, 'Ph·∫£i ch·ªçn √≠t nh·∫•t 1 voucher')
    .max(50, 'T·ªëi ƒëa 50 voucher cho m·ªói thao t√°c'),
  action: z.enum(['activate', 'deactivate', 'delete', 'extend']),
  extend_days: z.number()
    .min(1, 'S·ªë ng√†y gia h·∫°n ph·∫£i l·ªõn h∆°n 0')
    .optional()
});

export const BulkPromotionActionSchema = z.object({
  promotion_ids: z.array(z.string().uuid('ID khuy·∫øn m√£i kh√¥ng h·ª£p l·ªá'))
    .min(1, 'Ph·∫£i ch·ªçn √≠t nh·∫•t 1 khuy·∫øn m√£i')
    .max(50, 'T·ªëi ƒëa 50 khuy·∫øn m√£i cho m·ªói thao t√°c'),
  action: z.enum(['activate', 'deactivate', 'delete', 'extend']),
  extend_days: z.number()
    .min(1, 'S·ªë ng√†y gia h·∫°n ph·∫£i l·ªõn h∆°n 0')
    .optional()
});

// Analytics schemas
export const DiscountAnalyticsSchema = z.object({
  restaurant_id: z.string()
    .uuid('ID nh√† h√†ng kh√¥ng h·ª£p l·ªá')
    .optional(),
  period: z.enum(['7d', '30d', '90d', '1y', 'all'])
    .optional()
    .default('30d'),
  type: z.enum(['vouchers', 'promotions', 'both'])
    .optional()
    .default('both'),
  date_from: z.string()
    .datetime('Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá')
    .optional(),
  date_to: z.string()
    .datetime('Ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá')
    .optional()
});

// ================================
// üè∑Ô∏è TYPE EXPORTS
// ================================

export type CreateVoucherRequest = z.infer<typeof CreateVoucherSchema>;
export type CreatePromotionRequest = z.infer<typeof CreatePromotionSchema>;
export type UpdateVoucherRequest = z.infer<typeof UpdateVoucherSchema>;
export type UpdatePromotionRequest = z.infer<typeof UpdatePromotionSchema>;
export type VoucherQueryRequest = z.infer<typeof VoucherQuerySchema>;
export type PromotionQueryRequest = z.infer<typeof PromotionQuerySchema>;
export type ApplyVoucherRequest = z.infer<typeof ApplyVoucherSchema>;
export type CheckPromotionsRequest = z.infer<typeof CheckPromotionsSchema>;
export type CalculateDiscountRequest = z.infer<typeof CalculateDiscountSchema>;
export type BulkVoucherActionRequest = z.infer<typeof BulkVoucherActionSchema>;
export type BulkPromotionActionRequest = z.infer<typeof BulkPromotionActionSchema>;
export type DiscountAnalyticsRequest = z.infer<typeof DiscountAnalyticsSchema>;
