generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("EXPRESS_DATABASE_URL")
  directUrl = env("EXPRESS_DIRECT_URL")
}

/// Customer addresses for delivery
model addresses {
  id              String   @id @default(uuid()) @db.Uuid
  user_id         String   @db.Uuid
  recipient_name  String   @db.VarChar(100)
  recipient_phone String   @db.VarChar(20)
  street_address  String   @db.VarChar(255)
  ward            String?  @db.VarChar(100)
  district        String   @db.VarChar(100)
  city            String   @db.VarChar(100)
  country         String   @default("Vietnam") @db.VarChar(100)
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @updatedAt @db.Timestamptz(6)
  is_default      Boolean  @default(false)
  users           users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  orders          orders[]

  @@index([user_id], map: "idx_addresses_user")
  @@index([is_default], map: "idx_addresses_default")
}

/// Categories for menu items
model categories {
  id               String       @id @default(uuid()) @db.Uuid
  name             String       @db.VarChar(100)
  slug             String       @unique @db.VarChar(120)
  description      String?
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  display_order    Int          @default(0)
  image_url        String?      @db.VarChar(255)
  is_active        Boolean      @default(true)
  parent_id        String?      @db.Uuid
  updated_at       DateTime     @default(now()) @db.Timestamptz(6)
  parent_category  categories?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  child_categories categories[] @relation("CategoryHierarchy")
  menu_items       menu_items[]

  @@index([parent_id], map: "idx_categories_parent")
  @@index([slug], map: "idx_categories_slug")
  @@index([is_active], map: "idx_categories_active")
}

/// Real-time conversations for customer support
model conversations {
  id              String                   @id @default(uuid()) @db.Uuid
  type            conversation_type_enum   @default(support)
  created_at      DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at      DateTime                 @default(now()) @db.Timestamptz(6)
  customer_id     String?                  @db.Uuid
  last_message_at DateTime?                @db.Timestamptz(6)
  restaurant_id   String?                  @db.Uuid
  staff_id        String?                  @db.Uuid
  status          conversation_status_enum @default(active)
  title           String?                  @db.VarChar(255)
  customers       users?                   @relation("conversations_customer", fields: [customer_id], references: [id])
  restaurants     restaurants?             @relation(fields: [restaurant_id], references: [id])
  staff           users?                   @relation("conversations_staff", fields: [staff_id], references: [id])
  messages        messages[]

  @@index([restaurant_id], map: "idx_conversations_restaurant")
  @@index([customer_id], map: "idx_conversations_customer")
  @@index([staff_id], map: "idx_conversations_staff")
  @@index([status], map: "idx_conversations_status")
}

/// Messages in conversations
model messages {
  id              String            @id @default(uuid()) @db.Uuid
  conversation_id String            @db.Uuid
  sender_id       String            @db.Uuid
  content         String
  message_type    message_type_enum @default(text)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  attachments     String[]
  is_read         Boolean           @default(false)
  conversations   conversations     @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  senders         users             @relation(fields: [sender_id], references: [id])

  @@index([conversation_id], map: "idx_messages_conversation")
  @@index([sender_id], map: "idx_messages_sender")
  @@index([created_at], map: "idx_messages_created")
}

/// Top-level organization (company)
model organizations {
  id              String                     @id @default(uuid()) @db.Uuid
  name            String                     @db.VarChar(100)
  code            String                     @unique @db.VarChar(30)
  description     String?
  owner_id        String                     @db.Uuid
  created_at      DateTime                   @default(now()) @db.Timestamptz(6)
  updated_at      DateTime                   @updatedAt @db.Timestamptz(6)
  logo_url        String?                    @db.VarChar(255)
  clerk_id        String?                    @unique @db.VarChar(255)
  clerk_slug      String?                    @unique @db.VarChar(255)
  owner           users                      @relation("organizations_owner", fields: [owner_id], references: [id])
  chains          restaurant_chains[]
  restaurants     restaurants[]
  memberships     organization_memberships[]

  @@index([owner_id], map: "idx_organizations_owner")
  @@index([code], map: "idx_organizations_code")
  @@index([clerk_id], map: "idx_organizations_clerk")
}

/// Organization memberships from Clerk
model organization_memberships {
  id              String                  @id @default(uuid()) @db.Uuid
  clerk_id        String                  @unique @db.VarChar(255)
  organization_id String                  @db.Uuid
  user_id         String                  @db.Uuid
  role            organization_role_enum  @default(member)
  created_at      DateTime                @default(now()) @db.Timestamptz(6)
  updated_at      DateTime                @updatedAt @db.Timestamptz(6)
  joined_at       DateTime?               @db.Timestamptz(6)
  invited_at      DateTime?               @db.Timestamptz(6)
  organization    organizations           @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user            users                   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([organization_id, user_id], map: "uq_org_membership_org_user")
  @@index([organization_id], map: "idx_org_memberships_org")
  @@index([user_id], map: "idx_org_memberships_user")
  @@index([clerk_id], map: "idx_org_memberships_clerk")
}

/// Restaurant chains within organization
model restaurant_chains {
  id              String        @id @default(uuid()) @db.Uuid
  name            String        @db.VarChar(100)
  description     String?
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime      @default(now()) @db.Timestamptz(6)
  logo_url        String?       @db.VarChar(255)
  organization_id String        @db.Uuid
  organizations   organizations @relation(fields: [organization_id], references: [id])
  restaurants     restaurants[]

  @@index([organization_id], map: "idx_restaurant_chains_organization")
}

/// Individual restaurants
model restaurants {
  id               String                 @id @default(uuid()) @db.Uuid
  organization_id  String                 @db.Uuid
  chain_id         String?                @db.Uuid
  code             String                 @db.VarChar(30)
  name             String                 @db.VarChar(100)
  address          String                 @db.VarChar(255)
  phone_number     String?                @db.VarChar(20)
  description      String?
  created_at       DateTime               @default(now()) @db.Timestamptz(6)
  updated_at       DateTime               @default(now()) @db.Timestamptz(6)
  manager_id       String?                @db.Uuid
  cover_url        String?                @db.VarChar(255)
  email            String?                @db.VarChar(255)
  logo_url         String?                @db.VarChar(255)
  opening_hours    Json?
  status           restaurant_status_enum @default(active)
  conversations    conversations[]
  inventory_items  inventory_items[]
  menus            menus[]
  orders           orders[]
  promotions       promotions[]
  staffs           restaurant_staffs[]
  chains           restaurant_chains?     @relation(fields: [chain_id], references: [id])
  manager          users?                 @relation("restaurants_manager", fields: [manager_id], references: [id])
  organizations    organizations          @relation(fields: [organization_id], references: [id])
  revenue_reports  revenue_reports[]
  reviews          reviews[]
  staff_attendance staff_attendance[]
  staff_schedules  staff_schedules[]
  tables           tables[]
  vouchers         vouchers[]
  // New relations
  purchase_orders  purchase_orders[]
  warehouse_receipts warehouse_receipts[]
  warehouse_issues warehouse_issues[]
  inventory_balances inventory_balances[]
  kpi_metrics      kpi_metrics[]

  @@unique([organization_id, code], map: "uq_restaurant_org_code")
  @@index([organization_id], map: "idx_restaurants_organization")
  @@index([chain_id], map: "idx_restaurants_chain")
  @@index([manager_id], map: "idx_restaurants_manager")
  @@index([status], map: "idx_restaurants_status")
}

/// Restaurant menus
model menus {
  id            String       @id @default(uuid()) @db.Uuid
  restaurant_id String       @db.Uuid
  name          String       @db.VarChar(100)
  description   String?
  is_active     Boolean      @default(true)
  created_at    DateTime     @default(now()) @db.Timestamptz(6)
  updated_at    DateTime     @default(now()) @db.Timestamptz(6)
  display_order Int          @default(0)
  image_url     String?      @db.VarChar(255)
  menu_items    menu_items[]
  restaurants   restaurants  @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@index([restaurant_id], map: "idx_menus_restaurant")
  @@index([is_active], map: "idx_menus_active")
}

/// Menu items (dishes/drinks)
model menu_items {
  id               String        @id @default(uuid()) @db.Uuid
  menu_id          String        @db.Uuid
  name             String        @db.VarChar(255)
  description      String?
  price            Decimal       @db.Decimal(12, 2)
  image_url        String?       @db.VarChar(255)
  is_available     Boolean       @default(true)
  created_at       DateTime      @default(now()) @db.Timestamptz(6)
  updated_at       DateTime      @default(now()) @db.Timestamptz(6)
  category_id      String?       @db.Uuid
  allergens        String[]
  calories         Int?
  dietary_info     String[]
  display_order    Int           @default(0)
  is_featured      Boolean       @default(false)
  preparation_time Int?
  categories       categories?   @relation(fields: [category_id], references: [id])
  menus            menus         @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  order_items      order_items[]
  recipes          recipes[]
  reviews          reviews[]

  @@index([menu_id], map: "idx_menu_items_menu")
  @@index([category_id], map: "idx_menu_items_category")
  @@index([is_available], map: "idx_menu_items_available")
  @@index([is_featured], map: "idx_menu_items_featured")
  @@index([price], map: "idx_menu_items_price")
}

/// Restaurant tables
model tables {
  id            String            @id @default(uuid()) @db.Uuid
  restaurant_id String            @db.Uuid
  table_number  String            @db.VarChar(20)
  capacity      Int               @default(4)
  location      String?           @db.VarChar(50)
  status        table_status_enum @default(available)
  qr_code       String?           @unique @db.VarChar(255)
  created_at    DateTime          @default(now()) @db.Timestamptz(6)
  updated_at    DateTime          @default(now()) @db.Timestamptz(6)
  reservations  reservations[]
  table_orders  table_orders[]
  restaurants   restaurants       @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@unique([restaurant_id, table_number])
  @@index([restaurant_id], map: "idx_tables_restaurant")
  @@index([status], map: "idx_tables_status")
}

/// Table reservations
model reservations {
  id               String                  @id @default(uuid()) @db.Uuid
  table_id         String                  @db.Uuid
  customer_id      String?                 @db.Uuid
  customer_name    String                  @db.VarChar(100)
  customer_phone   String                  @db.VarChar(20)
  customer_email   String?                 @db.VarChar(255)
  party_size       Int
  reservation_date DateTime                @db.Timestamptz(6)
  duration_hours   Decimal                 @default(2) @db.Decimal(4, 2)
  status           reservation_status_enum @default(pending)
  special_requests String?
  notes            String?
  created_at       DateTime                @default(now()) @db.Timestamptz(6)
  updated_at       DateTime                @default(now()) @db.Timestamptz(6)
  customers        users?                  @relation("reservations_customer", fields: [customer_id], references: [id])
  tables           tables                  @relation(fields: [table_id], references: [id])

  @@index([table_id], map: "idx_reservations_table")
  @@index([customer_id], map: "idx_reservations_customer")
  @@index([reservation_date], map: "idx_reservations_date")
  @@index([status], map: "idx_reservations_status")
}

/// Table ordering sessions
model table_orders {
  id           String                  @id @default(uuid()) @db.Uuid
  table_id     String                  @db.Uuid
  order_id     String?                 @db.Uuid
  session_code String                  @unique @db.VarChar(20)
  status       table_order_status_enum @default(active)
  opened_at    DateTime                @default(now()) @db.Timestamptz(6)
  closed_at    DateTime?               @db.Timestamptz(6)
  total_amount Decimal?                @db.Decimal(14, 2)
  staff_id     String?                 @db.Uuid
  orders       orders?                 @relation(fields: [order_id], references: [id])
  staff        users?                  @relation("table_orders_staff", fields: [staff_id], references: [id])
  tables       tables                  @relation(fields: [table_id], references: [id])

  @@index([table_id], map: "idx_table_orders_table")
  @@index([session_code], map: "idx_table_orders_session")
  @@index([status], map: "idx_table_orders_status")
}

/// Customer orders
model orders {
  id              String                 @id @default(uuid()) @db.Uuid
  order_code      String                 @unique @db.VarChar(20)
  total_amount    Decimal                @db.Decimal(14, 2)
  discount_amount Decimal                @default(0) @db.Decimal(10, 2)
  final_amount    Decimal                @db.Decimal(14, 2)
  status          order_status_enum      @default(pending)
  payment_status  payment_status_enum    @default(pending)
  notes           String?
  created_at      DateTime               @default(now()) @db.Timestamptz(6)
  updated_at      DateTime               @default(now()) @db.Timestamptz(6)
  address_id      String?                @db.Uuid
  customer_id     String                 @db.Uuid
  delivery_fee    Decimal                @default(0) @db.Decimal(10, 2)
  estimated_time  Int?
  order_type      order_type_enum        @default(dine_in)
  restaurant_id   String                 @db.Uuid
  tax_amount      Decimal                @default(0) @db.Decimal(10, 2)
  // New delivery fields
  delivery_id     String?                @db.Uuid
  delivery_zone_id String?               @db.Uuid
  delivery_notes  String?
  delivery_rating Int?                   // 1-5
  order_items     order_items[]
  order_history   order_status_history[]
  addresses       addresses?             @relation(fields: [address_id], references: [id])
  customers       users                  @relation("orders_customer", fields: [customer_id], references: [id])
  restaurants     restaurants            @relation(fields: [restaurant_id], references: [id])
  payments        payments[]
  reviews         reviews[]
  table_orders    table_orders[]
  voucher_usages  voucher_usages[]
  // New delivery relations
  deliveries      deliveries?            @relation(fields: [delivery_id], references: [id])

  @@index([restaurant_id], map: "idx_orders_restaurant")
  @@index([customer_id], map: "idx_orders_customer")
  @@index([status], map: "idx_orders_status")
  @@index([order_type], map: "idx_orders_type")
  @@index([created_at], map: "idx_orders_created")
}

/// Order items details
model order_items {
  id                   String              @id @default(uuid()) @db.Uuid
  order_id             String              @db.Uuid
  quantity             Int
  created_at           DateTime            @default(now()) @db.Timestamptz(6)
  menu_item_id         String              @db.Uuid
  cooking_status       cooking_status_enum @default(pending)
  prepared_at          DateTime?           @db.Timestamptz(6)
  served_at            DateTime?           @db.Timestamptz(6)
  special_instructions String?
  total_price          Decimal             @db.Decimal(12, 2)
  unit_price           Decimal             @db.Decimal(12, 2)
  menu_items           menu_items          @relation(fields: [menu_item_id], references: [id])
  orders               orders              @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id], map: "idx_order_items_order")
  @@index([menu_item_id], map: "idx_order_items_menu_item")
  @@index([cooking_status], map: "idx_order_items_cooking_status")
}

/// Order status change history
model order_status_history {
  id                 String            @id @default(uuid()) @db.Uuid
  order_id           String            @db.Uuid
  status             order_status_enum
  changed_by_user_id String?           @db.Uuid
  notes              String?
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  users              users?            @relation(fields: [changed_by_user_id], references: [id])
  orders             orders            @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id], map: "idx_order_status_history_order")
  @@index([created_at], map: "idx_order_status_history_created")
}

/// Payment transactions
model payments {
  id               String              @id @default(uuid()) @db.Uuid
  order_id         String              @db.Uuid
  amount           Decimal             @db.Decimal(14, 2)
  method           payment_method_enum
  status           payment_status_enum @default(pending)
  provider         String?             @db.VarChar(50)
  transaction_id   String?             @unique @db.VarChar(255)
  gateway_response Json?
  processed_at     DateTime?           @db.Timestamptz(6)
  created_at       DateTime            @default(now()) @db.Timestamptz(6)
  updated_at       DateTime            @default(now()) @db.Timestamptz(6)
  orders           orders              @relation(fields: [order_id], references: [id])

  @@index([order_id], map: "idx_payments_order")
  @@index([status], map: "idx_payments_status")
  @@index([method], map: "idx_payments_method")
  @@index([transaction_id], map: "idx_payments_transaction")
}

/// Restaurant staff assignments
model restaurant_staffs {
  id            String                     @id @default(uuid()) @db.Uuid
  restaurant_id String                     @db.Uuid
  user_id       String                     @db.Uuid
  role          restaurant_staff_role_enum
  status        staff_status_enum          @default(active)
  joined_at     DateTime                   @default(now()) @db.Timestamptz(6)
  left_at       DateTime?                  @db.Timestamptz(6)
  hourly_rate   Decimal?                   @db.Decimal(10, 2)
  restaurants   restaurants                @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  users         users                      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([restaurant_id, user_id], map: "uq_restaurant_staff")
  @@index([user_id], map: "idx_restaurant_staff_user")
  @@index([role], map: "idx_restaurant_staff_role")
  @@index([status], map: "idx_restaurant_staff_status")
}

/// Staff work schedules
model staff_schedules {
  id            String                     @id @default(uuid()) @db.Uuid
  staff_id      String                     @db.Uuid
  restaurant_id String                     @db.Uuid
  shift_date    DateTime                   @db.Date
  shift_type    staff_shift_type_enum
  start_time    DateTime                   @db.Time(6)
  end_time      DateTime                   @db.Time(6)
  status        staff_schedule_status_enum @default(scheduled)
  notes         String?
  created_at    DateTime                   @default(now()) @db.Timestamptz(6)
  updated_at    DateTime                   @default(now()) @db.Timestamptz(6)
  attendance    staff_attendance[]
  restaurants   restaurants                @relation(fields: [restaurant_id], references: [id])
  staff         users                      @relation("staff_schedules_staff", fields: [staff_id], references: [id])

  @@unique([staff_id, shift_date, shift_type])
  @@index([restaurant_id], map: "idx_staff_schedules_restaurant")
  @@index([shift_date], map: "idx_staff_schedules_date")
  @@index([status], map: "idx_staff_schedules_status")
}

/// Staff attendance tracking
model staff_attendance {
  id             String           @id @default(uuid()) @db.Uuid
  staff_id       String           @db.Uuid
  restaurant_id  String           @db.Uuid
  schedule_id    String?          @db.Uuid
  work_date      DateTime         @db.Date
  check_in_time  DateTime?        @db.Timestamptz(6)
  check_out_time DateTime?        @db.Timestamptz(6)
  break_duration Int?
  overtime_hours Decimal?         @db.Decimal(4, 2)
  total_hours    Decimal?         @db.Decimal(4, 2)
  notes          String?
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  restaurants    restaurants      @relation(fields: [restaurant_id], references: [id])
  schedules      staff_schedules? @relation(fields: [schedule_id], references: [id])
  staff          users            @relation("staff_attendance_staff", fields: [staff_id], references: [id])

  @@unique([staff_id, work_date])
  @@index([restaurant_id], map: "idx_staff_attendance_restaurant")
  @@index([work_date], map: "idx_staff_attendance_date")
}

/// Inventory items
model inventory_items {
  id                 String                   @id @default(uuid()) @db.Uuid
  restaurant_id      String                   @db.Uuid
  name               String                   @db.VarChar(100)
  description        String?
  unit               inventory_unit_enum      @default(kg)
  quantity           Decimal                  @db.Decimal(12, 2)
  min_quantity       Decimal?                 @db.Decimal(12, 2)
  max_quantity       Decimal?                 @db.Decimal(12, 2)
  created_at         DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at         DateTime                 @default(now()) @db.Timestamptz(6)
  expiry_date        DateTime?                @db.Date
  supplier           String?                  @db.VarChar(100)
  unit_cost          Decimal?                 @db.Decimal(10, 2)
  restaurants        restaurants              @relation(fields: [restaurant_id], references: [id])
  transactions       inventory_transactions[]
  recipe_ingredients recipe_ingredients[]
  // New relations
  supplier_items     supplier_items[]
  purchase_order_items purchase_order_items[]
  warehouse_receipt_items warehouse_receipt_items[]
  warehouse_issue_items warehouse_issue_items[]
  inventory_balances inventory_balances[]

  @@index([restaurant_id], map: "idx_inventory_items_restaurant")
  @@index([quantity], map: "idx_inventory_items_quantity")
  @@index([expiry_date], map: "idx_inventory_items_expiry")
  @@index([unit], map: "idx_inventory_items_unit")
}

/// Inventory transactions (import/export)
model inventory_transactions {
  id                String                          @id @default(uuid()) @db.Uuid
  inventory_item_id String                          @db.Uuid
  type              inventory_transaction_type_enum
  quantity          Decimal                         @db.Decimal(12, 2)
  created_at        DateTime                        @default(now()) @db.Timestamptz(6)
  invoice_number    String?                         @db.VarChar(50)
  notes             String?
  supplier          String?                         @db.VarChar(100)
  total_cost        Decimal?                        @db.Decimal(12, 2)
  unit_cost         Decimal?                        @db.Decimal(10, 2)
  inventory_items   inventory_items                 @relation(fields: [inventory_item_id], references: [id])

  @@index([inventory_item_id], map: "idx_inventory_transactions_item")
  @@index([type], map: "idx_inventory_transactions_type")
  @@index([created_at], map: "idx_inventory_transactions_created")
}

/// Recipes for menu items
model recipes {
  id           String               @id @default(uuid()) @db.Uuid
  menu_item_id String               @db.Uuid
  name         String               @db.VarChar(100)
  description  String?
  created_at   DateTime             @default(now()) @db.Timestamptz(6)
  updated_at   DateTime             @default(now()) @db.Timestamptz(6)
  cook_time    Int?
  instructions String?
  prep_time    Int?
  serving_size Int?
  ingredients  recipe_ingredients[]
  menu_items   menu_items           @relation(fields: [menu_item_id], references: [id])

  @@index([menu_item_id], map: "idx_recipes_menu_item")
}

/// Recipe ingredients
model recipe_ingredients {
  id                String          @id @default(uuid()) @db.Uuid
  recipe_id         String          @db.Uuid
  inventory_item_id String          @db.Uuid
  quantity          Decimal         @db.Decimal(12, 2)
  unit              String          @db.VarChar(20)
  notes             String?
  inventory_items   inventory_items @relation(fields: [inventory_item_id], references: [id])
  recipes           recipes         @relation(fields: [recipe_id], references: [id])

  @@index([recipe_id], map: "idx_recipe_ingredients_recipe")
  @@index([inventory_item_id], map: "idx_recipe_ingredients_item")
}

/// Vouchers and discount codes
model vouchers {
  id              String                     @id @default(uuid()) @db.Uuid
  code            String                     @unique @db.VarChar(50)
  description     String?
  discount_type   voucher_discount_type_enum
  discount_value  Decimal                    @db.Decimal(12, 2)
  min_order_value Decimal?                   @db.Decimal(12, 2)
  max_discount    Decimal?                   @db.Decimal(12, 2)
  start_date      DateTime                   @db.Timestamptz(6)
  end_date        DateTime                   @db.Timestamptz(6)
  usage_limit     Int?
  used_count      Int                        @default(0)
  is_active       Boolean                    @default(true)
  restaurant_id   String?                    @db.Uuid
  created_at      DateTime                   @default(now()) @db.Timestamptz(6)
  name            String                     @db.VarChar(100)
  updated_at      DateTime                   @default(now()) @db.Timestamptz(6)
  usages          voucher_usages[]
  restaurants     restaurants?               @relation(fields: [restaurant_id], references: [id])

  @@index([restaurant_id], map: "idx_vouchers_restaurant")
  @@index([code], map: "idx_vouchers_code")
  @@index([is_active], map: "idx_vouchers_active")
  @@index([start_date, end_date], map: "idx_vouchers_dates")
}

/// Voucher usage history
model voucher_usages {
  id         String   @id @default(uuid()) @db.Uuid
  voucher_id String   @db.Uuid
  user_id    String   @db.Uuid
  order_id   String?  @db.Uuid
  used_at    DateTime @default(now()) @db.Timestamptz(6)
  orders     orders?  @relation(fields: [order_id], references: [id])
  users      users    @relation(fields: [user_id], references: [id])
  vouchers   vouchers @relation(fields: [voucher_id], references: [id])

  @@index([voucher_id], map: "idx_voucher_usages_voucher")
  @@index([user_id], map: "idx_voucher_usages_user")
  @@index([used_at], map: "idx_voucher_usages_used")
}

/// Restaurant promotions
model promotions {
  id                String              @id @default(uuid()) @db.Uuid
  restaurant_id     String              @db.Uuid
  name              String              @db.VarChar(100)
  description       String?
  type              promotion_type_enum
  discount_value    Decimal             @db.Decimal(12, 2)
  conditions        Json?
  applicable_items  String[]
  time_restrictions Json?
  start_date        DateTime            @db.Timestamptz(6)
  end_date          DateTime            @db.Timestamptz(6)
  is_active         Boolean             @default(true)
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  updated_at        DateTime            @default(now()) @db.Timestamptz(6)
  restaurants       restaurants         @relation(fields: [restaurant_id], references: [id])

  @@index([restaurant_id], map: "idx_promotions_restaurant")
  @@index([start_date, end_date], map: "idx_promotions_dates")
  @@index([is_active], map: "idx_promotions_active")
}

/// Customer reviews
model reviews {
  id            String             @id @default(uuid()) @db.Uuid
  customer_id   String             @db.Uuid
  restaurant_id String?            @db.Uuid
  order_id      String?            @db.Uuid
  menu_item_id  String?            @db.Uuid
  rating        Int
  title         String?            @db.VarChar(255)
  content       String?
  photos        String[]
  status        review_status_enum @default(active)
  response      String?
  responded_at  DateTime?          @db.Timestamptz(6)
  created_at    DateTime           @default(now()) @db.Timestamptz(6)
  updated_at    DateTime           @default(now()) @db.Timestamptz(6)
  customers     users              @relation("reviews_customer", fields: [customer_id], references: [id])
  menu_items    menu_items?        @relation(fields: [menu_item_id], references: [id])
  orders        orders?            @relation(fields: [order_id], references: [id])
  restaurants   restaurants?       @relation(fields: [restaurant_id], references: [id])

  @@index([customer_id], map: "idx_reviews_customer")
  @@index([restaurant_id], map: "idx_reviews_restaurant")
  @@index([rating], map: "idx_reviews_rating")
  @@index([status], map: "idx_reviews_status")
  @@index([created_at], map: "idx_reviews_created")
}

/// Revenue reports
model revenue_reports {
  id                        String                   @id @default(uuid()) @db.Uuid
  restaurant_id             String                   @db.Uuid
  report_date               DateTime                 @db.Date
  report_type               revenue_report_type_enum
  total_revenue             Decimal                  @db.Decimal(14, 2)
  total_orders              Int                      @default(0)
  total_customers           Int                      @default(0)
  avg_order_value           Decimal?                 @db.Decimal(12, 2)
  dine_in_revenue           Decimal?                 @db.Decimal(14, 2)
  takeaway_revenue          Decimal?                 @db.Decimal(14, 2)
  delivery_revenue          Decimal?                 @db.Decimal(14, 2)
  popular_items             Json?
  payment_methods_breakdown Json?
  hourly_breakdown          Json?
  created_at                DateTime                 @default(now()) @db.Timestamptz(6)
  restaurants               restaurants              @relation(fields: [restaurant_id], references: [id])

  @@unique([restaurant_id, report_date, report_type])
  @@index([restaurant_id], map: "idx_revenue_reports_restaurant")
  @@index([report_date], map: "idx_revenue_reports_date")
  @@index([report_type], map: "idx_revenue_reports_type")
}

/// Users (customers, staff, admins)
model users {
  id                        String                    @id @default(uuid()) @db.Uuid
  username                  String?                   @unique @db.VarChar(50)
  email                     String                    @unique @db.VarChar(255)
  first_name                String?                   @db.VarChar(100)
  last_name                 String?                   @db.VarChar(100)
  full_name                 String?                   @db.VarChar(200)
  phone_code                String?                   @db.VarChar(8)
  phone_number              String?                   @db.VarChar(20)
  avatar_url                String?                   @db.VarChar(255)
  email_verified_at         DateTime?                 @db.Timestamptz(6)
  phone_verified_at         DateTime?                 @db.Timestamptz(6)
  status                    user_status_enum          @default(active)
  role                      user_role_enum            @default(customer)
  created_at                DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at                DateTime                  @updatedAt @db.Timestamptz(6)
  clerk_id                  String?                   @unique @db.VarChar(255)
  date_of_birth             DateTime?                 @db.Date
  gender                    String?                   @db.VarChar(10)
  loyalty_points            Int                       @default(0)
  total_orders              Int                       @default(0)
  total_spent               Decimal                   @default(0) @db.Decimal(14, 2)
  password_hash             String?                   @db.VarChar(255)
  activity_status           user_activity_status_enum @default(available)
  is_online                 Boolean?                  @default(false)
  last_activity_at          DateTime?                 @db.Timestamptz(6)
  last_seen_at              DateTime?                 @db.Timestamptz(6)
  // Clerk integration fields
  has_image                 Boolean?                  @default(false)
  primary_email_address_id  String?                   @db.VarChar(255)
  password_enabled          Boolean?                  @default(false)
  two_factor_enabled        Boolean?                  @default(false)
  totp_enabled              Boolean?                  @default(false)
  backup_code_enabled       Boolean?                  @default(false)
  banned                    Boolean?                  @default(false)
  locked                    Boolean?                  @default(false)
  lockout_expires_in_seconds Int?
  delete_self_enabled       Boolean?                  @default(true)
  create_organization_enabled Boolean?                @default(false)
  create_organizations_limit Int?
  legal_accepted_at         DateTime?                 @db.Timestamptz(6)
  last_sign_in_at           DateTime?                 @db.Timestamptz(6)
  // JSON fields for Clerk metadata and settings
  public_metadata           Json?
  private_metadata          Json?
  unsafe_metadata           Json?
  // Arrays for Clerk related data
  email_addresses           Json?                     // Store email addresses array from Clerk
  phone_numbers             Json?                     // Store phone numbers array from Clerk
  web3_wallets              Json?                     // Store web3 wallets array from Clerk
  external_accounts         Json?                     // Store external accounts array from Clerk
  enterprise_accounts       Json?                     // Store enterprise accounts array from Clerk
  passkeys                  Json?                     // Store passkeys array from Clerk
  
  addresses                 addresses[]
  conversations_as_customer conversations[]           @relation("conversations_customer")
  conversations_as_staff    conversations[]           @relation("conversations_staff")
  messages_sent             messages[]
  order_status_history      order_status_history[]
  orders                    orders[]                     @relation("orders_customer")
  organizations_owned       organizations[]              @relation("organizations_owner")
  organization_memberships  organization_memberships[]
  reservations              reservations[]               @relation("reservations_customer")
  restaurant_staffs         restaurant_staffs[]
  restaurants_managed       restaurants[]             @relation("restaurants_manager")
  reviews_written           reviews[]                 @relation("reviews_customer")
  staff_attendance          staff_attendance[]        @relation("staff_attendance_staff")
  staff_schedules           staff_schedules[]         @relation("staff_schedules_staff")
  table_orders_staffed      table_orders[]            @relation("table_orders_staff")
  user_statistics           user_statistics?
  voucher_usages            voucher_usages[]
  notifications             notifications[]
  // New relations
  delivery_staffs           delivery_staffs[]
  purchase_orders           purchase_orders[]
  warehouse_receipts_created warehouse_receipts[]      @relation("warehouse_receipts_created_by")
  warehouse_receipts_approved warehouse_receipts[]     @relation("warehouse_receipts_approved_by")
  warehouse_issues_created  warehouse_issues[]         @relation("warehouse_issues_created_by")
  warehouse_issues_approved warehouse_issues[]         @relation("warehouse_issues_approved_by")

  @@index([clerk_id], map: "idx_users_clerk")
  @@index([email], map: "idx_users_email")
  @@index([phone_number], map: "idx_users_phone")
  @@index([role], map: "idx_users_role")
  @@index([status], map: "idx_users_status")
  @@index([total_orders], map: "idx_users_total_orders")
  @@index([is_online], map: "idx_users_online")
  @@index([activity_status], map: "idx_users_activity_status")
  @@index([last_seen_at], map: "idx_users_last_seen")
  @@index([last_activity_at], map: "idx_users_last_activity")
  @@index([username], map: "idx_users_username")
  @@index([banned], map: "idx_users_banned")
  @@index([locked], map: "idx_users_locked")
  @@index([last_sign_in_at], map: "idx_users_last_sign_in")
}

/// User activity statistics
model user_statistics {
  id                      String    @id @default(uuid()) @db.Uuid
  user_id                 String    @unique @db.Uuid
  total_reservations      Int       @default(0)
  successful_reservations Int       @default(0)
  cancelled_reservations  Int       @default(0)
  no_show_reservations    Int       @default(0)
  total_orders            Int       @default(0)
  completed_orders        Int       @default(0)
  cancelled_orders        Int       @default(0)
  total_spent             Decimal   @default(0) @db.Decimal(14, 2)
  loyalty_points          Int       @default(0)
  favorite_restaurant_id  String?   @db.Uuid
  last_order_date         DateTime? @db.Timestamptz(6)
  last_reservation_date   DateTime? @db.Timestamptz(6)
  created_at              DateTime  @default(now()) @db.Timestamptz(6)
  updated_at              DateTime  @default(now()) @db.Timestamptz(6)
  users                   users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "idx_user_statistics_user")
  @@index([total_orders], map: "idx_user_statistics_orders")
  @@index([total_spent], map: "idx_user_statistics_spent")
}

/// User notifications system
model notifications {
  id           String                      @id @default(uuid()) @db.Uuid
  title        String                      @db.VarChar(255)
  message      String                      @db.Text
  type         notification_type_enum
  priority     notification_priority_enum  @default(medium)
  status       notification_status_enum    @default(unread)
  user_id      String                      @db.Uuid
  related_id   String?                     @db.Uuid
  related_type String?                     @db.VarChar(50)
  action_url   String?                     @db.VarChar(500)
  metadata     Json?
  read_at      DateTime?                   @db.Timestamptz(6)
  scheduled_at DateTime?                   @db.Timestamptz(6)
  expires_at   DateTime?                   @db.Timestamptz(6)
  created_at   DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at   DateTime                    @updatedAt @db.Timestamptz(6)
  
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "idx_notifications_user")
  @@index([status], map: "idx_notifications_status")
  @@index([type], map: "idx_notifications_type")
  @@index([priority], map: "idx_notifications_priority")
  @@index([created_at], map: "idx_notifications_created")
  @@index([expires_at], map: "idx_notifications_expires")
}

// ========================================
// DELIVERY SYSTEM MODELS
// ========================================

/// Delivery staff management
model delivery_staffs {
  id            String                    @id @default(uuid()) @db.Uuid
  user_id       String                    @db.Uuid
  vehicle_type  delivery_vehicle_enum
  license_plate String?                   @db.VarChar(20)
  status        delivery_staff_status_enum @default(available)
  current_zone  String?                   @db.VarChar(100)
  max_capacity  Int                       @default(5)
  rating        Decimal?                  @db.Decimal(3, 2)
  total_deliveries Int                    @default(0)
  total_distance   Decimal                @default(0) @db.Decimal(10, 2) // km
  total_earnings   Decimal                @default(0) @db.Decimal(14, 2)
  created_at    DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime                  @updatedAt @db.Timestamptz(6)
  
  users         users                     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  deliveries    deliveries[]
  
  @@unique([user_id], map: "uq_delivery_staff_user")
  @@index([user_id], map: "idx_delivery_staff_user")
  @@index([status], map: "idx_delivery_staff_status")
  @@index([vehicle_type], map: "idx_delivery_staff_vehicle")
}

/// Delivery tracking and management
model deliveries {
  id                String              @id @default(uuid()) @db.Uuid
  order_id          String              @db.Uuid
  delivery_staff_id String?             @db.Uuid
  status            delivery_status_enum @default(assigned)
  assigned_at       DateTime?           @db.Timestamptz(6)
  picked_up_at      DateTime?           @db.Timestamptz(6)
  delivered_at      DateTime?           @db.Timestamptz(6)
  estimated_time    Int?                // minutes
  actual_time       Int?                // minutes
  delivery_fee      Decimal             @db.Decimal(10, 2)
  distance_km       Decimal?            @db.Decimal(8, 2)
  notes             String?
  customer_rating   Int?                // 1-5
  customer_feedback String?
  delivery_photo    String?             @db.VarChar(255)
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  updated_at        DateTime            @updatedAt @db.Timestamptz(6)
  
  orders            orders              @relation(fields: [order_id], references: [id], onDelete: Cascade)
  delivery_staff    delivery_staffs?    @relation(fields: [delivery_staff_id], references: [id])
  
  @@index([order_id], map: "idx_deliveries_order")
  @@index([delivery_staff_id], map: "idx_deliveries_staff")
  @@index([status], map: "idx_deliveries_status")
  @@index([assigned_at], map: "idx_deliveries_assigned")
}

/// Delivery zones management
model delivery_zones {
  id           String    @id @default(uuid()) @db.Uuid
  name         String    @db.VarChar(100)
  polygon_data Json      // GeoJSON polygon
  delivery_fee Decimal   @db.Decimal(10, 2)
  min_order    Decimal?  @db.Decimal(10, 2)
  max_distance Decimal?  @db.Decimal(8, 2) // km
  is_active    Boolean   @default(true)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @updatedAt @db.Timestamptz(6)
  
  @@index([is_active], map: "idx_delivery_zones_active")
  @@index([name], map: "idx_delivery_zones_name")
}

// ========================================
// SUPPLY CHAIN MODELS
// ========================================

/// Suppliers management
model suppliers {
  id              String            @id @default(uuid()) @db.Uuid
  name            String            @db.VarChar(100)
  contact_person  String?           @db.VarChar(100)
  email           String?           @db.VarChar(255)
  phone           String?           @db.VarChar(20)
  address         String?           @db.VarChar(255)
  tax_code        String?           @db.VarChar(50)
  payment_terms   String?           @db.VarChar(100)
  rating          Decimal?          @db.Decimal(3, 2)
  status          supplier_status_enum @default(active)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @updatedAt @db.Timestamptz(6)
  
  purchase_orders purchase_orders[]
  supplier_items  supplier_items[]
  
  @@index([status], map: "idx_suppliers_status")
  @@index([name], map: "idx_suppliers_name")
  @@index([rating], map: "idx_suppliers_rating")
}

/// Supplier items catalog
model supplier_items {
  id                String    @id @default(uuid()) @db.Uuid
  supplier_id       String    @db.Uuid
  inventory_item_id String    @db.Uuid
  supplier_sku      String?   @db.VarChar(100)
  unit_price        Decimal   @db.Decimal(10, 2)
  min_order_qty     Decimal?  @db.Decimal(12, 2)
  lead_time_days    Int?      // days
  is_preferred      Boolean   @default(false)
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime  @updatedAt @db.Timestamptz(6)
  
  suppliers         suppliers       @relation(fields: [supplier_id], references: [id], onDelete: Cascade)
  inventory_items   inventory_items @relation(fields: [inventory_item_id], references: [id], onDelete: Cascade)
  
  @@unique([supplier_id, inventory_item_id], map: "uq_supplier_items_supplier_inventory")
  @@index([supplier_id], map: "idx_supplier_items_supplier")
  @@index([inventory_item_id], map: "idx_supplier_items_inventory")
  @@index([is_preferred], map: "idx_supplier_items_preferred")
}

/// Purchase orders management
model purchase_orders {
  id              String                @id @default(uuid()) @db.Uuid
  supplier_id     String                @db.Uuid
  restaurant_id   String                @db.Uuid
  order_number    String                @unique @db.VarChar(50)
  status          purchase_order_status_enum @default(draft)
  order_date      DateTime              @db.Timestamptz(6)
  expected_date   DateTime?             @db.Timestamptz(6)
  received_date   DateTime?             @db.Timestamptz(6)
  total_amount    Decimal               @db.Decimal(14, 2)
  notes           String?
  created_by      String                @db.Uuid
  created_at      DateTime              @default(now()) @db.Timestamptz(6)
  updated_at      DateTime              @updatedAt @db.Timestamptz(6)
  
  suppliers       suppliers             @relation(fields: [supplier_id], references: [id])
  restaurants     restaurants           @relation(fields: [restaurant_id], references: [id])
  created_by_user users                 @relation(fields: [created_by], references: [id])
  order_items     purchase_order_items[]
  
  @@index([supplier_id], map: "idx_purchase_orders_supplier")
  @@index([restaurant_id], map: "idx_purchase_orders_restaurant")
  @@index([status], map: "idx_purchase_orders_status")
  @@index([order_date], map: "idx_purchase_orders_date")
  @@index([order_number], map: "idx_purchase_orders_number")
}

/// Purchase order items details
model purchase_order_items {
  id                String          @id @default(uuid()) @db.Uuid
  purchase_order_id String          @db.Uuid
  inventory_item_id String          @db.Uuid
  quantity          Decimal         @db.Decimal(12, 2)
  unit_price        Decimal         @db.Decimal(10, 2)
  total_price       Decimal         @db.Decimal(12, 2)
  received_qty      Decimal         @default(0) @db.Decimal(12, 2)
  notes             String?
  
  purchase_orders   purchase_orders @relation(fields: [purchase_order_id], references: [id], onDelete: Cascade)
  inventory_items   inventory_items @relation(fields: [inventory_item_id], references: [id])
  
  @@index([purchase_order_id], map: "idx_purchase_order_items_order")
  @@index([inventory_item_id], map: "idx_purchase_order_items_inventory")
}

// ========================================
// WAREHOUSE MANAGEMENT MODELS
// ========================================

/// Warehouse receipts (Phiếu nhập kho)
model warehouse_receipts {
  id              String                    @id @default(uuid()) @db.Uuid
  restaurant_id   String                    @db.Uuid
  receipt_number  String                    @unique @db.VarChar(50)
  supplier_id     String?                   @db.Uuid
  receipt_date    DateTime                  @db.Timestamptz(6)
  status          warehouse_receipt_status_enum @default(draft)
  total_amount    Decimal                   @db.Decimal(14, 2)
  notes           String?
  created_by      String                    @db.Uuid
  approved_by     String?                   @db.Uuid
  approved_at     DateTime?                 @db.Timestamptz(6)
  created_at      DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime                  @updatedAt @db.Timestamptz(6)
  
  restaurants     restaurants               @relation(fields: [restaurant_id], references: [id])
  suppliers       suppliers?                @relation(fields: [supplier_id], references: [id])
  created_by_user users                     @relation("warehouse_receipts_created_by", fields: [created_by], references: [id])
  approved_by_user users?                   @relation("warehouse_receipts_approved_by", fields: [approved_by], references: [id])
  receipt_items   warehouse_receipt_items[]
  
  @@index([restaurant_id], map: "idx_warehouse_receipts_restaurant")
  @@index([supplier_id], map: "idx_warehouse_receipts_supplier")
  @@index([status], map: "idx_warehouse_receipts_status")
  @@index([receipt_date], map: "idx_warehouse_receipts_date")
  @@index([receipt_number], map: "idx_warehouse_receipts_number")
}

/// Warehouse receipt items
model warehouse_receipt_items {
  id                String            @id @default(uuid()) @db.Uuid
  receipt_id        String            @db.Uuid
  inventory_item_id String            @db.Uuid
  quantity          Decimal           @db.Decimal(12, 2)
  unit_price        Decimal           @db.Decimal(10, 2)
  total_price       Decimal           @db.Decimal(12, 2)
  expiry_date       DateTime?         @db.Date
  batch_number      String?           @db.VarChar(50)
  notes             String?
  
  warehouse_receipts warehouse_receipts @relation(fields: [receipt_id], references: [id], onDelete: Cascade)
  inventory_items    inventory_items   @relation(fields: [inventory_item_id], references: [id])
  
  @@index([receipt_id], map: "idx_warehouse_receipt_items_receipt")
  @@index([inventory_item_id], map: "idx_warehouse_receipt_items_inventory")
}

/// Warehouse issues (Phiếu xuất kho)
model warehouse_issues {
  id              String                  @id @default(uuid()) @db.Uuid
  restaurant_id   String                  @db.Uuid
  issue_number    String                  @unique @db.VarChar(50)
  issue_date      DateTime                @db.Timestamptz(6)
  status          warehouse_issue_status_enum @default(draft)
  purpose         warehouse_issue_purpose_enum
  total_amount    Decimal                 @db.Decimal(14, 2)
  notes           String?
  created_by      String                  @db.Uuid
  approved_by     String?                 @db.Uuid
  approved_at     DateTime?               @db.Timestamptz(6)
  created_at      DateTime                @default(now()) @db.Timestamptz(6)
  updated_at      DateTime                @updatedAt @db.Timestamptz(6)
  
  restaurants     restaurants             @relation(fields: [restaurant_id], references: [id])
  created_by_user users                   @relation("warehouse_issues_created_by", fields: [created_by], references: [id])
  approved_by_user users?                 @relation("warehouse_issues_approved_by", fields: [approved_by], references: [id])
  issue_items     warehouse_issue_items[]
  
  @@index([restaurant_id], map: "idx_warehouse_issues_restaurant")
  @@index([status], map: "idx_warehouse_issues_status")
  @@index([issue_date], map: "idx_warehouse_issues_date")
  @@index([issue_number], map: "idx_warehouse_issues_number")
  @@index([purpose], map: "idx_warehouse_issues_purpose")
}

/// Warehouse issue items
model warehouse_issue_items {
  id                String          @id @default(uuid()) @db.Uuid
  issue_id          String          @db.Uuid
  inventory_item_id String          @db.Uuid
  quantity          Decimal         @db.Decimal(12, 2)
  unit_price        Decimal         @db.Decimal(10, 2)
  total_price       Decimal         @db.Decimal(12, 2)
  batch_number      String?         @db.VarChar(50)
  notes             String?
  
  warehouse_issues  warehouse_issues @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  inventory_items   inventory_items  @relation(fields: [inventory_item_id], references: [id])
  
  @@index([issue_id], map: "idx_warehouse_issue_items_issue")
  @@index([inventory_item_id], map: "idx_warehouse_issue_items_inventory")
}

/// Inventory balance tracking (Cân bằng kho)
model inventory_balances {
  id                String    @id @default(uuid()) @db.Uuid
  restaurant_id     String    @db.Uuid
  inventory_item_id String    @db.Uuid
  balance_date      DateTime  @db.Date
  opening_balance   Decimal   @db.Decimal(12, 2)
  received_quantity Decimal   @default(0) @db.Decimal(12, 2)
  issued_quantity   Decimal   @default(0) @db.Decimal(12, 2)
  adjusted_quantity Decimal   @default(0) @db.Decimal(12, 2)
  closing_balance   Decimal   @db.Decimal(12, 2)
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime  @updatedAt @db.Timestamptz(6)
  
  restaurants       restaurants @relation(fields: [restaurant_id], references: [id])
  inventory_items   inventory_items @relation(fields: [inventory_item_id], references: [id])
  
  @@unique([restaurant_id, inventory_item_id, balance_date], map: "uq_inventory_balances_restaurant_item_date")
  @@index([restaurant_id], map: "idx_inventory_balances_restaurant")
  @@index([inventory_item_id], map: "idx_inventory_balances_inventory")
  @@index([balance_date], map: "idx_inventory_balances_date")
}

// ========================================
// ANALYTICS & REPORTING MODELS
// ========================================

/// Analytics events tracking
model analytics_events {
  id            String              @id @default(uuid()) @db.Uuid
  event_type    analytics_event_enum
  entity_type   String              @db.VarChar(50) // 'order', 'user', 'menu_item', etc.
  entity_id     String              @db.Uuid
  restaurant_id String?             @db.Uuid
  user_id       String?             @db.Uuid
  metadata      Json?
  created_at    DateTime            @default(now()) @db.Timestamptz(6)
  
  @@index([event_type], map: "idx_analytics_events_type")
  @@index([entity_type], map: "idx_analytics_events_entity_type")
  @@index([restaurant_id], map: "idx_analytics_events_restaurant")
  @@index([user_id], map: "idx_analytics_events_user")
  @@index([created_at], map: "idx_analytics_events_created")
}

/// KPI metrics tracking
model kpi_metrics {
  id            String          @id @default(uuid()) @db.Uuid
  restaurant_id String          @db.Uuid
  metric_name   String          @db.VarChar(100)
  metric_value  Decimal         @db.Decimal(15, 4)
  metric_date   DateTime        @db.Date
  period_type   kpi_period_enum // daily, weekly, monthly
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  
  @@unique([restaurant_id, metric_name, metric_date, period_type], map: "uq_kpi_metrics_restaurant_name_date_period")
  @@index([restaurant_id], map: "idx_kpi_metrics_restaurant")
  @@index([metric_date], map: "idx_kpi_metrics_date")
  @@index([metric_name], map: "idx_kpi_metrics_name")
  @@index([period_type], map: "idx_kpi_metrics_period")
}

// ========================================
// SYSTEM MANAGEMENT MODELS
// ========================================

/// System configuration
model system_configs {
  id          String   @id @default(uuid()) @db.Uuid
  config_key  String   @unique @db.VarChar(100)
  config_value Json
  description String?  @db.VarChar(255)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt @db.Timestamptz(6)
  
  @@index([config_key], map: "idx_system_configs_key")
  @@index([is_active], map: "idx_system_configs_active")
}

/// Audit logs for system tracking
model audit_logs {
  id            String      @id @default(uuid()) @db.Uuid
  table_name    String      @db.VarChar(100)
  record_id     String      @db.Uuid
  action        audit_action_enum
  old_values    Json?
  new_values    Json?
  user_id       String?     @db.Uuid
  ip_address    String?     @db.VarChar(45)
  user_agent    String?     @db.VarChar(500)
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  
  @@index([table_name], map: "idx_audit_logs_table")
  @@index([record_id], map: "idx_audit_logs_record")
  @@index([user_id], map: "idx_audit_logs_user")
  @@index([created_at], map: "idx_audit_logs_created")
  @@index([action], map: "idx_audit_logs_action")
}

enum user_status_enum {
  active
  inactive
  banned
  suspended
  pending_verification
  locked
  on_leave
}

enum user_activity_status_enum {
  available
  busy
  do_not_disturb
  away
  offline
  invisible
}

enum user_role_enum {
  customer
  staff
  manager
  admin
  super_admin
  deliver
}

enum organization_role_enum {
  admin
  member
  guest
}

enum restaurant_status_enum {
  active
  inactive
  maintenance
  closed
}

enum table_status_enum {
  available
  occupied
  reserved
  maintenance
  out_of_order
}

enum reservation_status_enum {
  pending
  confirmed
  seated
  completed
  cancelled
  no_show
}

enum table_order_status_enum {
  active
  completed
  cancelled
}

enum order_type_enum {
  dine_in
  takeaway
  delivery
}

enum order_status_enum {
  pending
  confirmed
  preparing
  ready
  served
  completed
  cancelled
}

enum cooking_status_enum {
  pending
  preparing
  cooking
  ready
  served
  cancelled
}

enum payment_method_enum {
  cash
  card
  bank_transfer
  momo
  zalopay
  viettelpay
  vnpay
  shopeepay
  paypal
}

enum payment_status_enum {
  pending
  completed
  failed
  processing
  cancelled
  refunded
}

enum restaurant_staff_role_enum {
  staff
  manager
  chef
  cashier
  security
  cleaner
  supervisor
  sous_chef
  waiter
  host
}

enum staff_status_enum {
  active
  inactive
  on_leave
  suspended
  terminated
}

enum staff_shift_type_enum {
  morning
  afternoon
  evening
  night
  full_day
  split_shift
}

enum staff_schedule_status_enum {
  scheduled
  confirmed
  in_progress
  completed
  absent
  late
  cancelled
}

enum inventory_transaction_type_enum {
  purchase
  usage
  adjustment
  waste
  return
  transfer
}

enum voucher_discount_type_enum {
  percentage
  fixed_amount
}

enum promotion_type_enum {
  percentage
  fixed_amount
  buy_one_get_one
  combo_deal
  happy_hour
  seasonal
}

enum review_status_enum {
  active
  hidden
  flagged
  deleted
}

enum revenue_report_type_enum {
  daily
  weekly
  monthly
  yearly
}

enum conversation_type_enum {
  support
  feedback
  complaint
  inquiry
}

enum conversation_status_enum {
  active
  resolved
  closed
}

enum message_type_enum {
  text
  image
  file
  system
}

enum notification_type_enum {
  order_created
  order_confirmed
  order_preparing
  order_ready
  order_delivered
  order_cancelled
  order_payment_success
  order_payment_failed
  reservation_created
  reservation_confirmed
  reservation_cancelled
  reservation_reminder
  shift_assigned
  shift_reminder
  schedule_updated
  attendance_reminder
  new_review
  low_inventory
  menu_updated
  promotion_created
  voucher_expires_soon
  member_joined
  member_left
  role_changed
  organization_updated
  system_maintenance
  feature_announcement
  security_alert
  new_message
  conversation_started
}

enum notification_priority_enum {
  low
  medium
  high
  urgent
}

enum notification_status_enum {
  unread
  read
  archived
}

// ========================================
// NEW ENUMS FOR ENHANCED SYSTEM
// ========================================

enum delivery_vehicle_enum {
  motorcycle
  bicycle
  car
  scooter
  walking
}

enum delivery_staff_status_enum {
  available
  busy
  offline
  on_break
  maintenance
}

enum delivery_status_enum {
  assigned
  accepted
  picked_up
  in_transit
  delivered
  failed
  cancelled
}

enum supplier_status_enum {
  active
  inactive
  suspended
  blacklisted
}

enum purchase_order_status_enum {
  draft
  sent
  confirmed
  partially_received
  received
  cancelled
}

enum warehouse_receipt_status_enum {
  draft
  pending
  approved
  received
  cancelled
}

enum warehouse_issue_status_enum {
  draft
  pending
  approved
  issued
  cancelled
}

enum warehouse_issue_purpose_enum {
  cooking
  waste
  transfer
  adjustment
  sample
  maintenance
  other
}

enum inventory_unit_enum {
  kg
  gram
  liter
  ml
  piece
  box
  bag
  bottle
  can
  pack
  dozen
  case
  carton
  pallet
  meter
  cm
  inch
  foot
  yard
  gallon
  quart
  pint
  cup
  tablespoon
  teaspoon
  ounce
  pound
  ton
  other
}

enum analytics_event_enum {
  page_view
  menu_item_view
  order_created
  order_completed
  user_registration
  reservation_created
  review_submitted
  search_performed
  delivery_assigned
  delivery_completed
  inventory_low
  supplier_order_created
  warehouse_receipt_created
  warehouse_issue_created
  staff_check_in
  staff_check_out
  payment_processed
  voucher_used
  promotion_applied
}

enum kpi_period_enum {
  daily
  weekly
  monthly
  quarterly
  yearly
}

enum audit_action_enum {
  create
  update
  delete
  login
  logout
  export
  import
  approve
  reject
  cancel
  check_in
  check_out
  assign
  unassign
  activate
  deactivate
}
