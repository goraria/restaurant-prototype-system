// import { PrismaClient } from '@prisma/client'
// import { hash } from 'bcryptjs'

// const prisma = new PrismaClient()

// async function main() {
//   console.log('üå± Starting database seeding...')

//   // 1. üë§ Create demo users
//   const hashedPassword = await hash('demo123456', 12)
  
//   const adminUser = await prisma.users.upsert({
//     where: { email: 'admin@restaurant.demo' },
//     update: {},
//     create: {
//       id: '550e8400-e29b-41d4-a716-446655440001',
//       username: 'admin_demo',
//       email: 'admin@restaurant.demo',
//       password_hash: hashedPassword,
//       first_name: 'Admin',
//       last_name: 'Demo',
//       full_name: 'Admin Demo',
//       phone_code: '+84',
//       phone_number: '0123456789',
//       role: 'admin',
//       status: 'active',
//       email_verified_at: new Date(),
//     },
//   })

//   const managerUser = await prisma.users.upsert({
//     where: { email: 'manager@restaurant.demo' },
//     update: {},
//     create: {
//       id: '550e8400-e29b-41d4-a716-446655440002',
//       username: 'manager_demo',
//       email: 'manager@restaurant.demo',
//       password_hash: hashedPassword,
//       first_name: 'Manager',
//       last_name: 'Demo',
//       full_name: 'Manager Demo',
//       phone_code: '+84',
//       phone_number: '0123456790',
//       role: 'user',
//       status: 'active',
//       email_verified_at: new Date(),
//     },
//   })

//   const customerUser = await prisma.users.upsert({
//     where: { email: 'customer@restaurant.demo' },
//     update: {},
//     create: {
//       id: '550e8400-e29b-41d4-a716-446655440003',
//       username: 'customer_demo',
//       email: 'customer@restaurant.demo',
//       password_hash: hashedPassword,
//       first_name: 'Kh√°ch H√†ng',
//       last_name: 'Demo',
//       full_name: 'Kh√°ch H√†ng Demo',
//       phone_code: '+84',
//       phone_number: '0123456791',
//       role: 'user',
//       status: 'active',
//       email_verified_at: new Date(),
//     },
//   })

//   console.log('‚úÖ Users created')

//   // 2. üè¢ Create organization
//   const organization = await prisma.organizations.upsert({
//     where: { code: 'DEMO_ORG' },
//     update: {},
//     create: {
//       id: '550e8400-e29b-41d4-a716-446655440010',
//       name: 'Nh√† H√†ng Demo Corporation',
//       code: 'DEMO_ORG',
//       description: 'T·ªï ch·ª©c demo cho h·ªá th·ªëng qu·∫£n l√Ω nh√† h√†ng',
//       owner_id: adminUser.id,
//     },
//   })

//   console.log('‚úÖ Organization created')

//   // 3. üçΩÔ∏è Create restaurant chain
//   const restaurantChain = await prisma.restaurant_chains.upsert({
//     where: { id: '550e8400-e29b-41d4-a716-446655440011' },
//     update: {},
//     create: {
//       id: '550e8400-e29b-41d4-a716-446655440011',
//       name: 'Chu·ªói Nh√† H√†ng Vi·ªát',
//       description: 'Chu·ªói nh√† h√†ng ph·ª•c v·ª• m√≥n ƒÉn Vi·ªát Nam',
//       owner_id: adminUser.id,
//     },
//   })

//   console.log('‚úÖ Restaurant chain created')

//   // 4. üè™ Create restaurants
//   const restaurant1 = await prisma.restaurants.upsert({
//     where: { id: '550e8400-e29b-41d4-a716-446655440020' },
//     update: {},
//     create: {
//       id: '550e8400-e29b-41d4-a716-446655440020',
//       organization_id: organization.id,
//       chain_id: restaurantChain.id,
//       code: 'HCM_001',
//       name: 'Nh√† H√†ng S√†i G√≤n',
//       address: '123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM',
//       phone_number: '028-1234-5678',
//       description: 'Nh√† h√†ng ph·ª•c v·ª• m√≥n ƒÉn truy·ªÅn th·ªëng Vi·ªát Nam',
//       manager_id: managerUser.id,
//     },
//   })

//   const restaurant2 = await prisma.restaurants.upsert({
//     where: { id: '550e8400-e29b-41d4-a716-446655440021' },
//     update: {},
//     create: {
//       id: '550e8400-e29b-41d4-a716-446655440021',
//       organization_id: organization.id,
//       chain_id: restaurantChain.id,
//       code: 'HN_001',
//       name: 'Nh√† H√†ng H√† N·ªôi',
//       address: '456 Ho√†n Ki·∫øm, Qu·∫≠n Ho√†n Ki·∫øm, H√† N·ªôi',
//       phone_number: '024-1234-5678',
//       description: 'Nh√† h√†ng phong c√°ch B·∫Øc B·ªô',
//       manager_id: managerUser.id,
//     },
//   })

//   console.log('‚úÖ Restaurants created')

//   // 5. ü™ë Create tables
//   const tables = []
//   for (let i = 1; i <= 10; i++) {
//     const table = await prisma.tables.create({
//       data: {
//         restaurant_id: restaurant1.id,
//         table_number: `T${i.toString().padStart(2, '0')}`,
//         capacity: i <= 4 ? 2 : i <= 8 ? 4 : 6,
//         location: i <= 5 ? 'T·∫ßng 1' : 'T·∫ßng 2',
//         status: 'available',
//         qr_code: `QR_${restaurant1.code}_T${i.toString().padStart(2, '0')}`,
//       },
//     })
//     tables.push(table)
//   }

//   console.log('‚úÖ Tables created')

//   // 6. üìö Create categories
//   const categories = await Promise.all([
//     prisma.categories.upsert({
//       where: { slug: 'mon-chinh' },
//       update: {},
//       create: {
//         name: 'M√≥n Ch√≠nh',
//         slug: 'mon-chinh',
//         description: 'C√°c m√≥n ƒÉn ch√≠nh',
//       },
//     }),
//     prisma.categories.upsert({
//       where: { slug: 'do-uong' },
//       update: {},
//       create: {
//         name: 'ƒê·ªì U·ªëng',
//         slug: 'do-uong',
//         description: 'C√°c lo·∫°i n∆∞·ªõc u·ªëng',
//       },
//     }),
//     prisma.categories.upsert({
//       where: { slug: 'trang-mieng' },
//       update: {},
//       create: {
//         name: 'Tr√°ng Mi·ªáng',
//         slug: 'trang-mieng',
//         description: 'C√°c m√≥n tr√°ng mi·ªáng',
//       },
//     }),
//   ])

//   console.log('‚úÖ Categories created')

//   // 7. üçΩÔ∏è Create menu
//   const menu = await prisma.menus.upsert({
//     where: { id: '550e8400-e29b-41d4-a716-446655440030' },
//     update: {},
//     create: {
//       id: '550e8400-e29b-41d4-a716-446655440030',
//       restaurant_id: restaurant1.id,
//       name: 'Th·ª±c ƒê∆°n Ch√≠nh',
//       description: 'Th·ª±c ƒë∆°n c√°c m√≥n ƒÉn truy·ªÅn th·ªëng Vi·ªát Nam',
//       is_active: true,
//     },
//   })

//   // 8. üçú Create menu items
//   const menuItems = await Promise.all([
//     prisma.menu_items.create({
//       data: {
//         menu_id: menu.id,
//         name: 'Ph·ªü B√≤ T√°i',
//         description: 'Ph·ªü b√≤ t√°i th∆°m ngon v·ªõi n∆∞·ªõc d√πng ƒë·∫≠m ƒë√†',
//         price: 85000,
//         image_url: '/images/pho-bo-tai.jpg',
//         is_available: true,
//         category_id: categories[0].id,
//       },
//     }),
//     prisma.menu_items.create({
//       data: {
//         menu_id: menu.id,
//         name: 'B√∫n B√≤ Hu·∫ø',
//         description: 'B√∫n b√≤ Hu·∫ø cay n·ªìng ƒë·∫∑c tr∆∞ng mi·ªÅn Trung',
//         price: 75000,
//         image_url: '/images/bun-bo-hue.jpg',
//         is_available: true,
//         category_id: categories[0].id,
//       },
//     }),
//     prisma.menu_items.create({
//       data: {
//         menu_id: menu.id,
//         name: 'C∆°m T·∫•m S∆∞·ªùn N∆∞·ªõng',
//         description: 'C∆°m t·∫•m s∆∞·ªùn n∆∞·ªõng v·ªõi ch·∫£ tr·ª©ng v√† b√¨',
//         price: 65000,
//         image_url: '/images/com-tam-suon-nuong.jpg',
//         is_available: true,
//         category_id: categories[0].id,
//       },
//     }),
//     prisma.menu_items.create({
//       data: {
//         menu_id: menu.id,
//         name: 'C√† Ph√™ S·ªØa ƒê√°',
//         description: 'C√† ph√™ s·ªØa ƒë√° truy·ªÅn th·ªëng Vi·ªát Nam',
//         price: 25000,
//         image_url: '/images/ca-phe-sua-da.jpg',
//         is_available: true,
//         category_id: categories[1].id,
//       },
//     }),
//     prisma.menu_items.create({
//       data: {
//         menu_id: menu.id,
//         name: 'Ch√® Ba M√†u',
//         description: 'Ch√® ba m√†u m√°t l·∫°nh',
//         price: 30000,
//         image_url: '/images/che-ba-mau.jpg',
//         is_available: true,
//         category_id: categories[2].id,
//       },
//     }),
//   ])

//   console.log('‚úÖ Menu items created')

//   // 9. üè™ Create inventory items
//   const inventoryItems = await Promise.all([
//     prisma.inventory_items.create({
//       data: {
//         restaurant_id: restaurant1.id,
//         name: 'Th·ªãt B√≤',
//         description: 'Th·ªãt b√≤ t∆∞∆°i cho ph·ªü',
//         unit: 'kg',
//         quantity: 50,
//         min_quantity: 10,
//         max_quantity: 100,
//       },
//     }),
//     prisma.inventory_items.create({
//       data: {
//         restaurant_id: restaurant1.id,
//         name: 'B√°nh Ph·ªü',
//         description: 'B√°nh ph·ªü t∆∞∆°i',
//         unit: 'kg',
//         quantity: 30,
//         min_quantity: 5,
//         max_quantity: 50,
//       },
//     }),
//     prisma.inventory_items.create({
//       data: {
//         restaurant_id: restaurant1.id,
//         name: 'C√† Ph√™ Rang Xay',
//         description: 'C√† ph√™ rang xay nguy√™n ch·∫•t',
//         unit: 'kg',
//         quantity: 20,
//         min_quantity: 3,
//         max_quantity: 30,
//       },
//     }),
//   ])

//   console.log('‚úÖ Inventory items created')

//   // 10. üìù Create recipes
//   const recipe1 = await prisma.recipes.create({
//     data: {
//       menu_item_id: menuItems[0].id, // Ph·ªü B√≤ T√°i
//       name: 'C√¥ng Th·ª©c Ph·ªü B√≤ T√°i',
//       description: 'C√¥ng th·ª©c n·∫•u ph·ªü b√≤ t√°i chu·∫©n v·ªã',
//     },
//   })

//   await prisma.recipe_ingredients.createMany({
//     data: [
//       {
//         recipe_id: recipe1.id,
//         inventory_item_id: inventoryItems[0].id, // Th·ªãt b√≤
//         quantity: 0.2,
//         unit: 'kg',
//       },
//       {
//         recipe_id: recipe1.id,
//         inventory_item_id: inventoryItems[1].id, // B√°nh ph·ªü
//         quantity: 0.15,
//         unit: 'kg',
//       },
//     ],
//   })

//   console.log('‚úÖ Recipes created')

//   // 11. üéüÔ∏è Create vouchers
//   await prisma.vouchers.createMany({
//     data: [
//       {
//         code: 'WELCOME10',
//         description: 'Gi·∫£m 10% cho kh√°ch h√†ng m·ªõi',
//         discount_type: 'percent',
//         discount_value: 10,
//         min_order_value: 100000,
//         max_discount: 50000,
//         start_date: new Date(),
//         end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days
//         usage_limit: 100,
//         restaurant_id: restaurant1.id,
//       },
//       {
//         code: 'FREESHIP',
//         description: 'Mi·ªÖn ph√≠ giao h√†ng',
//         discount_type: 'fixed',
//         discount_value: 30000,
//         min_order_value: 200000,
//         start_date: new Date(),
//         end_date: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000), // 60 days
//         usage_limit: 50,
//         restaurant_id: restaurant1.id,
//       },
//     ],
//   })

//   console.log('‚úÖ Vouchers created')

//   // 12. üë®‚Äçüíº Create staff
//   const staffUser = await prisma.users.create({
//     data: {
//       username: 'staff_demo',
//       email: 'staff@restaurant.demo',
//       password_hash: hashedPassword,
//       first_name: 'Nh√¢n Vi√™n',
//       last_name: 'Demo',
//       full_name: 'Nh√¢n Vi√™n Demo',
//       phone_code: '+84',
//       phone_number: '0123456792',
//       role: 'user',
//       status: 'active',
//       email_verified_at: new Date(),
//     },
//   })

//   await prisma.restaurant_staffs.create({
//     data: {
//       restaurant_id: restaurant1.id,
//       user_id: staffUser.id,
//       role: 'staff',
//       status: 'active',
//     },
//   })

//   console.log('‚úÖ Staff created')

//   // 13. üìÖ Create staff schedule
//   const today = new Date()
//   const tomorrow = new Date(today)
//   tomorrow.setDate(tomorrow.getDate() + 1)

//   await prisma.staff_schedules.create({
//     data: {
//       staff_id: staffUser.id,
//       restaurant_id: restaurant1.id,
//       shift_date: tomorrow,
//       shift_type: 'morning',
//       start_time: new Date('2024-01-01T08:00:00Z'),
//       end_time: new Date('2024-01-01T16:00:00Z'),
//       status: 'scheduled',
//     },
//   })

//   console.log('‚úÖ Staff schedule created')

//   // 14. üìä Create sample reservation
//   await prisma.reservations.create({
//     data: {
//       table_id: tables[0].id,
//       customer_id: customerUser.id,
//       customer_name: 'Kh√°ch H√†ng Demo',
//       customer_phone: '0123456791',
//       customer_email: 'customer@restaurant.demo',
//       party_size: 2,
//       reservation_date: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 hours from now
//       duration_hours: 2,
//       status: 'confirmed',
//       special_requests: 'Ch·ªó ng·ªìi g·∫ßn c·ª≠a s·ªï',
//     },
//   })

//   console.log('‚úÖ Sample reservation created')

//   // 15. üéâ Create promotions
//   await prisma.promotions.create({
//     data: {
//       restaurant_id: restaurant1.id,
//       name: 'Happy Hour',
//       description: 'Gi·∫£m 20% t·∫•t c·∫£ ƒë·ªì u·ªëng t·ª´ 14h-16h',
//       type: 'percentage',
//       discount_value: 20,
//       conditions: {
//         time_start: '14:00',
//         time_end: '16:00',
//         applicable_categories: ['ƒë·ªì u·ªëng'],
//       },
//       applicable_tables: [],
//       time_restrictions: {
//         days_of_week: [1, 2, 3, 4, 5], // Monday to Friday
//       },
//       start_date: new Date(),
//       end_date: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days
//       is_active: true,
//     },
//   })

//   console.log('‚úÖ Promotions created')

//   console.log('üéâ Database seeding completed successfully!')
//   console.log('\nüìä Summary:')
//   console.log('- 4 users created (admin, manager, customer, staff)')
//   console.log('- 1 organization with 1 restaurant chain')
//   console.log('- 2 restaurants (S√†i G√≤n & H√† N·ªôi)')
//   console.log('- 10 tables in S√†i G√≤n restaurant')
//   console.log('- 5 menu items with categories')
//   console.log('- 3 inventory items with recipe connections')
//   console.log('- 2 vouchers for promotions')
//   console.log('- 1 staff member with schedule')
//   console.log('- 1 sample reservation')
//   console.log('- 1 happy hour promotion')
//   console.log('\nüîê Login credentials:')
//   console.log('Admin: admin@restaurant.demo / demo123456')
//   console.log('Manager: manager@restaurant.demo / demo123456')
//   console.log('Customer: customer@restaurant.demo / demo123456')
//   console.log('Staff: staff@restaurant.demo / demo123456')
// }

// main()
//   .then(async () => {
//     await prisma.$disconnect()
//   })
//   .catch(async (e) => {
//     console.error('‚ùå Seeding failed:', e)
//     await prisma.$disconnect()
//     process.exit(1)
//   })


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// /* prisma/seed.ts */
// import { PrismaClient, Prisma } from '@prisma/client'
// const prisma = new PrismaClient()

// // Helper random
// const rand = (min: number, max: number) =>
//   Math.floor(Math.random() * (max - min + 1)) + min

// // C·ªë ƒë·ªãnh ID ƒë·ªÉ tham chi·∫øu (uuid gi·∫£ ·ªü ƒë√¢y b·∫°n c√≥ th·ªÉ thay b·∫±ng crypto/randomUUID khi ch·∫°y)
// import { randomUUID } from 'crypto'

// async function main() {
//   // 1. User t·ªëi thi·ªÉu (owner + manager gi·∫£ l·∫≠p)
//   const owner = await prisma.users.upsert({
//     where: { email: 'owner@example.com' },
//     update: {},
//     create: {
//       id: randomUUID(),
//       username: 'owner',
//       email: 'owner@example.com',
//       first_name: 'Owner',
//       last_name: 'System',
//       full_name: 'Owner System',
//       role: 'admin',
//       status: 'active'
//     }
//   })

//   const manager = await prisma.users.upsert({
//     where: { email: 'manager@example.com' },
//     update: {},
//     create: {
//       id: randomUUID(),
//       username: 'manager',
//       email: 'manager@example.com',
//       first_name: 'Restaurant',
//       last_name: 'Manager',
//       full_name: 'Restaurant Manager',
//       role: 'manager',
//       status: 'active'
//     }
//   })

//   // 2. Organization
//   const org = await prisma.organizations.upsert({
//     where: { code: 'ORG_MAIN' },
//     update: {},
//     create: {
//       id: randomUUID(),
//       name: 'Tasty Group',
//       code: 'ORG_MAIN',
//       owner_id: owner.id
//     }
//   })

//   // 3. Restaurant
//   const restaurant = await prisma.restaurants.upsert({
//     where: { organization_id: { code: 'R001', organization_id: org.id } },
//     update: {},
//     create: {
//       id: randomUUID(),
//       organization_id: org.id,
//       code: 'R001',
//       name: 'Nh√† H√†ng Trung T√¢m',
//       address: '123 ƒê∆∞·ªùng ·∫®m Th·ª±c, Qu·∫≠n 1',
//       manager_id: manager.id,
//       status: 'active'
//     }
//   })

//   // 4. Menu ch√≠nh
//   const menu = await prisma.menus.create({
//     data: {
//       id: randomUUID(),
//       restaurant_id: restaurant.id,
//       name: 'Menu Ch√≠nh',
//       is_active: true
//     }
//   })

//   // 5. Categories
//   const categoryDefs = [
//     { code: 'soup', name: 'M√≥n N∆∞·ªõc' },
//     { code: 'appetizer', name: 'Khai V·ªã' },
//     { code: 'rice', name: 'C∆°m' },
//     { code: 'noodle', name: 'M√¨/B√∫n' },
//     { code: 'hotpot', name: 'L·∫©u' },
//     { code: 'main', name: 'M√≥n Ch√≠nh' },
//     { code: 'salad', name: 'Salad' },
//     { code: 'western', name: '√Çu' },
//     { code: 'street', name: 'ƒê∆∞·ªùng Ph·ªë' },
//     { code: 'dessert', name: 'Tr√°ng Mi·ªáng' },
//     { code: 'drink', name: 'ƒê·ªì U·ªëng' },
//     { code: 'dim_sum', name: 'Dim Sum' },
//     { code: 'special', name: 'ƒê·∫∑c Bi·ªát' }
//   ]

//   const categoryMap: Record<string, string> = {}
//   for (const c of categoryDefs) {
//     const cat = await prisma.categories.upsert({
//       where: { slug: c.code },
//       update: {},
//       create: {
//         id: randomUUID(),
//         name: c.name,
//         slug: c.code,
//         is_active: true
//       }
//     })
//     categoryMap[c.code] = cat.id
//   }

//   // 6. Inventory Items (nguy√™n li·ªáu)
//   const inventoryDefs = [
//     'gao','banh_pho','bun_tuoi','mi_trung','thit_bo','thit_ga','suon_heo','thit_lon','tom_tuoi','muc_tuoi','ca_hoi','ca_ngu','ca_trang','ech','bach_tuoc','rau_thom','hanh_la','hanh_tay','toi','gung','sa','ot','ca_chua','khoai_tay','nam_rom','nam_dong_co','dau_hu','trung_ga','trung_cut','dau_nanh','dau_phong','me_den','dau_hao','nuoc_tuong','nuoc_mam','duong_cat','muoi','tieu_den','bot_ngot','bot_bap','bot_mi','dau_oliu','dau_me','dau_dieu','pho_mai','sua_tuoi','kem_tuoi','bot_ca_ri','la_chanh','la_qua_que','chanhsanh','chanh_day','xoai','dau_tay','bo','dua_dua','hat_sen','rong_bien','bot_tra_xanh','bot_ca_cao'
//   ]

//   const inventoryMap: Record<string,string> = {}
//   for (const name of inventoryDefs) {
//     const inv = await prisma.inventory_items.create({
//       data: {
//         id: randomUUID(),
//         restaurant_id: restaurant.id,
//         name,
//         unit: 'gram',
//         quantity: new Prisma.Decimal(rand(5000,12000)),
//         unit_cost: new Prisma.Decimal(rand(10,200)),
//       }
//     })
//     inventoryMap[name] = inv.id
//   }

//   // 7. Danh s√°ch 200 m√≥n (t√™n + category code) ‚Äì n√©n v√†o m·∫£ng
//   const dishes: { name: string; category: string }[] = [
//     // (ƒë∆∞a ƒë√∫ng th·ª© t·ª± 1..200 nh∆∞ ƒë√£ li·ªát k√™ tr√™n)
//     ['Ph·ªü B√≤ Truy·ªÅn Th·ªëng','soup'],['Ph·ªü G√† Ta','soup'],['B√∫n B√≤ Hu·∫ø','soup'],['H·ªß Ti·∫øu Nam Vang','soup'],['Mi·∫øn G√† N·∫•m','soup'],['Ch√°o S∆∞·ªùn Non','soup'],['Ch√°o H·∫£i S·∫£n','soup'],['Canh Chua C√°','soup'],['Canh Rau C·ªß','soup'],['Canh Kim Chi ƒê·∫≠u Ph·ª•','soup'],
//     ['G·ªèi Cu·ªën T√¥m Th·ªãt','appetizer'],['Ch·∫£ Gi√≤ R·∫ø','appetizer'],['ƒê·∫≠u H≈© Chi√™n S·∫£','appetizer'],['B√°nh G·∫°o L·∫Øc Ph√¥ Mai','appetizer'],['Khoai T√¢y Chi√™n T·ªèi','appetizer'],['C√°nh G√† Chi√™n N∆∞·ªõc M·∫Øm','appetizer'],['B√°nh X√®o T√¥m','appetizer'],['G·ªèi B√≤ Rau Th∆°m','appetizer'],['B√°nh Cu·ªën Th·ªãt','appetizer'],['B√°nh Kh·ªçt T√¥m','appetizer'],
//     ['C∆°m T·∫•m S∆∞·ªùn B√¨ Ch·∫£','rice'],['C∆°m G√† H·∫£i Nam','rice'],['C∆°m Chi√™n D∆∞∆°ng Ch√¢u','rice'],['C∆°m Chi√™n Tr·ª©ng','rice'],['C∆°m Rang Th·ªãt B√≤','rice'],['C∆°m Rang H·∫£i S·∫£n','rice'],['C∆°m S∆∞·ªùn N∆∞·ªõng','rice'],['C∆°m Th·ªãt Kho Tr·ª©ng','rice'],['C∆°m C√° Kho T·ªô','rice'],['C∆°m Chay Th·∫≠p C·∫©m','rice'],
//     ['B√∫n Th·ªãt N∆∞·ªõng','noodle'],['B√∫n Ch·∫£ H√† N·ªôi','noodle'],['B√∫n ƒê·∫≠u M·∫Øm T√¥m','noodle'],['B√∫n C√° Nha Trang','noodle'],['B√∫n Ri√™u Cua','noodle'],['B√∫n Ngh√™u S·∫£ ·ªöt','noodle'],['M√¨ X√†o B√≤','noodle'],['M√¨ X√†o H·∫£i S·∫£n','noodle'],['M√¨ Udon X√†o G√†','noodle'],['M√¨ Tr·ªôn Sa T·∫ø','noodle'],
//     ['L·∫©u Th√°i H·∫£i S·∫£n','hotpot'],['L·∫©u G√† L√° √â','hotpot'],['L·∫©u B√≤ Nh√∫ng D·∫•m','hotpot'],['L·∫©u N·∫•m Chay','hotpot'],['L·∫©u C√° MƒÉng Chua','hotpot'],['L·∫©u Ri√™u Cua','hotpot'],['L·∫©u ·∫æch MƒÉng Cay','hotpot'],['L·∫©u Kim Chi Th·ªãt B√≤','hotpot'],['L·∫©u T·ª© Xuy√™n','hotpot'],['L·∫©u Th·∫≠p C·∫©m','hotpot'],
//     ['B√≤ L√∫c L·∫Øc','main'],['B√≤ Kho B√°nh M√¨','main'],['Th·ªãt Kho Tr·ª©ng C√∫t','main'],['G√† Kho G·ª´ng','main'],['G√† Rang Mu·ªëi','main'],['G√† N∆∞·ªõng M·∫≠t Ong','main'],['C√° Kho L·∫°t','main'],['C√° Chi√™n S·ªët Chanh','main'],['T√¥m Rang Me','main'],['M·ª±c X√†o C·∫ßn','main'],
//     ['S∆∞·ªùn N∆∞·ªõng BBQ','main'],['S∆∞·ªùn Rim M·∫∑n','main'],['Ba Ch·ªâ Rim M·∫Øm','main'],['Th·ªãt B·∫±m S·ªët C√†','main'],['Th·ªãt Vi√™n S·ªët Ti√™u','main'],['ƒê·∫≠u H≈© Kho N·∫•m','main'],['ƒê·∫≠u H≈© S·ªët T·ª© Xuy√™n','main'],['N·∫•m Kho Ti√™u','main'],['Ch·∫£ C√° Th√¨ L√†','main'],['T√¥m H·∫•p S·∫£','main'],
//     ['G√† H·∫•p H√†nh','main'],['C√° H·∫•p G·ª´ng','main'],['Ngh√™u H·∫•p Th√°i','main'],['S√≤ L·ª•a X√†o T·ªèi','main'],['H√†u N∆∞·ªõng Ph√¥ Mai','main'],['B·∫°ch Tu·ªôc N∆∞·ªõng Sa T·∫ø','main'],['·∫æch X√†o S·∫£ ·ªöt','main'],['L∆∞·ªùn Ng·ªóng X√¥ng Kh√≥i','main'],['B√≤ Cu·ªôn Ph√¥ Mai','main'],['Th·ªãt Xi√™n N∆∞·ªõng','main'],
//     ['Salad Rau Tr·ªôn D·∫ßu Gi·∫•m','salad'],['Salad G√† X√©','salad'],['Salad H·∫£i S·∫£n','salad'],['Salad Tr·ª©ng','salad'],['Salad ƒê·∫≠u H≈© Rong Bi·ªÉn','salad'],['Salad B√≤ N∆∞·ªõng','salad'],['Salad Xo√†i T√¥m','salad'],['Salad D∆∞a Leo Chanh Mu·ªëi','salad'],['Salad Ng≈© S·∫Øc','salad'],['Salad B∆° Tr·ª©ng','salad'],
//     ['Pizza H·∫£i S·∫£n','western'],['Pizza B√≤ Ph√¥ Mai','western'],['Pizza G√† BBQ','western'],['Pizza Chay N·∫•m','western'],['M√¨ √ù S·ªët C√† B√≤','western'],['M√¨ √ù S·ªët Kem N·∫•m','western'],['M√¨ √ù S·ªët Pesto','western'],['B√≤ Beefsteak','western'],['C√° H·ªìi √Åp Ch·∫£o','western'],['G√† ƒê√∫t L√≤ Th·∫£o M·ªôc','western'],
//     ['B√°nh M√¨ B√≤ N∆∞·ªõng','street'],['B√°nh M√¨ G√† X√©','street'],['B√°nh M√¨ Ch·∫£ L·ª•a','street'],['B√°nh M√¨ Th·ªãt Ngu·ªôi','street'],['B√°nh M√¨ X√≠u M·∫°i','street'],['B√°nh M√¨ C√°','street'],['B√°nh M√¨ Tr·ª©ng ·ªêp','street'],['B√°nh M√¨ Chay','street'],['B√°nh Tr√°ng Tr·ªôn','street'],['Xo√†i L·∫Øc Mu·ªëi ·ªöt','street'],
//     ['S·ªØa Chua N·∫øp C·∫©m','dessert'],['Ch√® Ba M√†u','dessert'],['Ch√® ƒê·∫≠u Xanh','dessert'],['Ch√® Kh√∫c B·∫°ch','dessert'],['Rau C√¢u D·ª´a','dessert'],['B√°nh Flan Caramel','dessert'],['B√°nh Su Kem','dessert'],['Tiramisu Vi·ªát','dessert'],['B√°nh Chu·ªëi N∆∞·ªõng','dessert'],['B√°nh Da L·ª£n','dessert'],
//     ['Kem D·ª´a','dessert'],['Kem Xo√†i','dessert'],['Kem D√¢u','dessert'],['Kem Matcha','dessert'],['B√°nh Brownie','dessert'],['Pudding Xo√†i','dessert'],['Pudding Socola','dessert'],['B√°nh Mousse Chanh D√¢y','dessert'],['Ch√® Th√°i','dessert'],['Ch√® H·∫°t Sen','dessert'],
//     ['Tr√† ƒê√†o Cam S·∫£','drink'],['Tr√† S·ªØa Tr√¢n Ch√¢u','drink'],['N∆∞·ªõc Chanh S·∫£','drink'],['N∆∞·ªõc Cam √âp','drink'],['N∆∞·ªõc D∆∞a H·∫•u','drink'],['N∆∞·ªõc √âp C√† R·ªët','drink'],['Sinh T·ªë B∆°','drink'],['Sinh T·ªë Xo√†i','drink'],['Sinh T·ªë D√¢u','drink'],['C√† Ph√™ ƒêen','drink'],
//     ['C√† Ph√™ S·ªØa','drink'],['B·∫°c X·ªâu','drink'],['C√† Ph√™ C·ªët D·ª´a','drink'],['Matcha Latte','drink'],['Socola N√≥ng','drink'],['N∆∞·ªõc √âp Th∆°m','drink'],['N∆∞·ªõc √âp ·ªîi','drink'],['Chanh D√¢y ƒê√° Xay','drink'],['D·ª´a T∆∞∆°i','drink'],['N∆∞·ªõc Su·ªëi','drink'],
//     ['Smoothie Detox Xanh','drink'],['Kombucha G·ª´ng','drink'],['Kombucha D√¢u','drink'],['Kombucha Vi·ªát Qu·∫•t','drink'],['N∆∞·ªõc √âp C·∫ßn T√¢y','drink'],['N∆∞·ªõc Y·∫øn','drink'],['S√¢m B√≠ ƒêao','drink'],['Tr√† Olong M·∫≠t Ong','drink'],['Tr√† Sen V√†ng','drink'],['Tr√† Hoa C√∫c M·∫≠t Ong','drink'],
//     ['B√°nh Bao Th·ªãt','dim_sum'],['B√°nh Bao Chay','dim_sum'],['H√° C·∫£o T√¥m','dim_sum'],['X√≠u M·∫°i T√¥m Th·ªãt','dim_sum'],['B√°nh Cu·ªën T√¥m H·∫π','dim_sum'],['B√°nh B·ªôt L·ªçc','dim_sum'],['S·ªßi C·∫£o H·∫•p','dim_sum'],['S·ªßi C·∫£o Chi√™n','dim_sum'],['B·ªôt Chi√™n Tr·ª©ng','dim_sum'],['B√°nh Gi√≤','dim_sum'],
//     ['Ch√°o ·∫æch Singapore','special'],['G√† Quay Da Gi√≤n','special'],['Heo Quay Da Gi√≤n','special'],['V·ªãt Quay','special'],['T√¥m H√πm N∆∞·ªõng B∆° T·ªèi','special'],['Cua Rang Me','special'],['C√° T·∫ßm H·∫•p X√¨ D·∫ßu','special'],['B√≤ Wagyu N∆∞·ªõng','special'],['L·∫©u H·∫£i S·∫£n Cao C·∫•p','special'],['Sashimi Th·∫≠p C·∫©m','special'],
//     ['Sashimi C√° H·ªìi','special'],['Sashimi C√° Ng·ª´','special'],['Sashimi B·∫°ch Tu·ªôc','special'],['Sashimi Thanh Cua','special'],['Sashimi T√¥m','special'],['Sushi Cu·ªôn C√° H·ªìi','special'],['Sushi Cu·ªôn B∆°','special'],['Sushi Cu·ªôn L∆∞∆°n','special'],['Sushi Tr·ª©ng Cu·ªôn','special'],['Nigiri C√° H·ªìi','special'],
//     ['Nigiri C√° Ng·ª´','special'],['Nigiri T√¥m','special'],['Nigiri B·∫°ch Tu·ªôc','special'],['Nigiri Tr·ª©ng','special'],['Tempura T√¥m','special'],['Tempura Rau','special'],['C√° H·ªìi N∆∞·ªõng Teriyaki','special'],['C√° Ng·ª´ √Åp Ch·∫£o','special'],['B·∫°ch Tu·ªôc S·ªët Cay','special'],['L·∫©u Sashimi Th·∫£','special']
//   ].map(d => ({ name: d[0], category: d[1] }))

//   // 8. T·∫°o menu_items + recipes + recipe_ingredients
//   let index = 0
//   for (const d of dishes) {
//     index++
//     const menuItemId = randomUUID()
//     const catId = categoryMap[d.category] ?? categoryMap['main']
//     const price = new Prisma.Decimal( rand(30000, 250000) / 100 ).toFixed(2) // t·∫°m logic
//     await prisma.menu_items.create({
//       data: {
//         id: menuItemId,
//         menu_id: menu.id,
//         category_id: catId,
//         name: d.name,
//         description: `M√≥n ${d.name} h·∫•p d·∫´n #${index}`,
//         price: new Prisma.Decimal(price),
//         is_available: true,
//         is_featured: index % 25 === 0
//       }
//     })

//     // Recipe
//     const recipeId = randomUUID()
//     const baseIngredientsPool = Object.keys(inventoryMap)
//     // M·ªói m√≥n 4-6 nguy√™n li·ªáu ng·∫´u nhi√™n
//     const ingredientCount = rand(4, 6)
//     const picked = new Set<string>()
//     while (picked.size < ingredientCount) {
//       picked.add(baseIngredientsPool[rand(0, baseIngredientsPool.length - 1)])
//     }
//     await prisma.recipes.create({
//       data: {
//         id: recipeId,
//         menu_item_id: menuItemId,
//         name: `C√¥ng th·ª©c ${d.name}`,
//         description: `H∆∞·ªõng d·∫´n s∆° ch·∫ø v√† n·∫•u ${d.name}`,
//         instructions: 'Chu·∫©n b·ªã nguy√™n li·ªáu, s∆° ch·∫ø, n·∫•u theo th·ª© t·ª±, n√™m n·∫øm v√† tr√¨nh b√†y.',
//         serving_size: 1
//       }
//     })

//     // Recipe ingredients
//     for (const ing of picked) {
//       await prisma.recipe_ingredients.create({
//         data: {
//           id: randomUUID(),
//             recipe_id: recipeId,
//             inventory_item_id: inventoryMap[ing],
//             quantity: new Prisma.Decimal(rand(5, 50)),
//             unit: 'gram',
//             notes: null
//         }
//       })
//     }
//   }

//   // 9. Tables
//   for (let t = 1; t <= 25; t++) {
//     await prisma.tables.create({
//       data: {
//         id: randomUUID(),
//         restaurant_id: restaurant.id,
//         table_number: `T${t}`,
//         capacity: t % 5 === 0 ? 8 : 4,
//         status: 'available'
//       }
//     })
//   }

//   console.log('Seed ho√†n t·∫•t.')
// }

// main()
//   .then(async () => {
//     await prisma.$disconnect()
//   })
//   .catch(async (e) => {
//     console.error(e)
//     await prisma.$disconnect()
//     process.exit(1)
//   })





///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


/* eslint-disable */
import { PrismaClient, Prisma } from '@prisma/client';
import crypto from 'crypto';

const prisma = new PrismaClient();

function uuid() { return crypto.randomUUID(); }

const CATEGORY_DEFS = [
  'Khai V·ªã','Salad','Soup','M√≥n Ch√≠nh - Th·ªãt','M√≥n Ch√≠nh - H·∫£i S·∫£n',
  'M√≥n Ch√≠nh - Chay','M√¨ & Pasta','C∆°m & L·∫©u','ƒê·ªì N∆∞·ªõng','ƒê·ªì Chi√™n',
  'B√°nh & Tr√°ng Mi·ªáng','Th·ª©c U·ªëng - C√† Ph√™','Th·ª©c U·ªëng - Tr√†','N∆∞·ªõc √âp & Sinh T·ªë',
  'Cocktail','Mocktail','Bia','R∆∞·ª£u Vang','Set Combo','M√≥n ƒê·∫∑c Bi·ªát Theo M√πa'
];

const BASE_INGREDIENTS = (() => {
  // 120 nguy√™n li·ªáu kho (v√≠ d·ª•)
  const groups = {
    Thit: ['Th·ªãt b√≤','Th·ªãt heo','Th·ªãt g√†','Th·ªãt v·ªãt','Th·ªãt c·ª´u','Bacon','X√∫c x√≠ch','Gi√≤ s·ªëng','S∆∞·ªùn non','·ª®c g√†','ƒê√πi g√†','Gan g√†'],
    HaiSan: ['T√¥m s√∫','T√¥m th·∫ª','M·ª±c ·ªëng','M·ª±c l√°','B·∫°ch tu·ªôc','C√° h·ªìi','C√° ng·ª´','C√° thu','Ngao','S√≤ ƒëi·ªáp','H√†u s·ªëng','Cua bi·ªÉn'],
    RauCu: ['C√† r·ªët','Khoai t√¢y','Khoai lang','B√≠ ng√≤i','·ªöt chu√¥ng ƒë·ªè','·ªöt chu√¥ng v√†ng','C√† chua','D∆∞a leo','B·∫Øp c·∫£i t√≠m','X√† l√°ch lolo','X√† l√°ch romaine','Rau m√πi'],
    TinhBot: ['G·∫°o th∆°m','G·∫°o n·∫øp','B√∫n g·∫°o','Mi·∫øn dong','Spaghetti','Fettuccine','M√¨ tr·ª©ng','B√°nh m√¨ baguette','B·ªôt m√¨ ƒëa d·ª•ng','B·ªôt g·∫°o','B·ªôt b·∫Øp','Y·∫øn m·∫°ch'],
    GiaVi: ['Mu·ªëi tinh','ƒê∆∞·ªùng c√°t','ƒê∆∞·ªùng n√¢u','Ti√™u ƒëen','Ti√™u s·ªç','·ªöt b·ªôt','H·∫°t n√™m','N∆∞·ªõc m·∫Øm','N∆∞·ªõc t∆∞∆°ng','D·∫ßu h√†o','D·∫ßu m√®','B·ªôt ng·ªçt'],
    Khac: ['Ph√¥ mai parmesan','Ph√¥ mai mozzarella','Kem t∆∞∆°i','S·ªØa t∆∞∆°i','S·ªØa ƒë·∫∑c','B∆° l·∫°t','D·∫ßu olive','D·∫ßu ƒë·∫≠u n√†nh','T·ªèi','H√†nh t√≠m','G·ª´ng','S·∫£',
           'L√° chanh','L√° nguy·ªát qu·∫ø','H√∫ng qu·∫ø','H√∫ng l·ªßi','Th√¨ l√†','Rau th∆°m h·ªón h·ª£p','N·∫•m h∆∞∆°ng','N·∫•m kim ch√¢m','N·∫•m b√†o ng∆∞','Tr·ª©ng g√†','Tr·ª©ng c√∫t','ƒê·∫≠u h≈©','ƒê·∫≠u ƒë·ªè','ƒê·∫≠u n√†nh','V·ª´ng rang','L·∫°c rang','M√® ƒëen','M·∫≠t ong','Chanh v√†ng','Chanh xanh','Cam v√†ng','T√°o ƒë·ªè','D·ª©a t∆∞∆°i','Xo√†i c√°t','D√¢u t√¢y','Vi·ªát qu·∫•t','Chu·ªëi ti√™u','S·∫ßu ri√™ng','B∆° s√°p','Rau c√¢u b·ªôt','B·ªôt gelatin','B·ªôt cacao','B·ªôt matcha','Syrup d√¢u','Syrup b·∫°c h√†','Syrup caramel','C√† ph√™ rang xay','B·ªôt c√† ph√™ ho√† tan','Tr√† ƒëen','Tr√† xanh','Tr√† olong','L√° b·∫°c h√†']
  };
  const arr: { name: string; unit: string }[] = [];
  Object.values(groups).forEach(g => g.forEach(n => arr.push({ name: n, unit: inferUnit(n) })));
  return arr.slice(0,120);
})();

function inferUnit(name: string) {
  if (/s·ªØa|syrup|d·∫ßu|n∆∞·ªõc|c√† ph√™|tr√†/i.test(name)) return 'ml';
  if (/b·ªôt|ƒë∆∞·ªùng|mu·ªëi|b·ªôt|cacao|matcha|y·∫øn m·∫°ch/i.test(name)) return 'g';
  if (/tr·ª©ng|h√†u|t√¥m|m·ª±c|b·∫°ch tu·ªôc|cua|s√≤|h·∫øn|ngao/i.test(name)) return 'c√°i';
  if (/l√°|rau|n·∫•m|ph√¥ mai|b∆°|th·ªãt|c√°|ƒë·∫≠u h≈©|ƒë·∫≠u/i.test(name)) return 'g';
  return 'g';
}

async function main() {
  console.time('seed');

  // 1. Organization + Restaurant + Menu
  const orgId = uuid();
  const restId = uuid();
  const menuId = uuid();

  await prisma.organizations.create({
    data: {
      id: orgId,
      name: 'C√¥ng Ty ·∫®m Th·ª±c Demo',
      code: 'DEMOORG',
      description: 'T·ªï ch·ª©c m·∫´u',
      owner: {
        create: {
          id: uuid(),
          username: 'owner_demo',
            email: 'owner@example.com',
          first_name: 'Owner',
          last_name: 'Demo',
          full_name: 'Owner Demo',
        }
      }
    }
  });

  await prisma.restaurants.create({
    data: {
      id: restId,
      organization_id: orgId,
      code: 'REST01',
      name: 'Nh√† H√†ng Demo Trung T√¢m',
      address: '123 ƒê∆∞·ªùng M·∫´u, Qu·∫≠n 1, TP.HCM',
      opening_hours: {
        mon: { open: '08:00', close: '22:00' },
        tue: { open: '08:00', close: '22:00' },
        wed: { open: '08:00', close: '22:00' },
        thu: { open: '08:00', close: '22:00' },
        fri: { open: '08:00', close: '23:00' },
        sat: { open: '08:00', close: '23:00' },
        sun: { open: '08:00', close: '22:00' }
      }
    }
  });

  await prisma.menus.create({
    data: {
      id: menuId,
      restaurant_id: restId,
      name: 'Menu Ch√≠nh',
      description: 'Menu t·ªïng h·ª£p 500 m√≥n'
    }
  });

  // 2. Categories
  const categoryRecords = CATEGORY_DEFS.map((name, idx) => ({
    id: uuid(),
    name,
    slug: name.toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^\w\-]/g,'')
      .replace(/-+/g,'-'),
    display_order: idx
  }));
  await prisma.categories.createMany({ data: categoryRecords });

  // 3. Tables (40 b√†n)
  const tableRecords = Array.from({ length: 40 }).map((_, i) => ({
    id: uuid(),
    restaurant_id: restId,
    table_number: `T${(i+1).toString().padStart(2,'0')}`,
    capacity: 2 + (i % 5) * 2, // 2,4,6,8,10
    location: i < 10 ? 'T·∫ßng 1' : i < 20 ? 'T·∫ßng 2' : i < 30 ? 'S√¢n v∆∞·ªùn' : 'Ban c√¥ng',
  }));
  await prisma.tables.createMany({ data: tableRecords });

  // 4. Inventory Items (120 nguy√™n li·ªáu)
  const inventoryRecords = BASE_INGREDIENTS.map((ing, idx) => ({
    id: uuid(),
    restaurant_id: restId,
    name: ing.name,
    unit: ing.unit,
    quantity: new Prisma.Decimal((5000 + idx * 15).toFixed(2)), // g ho·∫∑c ml ho·∫∑c c√°i
    unit_cost: new Prisma.Decimal(((idx % 40) + 5) * 1000),
  }));
  await prisma.inventory_items.createMany({ data: inventoryRecords });

  // Map nhanh ƒë·ªÉ ch·ªçn ingredients
  const inventoryIds = inventoryRecords.map(r => r.id);

  // 5. Menu Items (500 m√≥n) + 6. Recipes + 7. Recipe_Ingredients
  const menuItems: any[] = [];
  const recipes: any[] = [];
  const recipeIngredients: any[] = [];

  const itemsPerCategory = Math.ceil(500 / categoryRecords.length); // = 25
  let counter = 0;

  for (let c = 0; c < categoryRecords.length; c++) {
    for (let k = 0; k < itemsPerCategory && counter < 500; k++) {
      counter++;
      const cat = categoryRecords[c];
      const itemId = uuid();
      const recipeId = uuid();
      const basePrice = 70000 + (counter % 50) * 3500; // 70k -> ~245k

      const name = `${cat.name} #${counter}`;
      const allergens: string[] = [];
      if (/(Ph√¥ mai|S·ªØa|Kem)/i.test(name) || (counter % 17 === 0)) allergens.push('dairy');
      if (/(B·ªôt|M√¨|Spaghetti)/i.test(name) || (counter % 23 === 0)) allergens.push('gluten');
      if (counter % 41 === 0) allergens.push('nuts');

      const dietary: string[] = [];
      if (/Chay/i.test(cat.name)) dietary.push('vegetarian');
      if (/Salad/i.test(cat.name) && counter % 2 === 0) dietary.push('vegan');

      menuItems.push({
        id: itemId,
        menu_id: menuId,
        category_id: cat.id,
        name,
        price: new Prisma.Decimal(basePrice),
        is_available: true,
        is_featured: counter % 47 === 0,
        preparation_time: 10 + (counter % 25),
        calories: 120 + (counter % 400),
        allergens,
        dietary_info: dietary
      });

      recipes.push({
        id: recipeId,
        menu_item_id: itemId,
        name: `C√¥ng th·ª©c ${name}`,
        instructions: `1. Chu·∫©n b·ªã nguy√™n li·ªáu.\n2. S∆° ch·∫ø.\n3. N·∫•u ch√≠nh theo quy tr√¨nh chu·∫©n.\n4. Tr√¨nh b√†y & ho√†n thi·ªán.\n(M√≥n s·ªë ${counter})`,
        prep_time: 5 + (counter % 15),
        cook_time: 8 + (counter % 20),
        serving_size: 1
      });

      // Ch·ªçn 4 nguy√™n li·ªáu ‚Äúxoay v√≤ng‚Äù ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh deterministic
      const ingStart = (counter * 7) % (inventoryIds.length - 10);
      const selected = [
        inventoryIds[ingStart],
        inventoryIds[ingStart + 3],
        inventoryIds[ingStart + 5],
        inventoryIds[ingStart + 9],
      ];

      selected.forEach((invId, idxSel) => {
        recipeIngredients.push({
          id: uuid(),
          recipe_id: recipeId,
          inventory_item_id: invId,
          quantity: new Prisma.Decimal((50 + ((counter + idxSel) % 60) * 2).toFixed(2)),
          unit: 'g',
          notes: idxSel === 0 ? 'Nguy√™n li·ªáu ch√≠nh' : undefined
        });
      });
    }
  }

  // Batch insert ƒë·ªÉ tr√°nh qu√° nhi·ªÅu tham s·ªë
  const batchInsert = async (arr: any[], modelName: keyof PrismaClient, batchSize = 300) => {
    for (let i = 0; i < arr.length; i += batchSize) {
      // @ts-ignore
      await prisma[modelName].createMany({ data: arr.slice(i, i + batchSize) });
    }
  };

  await batchInsert(menuItems, 'menu_items');
  await batchInsert(recipes, 'recipes');
  await batchInsert(recipeIngredients, 'recipe_ingredients', 500);

  console.timeEnd('seed');

  console.log({
    categories: categoryRecords.length,
    tables: tableRecords.length,
    inventory_items: inventoryRecords.length,
    menu_items: menuItems.length,
    recipes: recipes.length,
    recipe_ingredients: recipeIngredients.length
  });
}

main()
  .catch(e => {
    console.error(e);
    process.exit(1);
  })
  .finally(()=> prisma.$disconnect());