generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("EXPRESS_DATABASE_URL")
  directUrl = env("EXPRESS_DIRECT_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model addresses {
  id                                           String   @id @default(uuid()) @db.Uuid
  user_id                                      String   @db.Uuid
  recipient_name                               String   @db.VarChar(100)
  recipient_phone                              String   @db.VarChar(20)
  street_address                               String   @db.VarChar(255)
  ward                                         String?  @db.VarChar(100)
  district                                     String   @db.VarChar(100)
  city                                         String   @db.VarChar(100)
  country                                      String   @default("Vietnam") @db.VarChar(100)
  is_default_shipping                          Boolean  @default(false)
  is_default_billing                           Boolean  @default(false)
  created_at                                   DateTime @default(now()) @db.Timestamptz(6)
  updated_at                                   DateTime @updatedAt @db.Timestamptz(6)
  users                                        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  orders_orders_billing_address_idToaddresses  orders[] @relation("orders_billing_address_idToaddresses")
  orders_orders_shipping_address_idToaddresses orders[] @relation("orders_shipping_address_idToaddresses")

  @@index([user_id], map: "idx_addresses_user")
  @@index([is_default_shipping], map: "idx_addresses_default_shipping")
  @@index([is_default_billing], map: "idx_addresses_default_billing")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model affiliate_stats {
  id                  String                @id @default(uuid()) @db.Uuid
  affiliate_user_id   String                @db.Uuid
  associated_order_id String?               @unique @db.Uuid
  commission_amount   Decimal?              @db.Decimal(10, 2)
  click_source        String?               @db.VarChar(255)
  ip_address          String?               @db.VarChar(45)
  status              affiliate_status_enum @default(pending)
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  users               users                 @relation(fields: [affiliate_user_id], references: [id], onDelete: Cascade)
  orders              orders?               @relation(fields: [associated_order_id], references: [id])

  @@index([affiliate_user_id], map: "idx_affiliate_stats_user")
  @@index([created_at], map: "idx_affiliate_stats_created")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model cart_items {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  product_id String   @db.Uuid
  quantity   Int
  added_at   DateTime @default(now()) @db.Timestamptz(6)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id])
  @@index([user_id], map: "idx_cart_items_user")
  @@index([added_at], map: "idx_cart_items_added")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model categories {
  id                 String               @id @default(uuid()) @db.Uuid
  parent_category_id String?              @db.Uuid
  name               String               @db.VarChar(100)
  slug               String               @unique @db.VarChar(120)
  description        String?              @db.Text
  categories         categories?          @relation("categoriesTocategories", fields: [parent_category_id], references: [id])
  other_categories   categories[]         @relation("categoriesTocategories")
  post_categories    post_categories[]
  product_categories product_categories[]
  menu_items         menu_items[]

  @@index([parent_category_id], map: "idx_categories_parent")
  @@index([slug], map: "idx_categories_slug")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model comments {
  id                String     @id @default(uuid()) @db.Uuid
  user_id           String     @db.Uuid
  parent_id         String     @db.Uuid
  parent_comment_id String?    @db.Uuid
  content           String     @db.Text
  created_at        DateTime   @default(now()) @db.Timestamptz(6)
  updated_at        DateTime   @default(now()) @db.Timestamptz(6)
  comments          comments?  @relation("commentsTocomments", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  other_comments    comments[] @relation("commentsTocomments")
  users             users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([parent_id], map: "idx_comments_parent")
  @@index([parent_comment_id], map: "idx_comments_parent_comment")
  @@index([user_id], map: "idx_comments_user")
  @@index([created_at], map: "idx_comments_created")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model conversation_participants {
  conversation_id      String        @db.Uuid
  user_id              String        @db.Uuid
  last_read_message_id String?       @db.Uuid
  joined_at            DateTime      @default(now()) @db.Timestamptz(6)
  conversations        conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  messages             messages?     @relation(fields: [last_read_message_id], references: [id])
  users                users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([conversation_id, user_id])
  @@index([last_read_message_id], map: "idx_conversation_participants_last_read")
  @@index([user_id], map: "idx_conversation_participants_user")
  @@index([joined_at], map: "idx_conversation_participants_joined")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model conversations {
  id                                               String                      @id @default(uuid()) @db.Uuid
  name                                             String?                     @db.VarChar(100)
  type                                             conversation_type_enum      @default(private)
  creator_id                                       String?                     @db.Uuid
  last_message_id                                  String?                     @db.Uuid
  created_at                                       DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at                                       DateTime                    @default(now()) @db.Timestamptz(6)
  conversation_participants                        conversation_participants[]
  users                                            users?                      @relation("conversations_creator_idTousers", fields: [creator_id], references: [id])
  messages_conversations_last_message_idTomessages messages?                   @relation("conversations_last_message_idTomessages", fields: [last_message_id], references: [id])
  messages_messages_conversation_idToconversations messages[]                  @relation("messages_conversation_idToconversations")

  @@index([creator_id], map: "idx_conversations_creator")
  @@index([created_at], map: "idx_conversations_created")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model follows {
  follower_id                       String   @db.Uuid
  following_id                      String   @db.Uuid
  created_at                        DateTime @default(now()) @db.Timestamptz(6)
  users_follows_follower_idTousers  users    @relation("follows_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade)
  users_follows_following_idTousers users    @relation("follows_following_idTousers", fields: [following_id], references: [id], onDelete: Cascade)

  @@id([follower_id, following_id])
  @@index([following_id], map: "idx_follows_following")
  @@index([created_at], map: "idx_follows_created")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model likes {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  target_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, target_id])
  @@index([target_id], map: "idx_likes_target")
  @@index([user_id], map: "idx_likes_user")
  @@index([created_at], map: "idx_likes_created")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model messages {
  id                                                    String                      @id @default(uuid()) @db.Uuid
  conversation_id                                       String                      @db.Uuid
  sender_id                                             String                      @db.Uuid
  content                                               String                      @db.Text
  message_type                                          message_type_enum           @default(text)
  created_at                                            DateTime                    @default(now()) @db.Timestamptz(6)
  conversation_participants                             conversation_participants[]
  conversations_conversations_last_message_idTomessages conversations[]             @relation("conversations_last_message_idTomessages")
  conversations_messages_conversation_idToconversations conversations               @relation("messages_conversation_idToconversations", fields: [conversation_id], references: [id], onDelete: Cascade)
  users                                                 users                       @relation(fields: [sender_id], references: [id])

  @@index([conversation_id], map: "idx_messages_conversation")
  @@index([sender_id], map: "idx_messages_sender")
  @@index([created_at], map: "idx_messages_created")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model notifications {
  id                                      String    @id @default(uuid()) @db.Uuid
  recipient_id                            String    @db.Uuid
  actor_id                                String?   @db.Uuid
  action_type                             String    @db.VarChar(50)
  target_id                               String?   @db.Uuid
  content                                 String?   @db.Text
  is_read                                 Boolean   @default(false)
  read_at                                 DateTime? @db.Timestamptz(6)
  created_at                              DateTime  @default(now()) @db.Timestamptz(6)
  users_notifications_actor_idTousers     users?    @relation("notifications_actor_idTousers", fields: [actor_id], references: [id])
  users_notifications_recipient_idTousers users     @relation("notifications_recipient_idTousers", fields: [recipient_id], references: [id], onDelete: Cascade)

  @@index([actor_id], map: "idx_notifications_actor")
  @@index([recipient_id, is_read, created_at(sort: Desc)], map: "idx_notifications_recipient_read_created")
  @@index([target_id], map: "idx_notifications_target")
  @@index([created_at], map: "idx_notifications_created")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model order_items {
  id                String      @id @default(uuid()) @db.Uuid
  order_id          String      @db.Uuid
  product_id        String      @db.Uuid
  quantity          Int
  price_at_purchase Decimal     @db.Decimal(12, 2)
  product_name      String      @db.VarChar(255)
  created_at        DateTime    @default(now()) @db.Timestamptz(6)
  order             orders      @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product           products    @relation(fields: [product_id], references: [id])
  menu_item_id      String?     @db.Uuid
  menu_item         menu_items? @relation(fields: [menu_item_id], references: [id])

  @@index([order_id], map: "idx_order_items_order")
  @@index([product_id], map: "idx_order_items_product")
  @@index([created_at], map: "idx_order_items_created")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model order_status_history {
  id                 String            @id @default(uuid()) @db.Uuid
  order_id           String            @db.Uuid
  status             order_status_enum
  changed_by_user_id String?           @db.Uuid
  notes              String?           @db.Text
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  users              users?            @relation(fields: [changed_by_user_id], references: [id])
  orders             orders            @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id], map: "idx_order_status_history_order")
  @@index([created_at], map: "idx_order_status_history_created")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model orders {
  id                                              String                 @id @default(uuid()) @db.Uuid
  user_id                                         String                 @db.Uuid
  order_code                                      String                 @unique @db.VarChar(20)
  total_amount                                    Decimal                @db.Decimal(14, 2)
  shipping_fee                                    Decimal                @default(0) @db.Decimal(10, 2)
  discount_amount                                 Decimal                @default(0) @db.Decimal(10, 2)
  final_amount                                    Decimal                @db.Decimal(14, 2)
  shipping_address_id                             String?                @db.Uuid
  billing_address_id                              String?                @db.Uuid
  status                                          order_status_enum      @default(pending)
  payment_method                                  String?                @db.VarChar(50)
  payment_status                                  payment_status_enum    @default(pending)
  delivery_person_id                              String?                @db.Uuid
  notes                                           String?                @db.Text
  affiliate_user_id                               String?                @db.Uuid
  created_at                                      DateTime               @default(now()) @db.Timestamptz(6)
  updated_at                                      DateTime               @default(now()) @db.Timestamptz(6)
  affiliate_stats                                 affiliate_stats?
  order_items                                     order_items[]
  order_status_history                            order_status_history[]
  users_orders_affiliate_user_idTousers           users?                 @relation("orders_affiliate_user_idTousers", fields: [affiliate_user_id], references: [id])
  addresses_orders_billing_address_idToaddresses  addresses?             @relation("orders_billing_address_idToaddresses", fields: [billing_address_id], references: [id])
  users_orders_delivery_person_idTousers          users?                 @relation("orders_delivery_person_idTousers", fields: [delivery_person_id], references: [id])
  addresses_orders_shipping_address_idToaddresses addresses?             @relation("orders_shipping_address_idToaddresses", fields: [shipping_address_id], references: [id])
  users_orders_user_idTousers                     users                  @relation("orders_user_idTousers", fields: [user_id], references: [id])
  voucher_usages                                  voucher_usages[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model post_categories {
  post_id     String     @db.Uuid
  category_id String     @db.Uuid
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  post        posts      @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([post_id, category_id])
  @@index([category_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model post_tags {
  post_id String @db.Uuid
  tag_id  String @db.Uuid
  post    posts  @relation(fields: [post_id], references: [id], onDelete: Cascade)
  tags    tags   @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([post_id, tag_id])
  @@index([tag_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model posts {
  id              String            @id @default(uuid()) @db.Uuid
  author_id       String            @db.Uuid
  post_type       post_type_enum    @default(social)
  title           String?           @db.VarChar(255)
  content         String
  media_url       String?
  visibility      visibility_enum   @default(public)
  allow_comments  Boolean           @default(true)
  slug            String?           @unique @db.VarChar(255)
  is_published    Boolean           @default(true)
  published_at    DateTime?         @db.Timestamptz(6)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  post_categories post_categories[]
  post_tags       post_tags[]
  users           users             @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([author_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_categories {
  product_id  String     @db.Uuid
  category_id String     @db.Uuid
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  product     products   @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@id([product_id, category_id])
  @@index([category_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_images {
  id            String   @id @default(uuid()) @db.Uuid
  product_id    String   @db.Uuid
  image_url     String
  alt_text      String?  @db.VarChar(255)
  display_order Int      @default(0)
  product       products @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_tags {
  product_id String   @db.Uuid
  tag_id     String   @db.Uuid
  product    products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  tags       tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([product_id, tag_id])
  @@index([tag_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model products {
  id                 String               @id @default(uuid()) @db.Uuid
  seller_id          String               @db.Uuid
  name               String               @db.VarChar(255)
  description        String?
  sku                String?              @unique @db.VarChar(100)
  price              Decimal              @db.Decimal(12, 2)
  stock_quantity     Int                  @default(0)
  thumbnail_url      String?
  is_published       Boolean              @default(false)
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  cart_items         cart_items[]
  order_items        order_items[]
  product_categories product_categories[]
  product_images     product_images[]
  product_tags       product_tags[]
  users              users                @relation(fields: [seller_id], references: [id])

  @@index([name])
  @@index([seller_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model projects {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(255)
  description String?
  owner_id    String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  users       users    @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
  tasks       tasks[]

  @@index([owner_id], map: "idx_projects_owner_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model restaurant_chains {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @db.VarChar(100)
  description String?
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime      @default(now()) @db.Timestamptz(6)
  restaurants restaurants[]
  owner_id    String        @db.Uuid
  users       users         @relation("restaurant_chains_owner_idTousers", fields: [owner_id], references: [id])

  @@index([owner_id], map: "idx_restaurant_chains_owner")
}

/// Tổ chức/chuỗi lớn (organization)
model organizations {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @db.VarChar(100)
  code        String        @unique @db.VarChar(30)
  description String?
  owner_id    String        @db.Uuid
  owner       users         @relation("organizations_owner_idTousers", fields: [owner_id], references: [id])
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime      @default(now()) @db.Timestamptz(6)
  restaurants restaurants[]

  @@index([owner_id], map: "idx_organizations_owner")
}

model restaurants {
  id                    String              @id @default(uuid()) @db.Uuid
  organization_id       String              @db.Uuid
  chain_id              String?             @db.Uuid
  code                  String              @db.VarChar(30)
  name                  String              @db.VarChar(100)
  address               String              @db.VarChar(255)
  phone_number          String?             @db.VarChar(20)
  description           String?
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  updated_at            DateTime            @default(now()) @db.Timestamptz(6)
  organizations         organizations       @relation(fields: [organization_id], references: [id])
  restaurant_chains     restaurant_chains?  @relation(fields: [chain_id], references: [id])
  menus                 menus[]
  manager_id            String?             @db.Uuid
  manager               users?              @relation("restaurants_manager_idTousers", fields: [manager_id], references: [id])
  inventory_items       inventory_items[]
  vouchers              vouchers[]
  logistics_orders_from logistics_orders[]  @relation("logistics_orders_from")
  logistics_orders_to   logistics_orders[]  @relation("logistics_orders_to")
  restaurant_staffs     restaurant_staffs[]

  @@unique([organization_id, code], map: "uq_restaurant_org_code")
  @@index([organization_id], map: "idx_restaurants_organization")
  @@index([chain_id], map: "idx_restaurants_chain")
  @@index([manager_id], map: "idx_restaurants_manager")
}

/// Menu của nhà hàng
model menus {
  id            String       @id @default(uuid()) @db.Uuid
  restaurant_id String       @db.Uuid
  name          String       @db.VarChar(100)
  description   String?
  is_active     Boolean      @default(true)
  created_at    DateTime     @default(now()) @db.Timestamptz(6)
  updated_at    DateTime     @default(now()) @db.Timestamptz(6)
  restaurants   restaurants  @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  menu_items    menu_items[]

  @@index([restaurant_id], map: "idx_menus_restaurant")
}

/// Món ăn/đồ uống trong menu
model menu_items {
  id           String        @id @default(uuid()) @db.Uuid
  menu_id      String        @db.Uuid
  name         String        @db.VarChar(255)
  description  String?
  price        Decimal       @db.Decimal(12, 2)
  image_url    String?
  is_available Boolean       @default(true)
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime      @default(now()) @db.Timestamptz(6)
  menus        menus         @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  order_items  order_items[]
  category_id  String?       @db.Uuid
  categories   categories?   @relation(fields: [category_id], references: [id])
  recipes      recipes[]

  @@index([menu_id], map: "idx_menu_items_menu")
  @@index([category_id], map: "idx_menu_items_category")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model restaurant_staffs {
  id            String                     @id @default(uuid()) @db.Uuid
  restaurant_id String                     @db.Uuid
  user_id       String                     @db.Uuid
  role          restaurant_staff_role_enum
  status        staff_status_enum          @default(active)
  joined_at     DateTime                   @default(now()) @db.Timestamptz(6)
  left_at       DateTime?
  restaurants   restaurants                @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  users         users                      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([restaurant_id, user_id], map: "uq_restaurant_staff")
  @@index([user_id], map: "idx_restaurant_staff_user")
  @@index([role], map: "idx_restaurant_staff_role")
}

enum restaurant_staff_role_enum {
  staff
  manager
  chef
  cashier
  security
  cleaner
}

enum staff_status_enum {
  active
  inactive
  suspended
  left
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model roles {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @unique @db.VarChar(50)
  description String?
  user_roles  user_roles[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tags {
  id           String         @id @default(uuid()) @db.Uuid
  name         String         @unique @db.VarChar(50)
  slug         String         @unique @db.VarChar(60)
  post_tags    post_tags[]
  product_tags product_tags[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model task_assignments {
  task_id String @db.Uuid
  user_id String @db.Uuid
  tasks   tasks  @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([task_id, user_id])
  @@index([user_id], map: "idx_task_assignments_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tasks {
  id                             String             @id @default(uuid()) @db.Uuid
  creator_id                     String             @db.Uuid
  assignee_id                    String?            @db.Uuid
  project_id                     String?            @db.Uuid
  title                          String             @db.VarChar(255)
  description                    String?
  status                         task_status_enum   @default(to_do)
  priority                       task_priority_enum @default(medium)
  due_date                       DateTime?          @db.Date
  created_at                     DateTime           @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime           @default(now()) @db.Timestamptz(6)
  completed_at                   DateTime?          @db.Timestamptz(6)
  task_assignments               task_assignments[]
  users_tasks_assignee_idTousers users?             @relation("tasks_assignee_idTousers", fields: [assignee_id], references: [id], onUpdate: NoAction)
  users_tasks_creator_idTousers  users              @relation("tasks_creator_idTousers", fields: [creator_id], references: [id], onUpdate: NoAction)
  projects                       projects?          @relation(fields: [project_id], references: [id], onUpdate: NoAction)

  @@index([assignee_id], map: "idx_tasks_assignee_id")
  @@index([creator_id], map: "idx_tasks_creator_id")
  @@index([project_id], map: "idx_tasks_project_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_roles {
  user_id String @db.Uuid
  role_id String @db.Uuid
  roles   roles  @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
  @@index([role_id], map: "idx_user_roles_role_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                           String                      @id @default(uuid()) @db.Uuid
  username                     String                      @unique @db.VarChar(50)
  email                        String                      @unique @db.VarChar(255)
  password_hash                String                      @db.VarChar(255)
  first_name                   String                      @db.VarChar(100)
  last_name                    String                      @db.VarChar(100)
  full_name                    String                      @db.VarChar(200)
  phone_code                   String?                     @db.VarChar(8)
  phone_number                 String?                     @db.VarChar(20)
  avatar_url                   String?                     @db.VarChar(255)
  cover_url                    String?                     @db.VarChar(255)
  // Verification & MFA
  email_verified_at            DateTime?                   @db.Timestamptz(6)
  phone_verified_at            DateTime?                   @db.Timestamptz(6)
  mfa_enabled                  Boolean                     @default(false)
  mfa_secret                   String?                     @db.VarChar(64)
  bio                          String?                     @db.Text
  status                       user_status_enum            @default(active)
  role                         user_role_enum              @default(user)
  created_at                   DateTime                    @default(now())
  updated_at                   DateTime                    @updatedAt
  // --- RELATIONS ---
  addresses                    addresses[]
  affiliate_stats              affiliate_stats[]
  cart_items                   cart_items[]
  comments                     comments[]
  conversation_participants    conversation_participants[]
  conversations_created        conversations[]             @relation("conversations_creator_idTousers")
  follows_follower             follows[]                   @relation("follows_follower_idTousers")
  follows_following            follows[]                   @relation("follows_following_idTousers")
  likes                        likes[]
  messages_sent                messages[]
  notifications_actor          notifications[]             @relation("notifications_actor_idTousers")
  notifications_recipient      notifications[]             @relation("notifications_recipient_idTousers")
  order_status_history_changed order_status_history[]
  orders_affiliate             orders[]                    @relation("orders_affiliate_user_idTousers")
  orders_delivery              orders[]                    @relation("orders_delivery_person_idTousers")
  orders_user                  orders[]                    @relation("orders_user_idTousers")
  posts                        posts[]
  products                     products[]
  projects_owned               projects[]
  sessions                     sessions[]
  task_assignments             task_assignments[]
  tasks_assignee               tasks[]                     @relation("tasks_assignee_idTousers")
  tasks_creator                tasks[]                     @relation("tasks_creator_idTousers")
  user_roles                   user_roles[]
  // --- NEW RELATIONS ---
  voucher_usages               voucher_usages[]
  // --- RELATIONS FOR RESTAURANT/ORGANIZATION ---
  restaurant_chains_owned      restaurant_chains[]         @relation("restaurant_chains_owner_idTousers")
  organizations_owned          organizations[]             @relation("organizations_owner_idTousers")
  restaurants_managed          restaurants[]               @relation("restaurants_manager_idTousers")
  restaurant_staffs            restaurant_staffs[]
  verification_tokens          verification_tokens[]
  verification_email_logs      verification_email_logs[]
}

/// Verification tokens for email / phone / MFA challenges
model verification_tokens {
  id          String                       @id @default(uuid()) @db.Uuid
  user_id     String                       @db.Uuid
  token_hash  String                       @db.Text
  type        verification_token_type_enum
  context     String?                      @db.VarChar(50)
  expires_at  DateTime                     @db.Timestamptz(6)
  consumed_at DateTime?                    @db.Timestamptz(6)
  created_at  DateTime                     @default(now()) @db.Timestamptz(6)
  users       users                        @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "idx_verification_tokens_user")
  @@index([type], map: "idx_verification_tokens_type")
}

/// Log each email verification send attempt
model verification_email_logs {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String?  @db.Uuid
  email      String   @db.VarChar(255)
  ip_address String?  @db.VarChar(45)
  user_agent String?  @db.VarChar(255)
  status     String   @db.VarChar(30) // sent | cooldown | rate_limited | error
  note       String?  @db.Text
  created_at DateTime @default(now()) @db.Timestamptz(6)
  users      users?   @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([email], map: "idx_verif_email_logs_email")
  @@index([created_at], map: "idx_verif_email_logs_created")
}

/// Nguyên vật liệu/kho của nhà hàng
model inventory_items {
  id                     String                   @id @default(uuid()) @db.Uuid
  restaurant_id          String                   @db.Uuid
  name                   String                   @db.VarChar(100)
  description            String?
  unit                   String                   @db.VarChar(20) // đơn vị: kg, lít, cái...
  quantity               Decimal                  @db.Decimal(12, 2)
  min_quantity           Decimal?                 @db.Decimal(12, 2)
  max_quantity           Decimal?                 @db.Decimal(12, 2)
  created_at             DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at             DateTime                 @default(now()) @db.Timestamptz(6)
  restaurants            restaurants              @relation(fields: [restaurant_id], references: [id])
  inventory_transactions inventory_transactions[]
  recipe_ingredients     recipe_ingredients[]
  logistics_order_items  logistics_order_items[]

  @@index([restaurant_id], map: "idx_inventory_items_restaurant")
}

/// Lịch sử nhập/xuất kho
model inventory_transactions {
  id                String                          @id @default(uuid()) @db.Uuid
  inventory_item_id String                          @db.Uuid
  type              inventory_transaction_type_enum
  quantity          Decimal                         @db.Decimal(12, 2)
  note              String?
  created_at        DateTime                        @default(now()) @db.Timestamptz(6)
  inventory_items   inventory_items                 @relation(fields: [inventory_item_id], references: [id])

  @@index([inventory_item_id], map: "idx_inventory_transactions_item")
}

/// Công thức chế biến món ăn
model recipes {
  id                 String               @id @default(uuid()) @db.Uuid
  menu_item_id       String               @db.Uuid
  name               String               @db.VarChar(100)
  description        String?
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  menu_items         menu_items           @relation(fields: [menu_item_id], references: [id])
  recipe_ingredients recipe_ingredients[]

  @@index([menu_item_id], map: "idx_recipes_menu_item")
}

/// Thành phần nguyên liệu cho công thức
model recipe_ingredients {
  id                String          @id @default(uuid()) @db.Uuid
  recipe_id         String          @db.Uuid
  inventory_item_id String          @db.Uuid
  quantity          Decimal         @db.Decimal(12, 2)
  unit              String          @db.VarChar(20)
  recipes           recipes         @relation(fields: [recipe_id], references: [id])
  inventory_items   inventory_items @relation(fields: [inventory_item_id], references: [id])

  @@index([recipe_id], map: "idx_recipe_ingredients_recipe")
  @@index([inventory_item_id], map: "idx_recipe_ingredients_item")
}

/// Voucher/mã giảm giá
model vouchers {
  id              String                     @id @default(uuid()) @db.Uuid
  code            String                     @unique @db.VarChar(50)
  description     String?
  discount_type   voucher_discount_type_enum
  discount_value  Decimal                    @db.Decimal(12, 2)
  min_order_value Decimal?                   @db.Decimal(12, 2)
  max_discount    Decimal?                   @db.Decimal(12, 2)
  start_date      DateTime                   @db.Timestamptz(6)
  end_date        DateTime                   @db.Timestamptz(6)
  usage_limit     Int?
  used_count      Int                        @default(0)
  is_active       Boolean                    @default(true)
  restaurant_id   String?                    @db.Uuid
  restaurants     restaurants?               @relation(fields: [restaurant_id], references: [id])
  voucher_usages  voucher_usages[]

  @@index([restaurant_id], map: "idx_vouchers_restaurant")
}

/// Lịch sử sử dụng voucher
model voucher_usages {
  id         String   @id @default(uuid()) @db.Uuid
  voucher_id String   @db.Uuid
  user_id    String   @db.Uuid
  order_id   String?  @db.Uuid
  used_at    DateTime @default(now()) @db.Timestamptz(6)
  vouchers   vouchers @relation(fields: [voucher_id], references: [id])
  users      users    @relation(fields: [user_id], references: [id])
  orders     orders?  @relation(fields: [order_id], references: [id])

  @@index([voucher_id], map: "idx_voucher_usages_voucher")
  @@index([user_id], map: "idx_voucher_usages_user")
}

/// Đơn vận chuyển nguyên vật liệu giữa các nhà hàng/kho
model logistics_orders {
  id                    String                      @id @default(uuid()) @db.Uuid
  from_restaurant_id    String                      @db.Uuid
  to_restaurant_id      String                      @db.Uuid
  status                logistics_order_status_enum @default(pending)
  created_at            DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at            DateTime                    @default(now()) @db.Timestamptz(6)
  logistics_order_items logistics_order_items[]
  from_restaurant       restaurants                 @relation("logistics_orders_from", fields: [from_restaurant_id], references: [id])
  to_restaurant         restaurants                 @relation("logistics_orders_to", fields: [to_restaurant_id], references: [id])

  @@index([from_restaurant_id], map: "idx_logistics_orders_from")
  @@index([to_restaurant_id], map: "idx_logistics_orders_to")
}

/// Chi tiết từng nguyên vật liệu trong đơn vận chuyển
model logistics_order_items {
  id                 String           @id @default(uuid()) @db.Uuid
  logistics_order_id String           @db.Uuid
  inventory_item_id  String           @db.Uuid
  quantity           Decimal          @db.Decimal(12, 2)
  logistics_orders   logistics_orders @relation(fields: [logistics_order_id], references: [id])
  inventory_items    inventory_items  @relation(fields: [inventory_item_id], references: [id])

  @@index([logistics_order_id], map: "idx_logistics_order_items_order")
  @@index([inventory_item_id], map: "idx_logistics_order_items_item")
}

/// Phiên đăng nhập/session cho xác thực JWT
model sessions {
  id                     String    @id @default(uuid()) @db.Uuid
  user_id                String    @db.Uuid
  is_valid               Boolean   @default(true)
  expires_at             DateTime  @db.Timestamptz(6)
  created_at             DateTime  @default(now()) @db.Timestamptz(6)
  updated_at             DateTime  @default(now()) @db.Timestamptz(6)
  token                  String?   @db.Text
  // --- Security / rotation metadata ---
  refresh_token_hash     String?   @db.Text
  revoked_at             DateTime? @db.Timestamptz(6)
  replaced_by_session_id String?   @db.Uuid
  // --- Device / context metadata ---
  ip_address             String?   @db.VarChar(45)
  user_agent             String?   @db.VarChar(255)
  last_accessed_at       DateTime? @db.Timestamptz(6)
  users                  users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "idx_sessions_user")
  @@index([expires_at], map: "idx_sessions_expires")
  @@index([user_id, is_valid], map: "idx_sessions_user_valid")
}

/// --- ENUMS (snake_case) ---
enum affiliate_status_enum {
  pending
  approved
  rejected
}

enum conversation_type_enum {
  private
  group
}

enum message_type_enum {
  text
  image
  video
  file
}

enum order_status_enum {
  pending
  confirmed
  preparing
  delivering
  completed
  cancelled
}

enum payment_status_enum {
  pending
  completed
  failed
}

enum post_type_enum {
  social
  blog
}

enum task_priority_enum {
  low
  medium
  high
}

enum verification_token_type_enum {
  email_verification
  phone_verification
  mfa_challenge
  password_reset
}

enum task_status_enum {
  to_do
  in_progress
  completed
  on_hold
  cancelled
}

enum user_role_enum {
  user
  admin
  moderator
}

enum user_status_enum {
  active
  inactive
  banned
}

enum visibility_enum {
  public
  followers
  private
}

enum inventory_transaction_type_enum {
  import
  export
  adjust
}

enum voucher_discount_type_enum {
  percent
  fixed
}

enum logistics_order_status_enum {
  pending
  in_transit
  completed
  cancelled
}
