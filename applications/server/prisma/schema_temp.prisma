generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("EXPRESS_DATABASE_URL")
  directUrl = env("EXPRESS_DIRECT_URL")
}

// ================================
// üè¢ ORGANIZATION & USER MANAGEMENT
// ================================

/// Customer addresses for delivery
model addresses {
  id              String   @id @default(uuid()) @db.Uuid
  user_id         String   @db.Uuid
  recipient_name  String   @db.VarChar(100)
  recipient_phone String   @db.VarChar(20)
  street_address  String   @db.VarChar(255)
  ward            String?  @db.VarChar(100)
  district        String   @db.VarChar(100)
  city            String   @db.VarChar(100)
  country         String   @default("Vietnam") @db.VarChar(100)
  is_default      Boolean  @default(false)
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @updatedAt @db.Timestamptz(6)
  users           users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  orders          orders[]

  @@index([user_id], map: "idx_addresses_user")
  @@index([is_default], map: "idx_addresses_default")
}

/// Categories for menu items
model categories {
  id               String       @id @default(uuid()) @db.Uuid
  parent_id        String?      @db.Uuid
  name             String       @db.VarChar(100)
  slug             String       @unique @db.VarChar(120)
  description      String?      @db.Text
  image_url        String?      @db.VarChar(255)
  display_order    Int          @default(0)
  is_active        Boolean      @default(true)
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  updated_at       DateTime     @default(now()) @db.Timestamptz(6)
  parent_category  categories?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  child_categories categories[] @relation("CategoryHierarchy")
  menu_items       menu_items[]

  @@index([parent_id], map: "idx_categories_parent")
  @@index([slug], map: "idx_categories_slug")
  @@index([is_active], map: "idx_categories_active")
}

// ================================
// üí¨ REAL-TIME COMMUNICATION
// ================================

/// Real-time conversations for customer support
model conversations {
  id              String                      @id @default(uuid()) @db.Uuid
  restaurant_id   String?                     @db.Uuid
  customer_id     String?                     @db.Uuid
  staff_id        String?                     @db.Uuid
  type            conversation_type_enum      @default(support)
  status          conversation_status_enum    @default(active)
  title           String?                     @db.VarChar(255)
  last_message_at DateTime?                   @db.Timestamptz(6)
  created_at      DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at      DateTime                    @default(now()) @db.Timestamptz(6)
  restaurants     restaurants?                @relation(fields: [restaurant_id], references: [id])
  customers       users?                      @relation("conversations_customer", fields: [customer_id], references: [id])
  staff           users?                      @relation("conversations_staff", fields: [staff_id], references: [id])
  messages        messages[]

  @@index([restaurant_id], map: "idx_conversations_restaurant")
  @@index([customer_id], map: "idx_conversations_customer")
  @@index([staff_id], map: "idx_conversations_staff")
  @@index([status], map: "idx_conversations_status")
}

/// Messages in conversations
model messages {
  id              String        @id @default(uuid()) @db.Uuid
  conversation_id String        @db.Uuid
  sender_id       String        @db.Uuid
  content         String        @db.Text
  message_type    message_type_enum @default(text)
  attachments     String[]      // URLs of attached files
  is_read         Boolean       @default(false)
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  senders         users         @relation(fields: [sender_id], references: [id])

  @@index([conversation_id], map: "idx_messages_conversation")
  @@index([sender_id], map: "idx_messages_sender")
  @@index([created_at], map: "idx_messages_created")
}

// ================================
// üè¢ ORGANIZATION HIERARCHY
// ================================

/// Top-level organization (company)
model organizations {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @db.VarChar(100)
  code        String        @unique @db.VarChar(30)
  description String?       @db.Text
  logo_url    String?       @db.VarChar(255)
  owner_id    String        @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime      @default(now()) @db.Timestamptz(6)
  owner       users         @relation("organizations_owner", fields: [owner_id], references: [id])
  chains      restaurant_chains[]
  restaurants restaurants[]

  @@index([owner_id], map: "idx_organizations_owner")
  @@index([code], map: "idx_organizations_code")
}

/// Restaurant chains within organization
model restaurant_chains {
  id              String        @id @default(uuid()) @db.Uuid
  organization_id String        @db.Uuid
  name            String        @db.VarChar(100)
  description     String?       @db.Text
  logo_url        String?       @db.VarChar(255)
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime      @default(now()) @db.Timestamptz(6)
  organizations   organizations @relation(fields: [organization_id], references: [id])
  restaurants     restaurants[]

  @@index([organization_id], map: "idx_restaurant_chains_organization")
}

/// Individual restaurants
model restaurants {
  id                String              @id @default(uuid()) @db.Uuid
  organization_id   String              @db.Uuid
  chain_id          String?             @db.Uuid
  code              String              @db.VarChar(30)
  name              String              @db.VarChar(100)
  address           String              @db.VarChar(255)
  phone_number      String?             @db.VarChar(20)
  email             String?             @db.VarChar(255)
  description       String?             @db.Text
  logo_url          String?             @db.VarChar(255)
  cover_url         String?             @db.VarChar(255)
  opening_hours     Json?               // {"mon": {"open": "08:00", "close": "22:00"}, ...}
  status            restaurant_status_enum @default(active)
  manager_id        String?             @db.Uuid
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  updated_at        DateTime            @default(now()) @db.Timestamptz(6)
  organizations     organizations       @relation(fields: [organization_id], references: [id])
  chains            restaurant_chains?  @relation(fields: [chain_id], references: [id])
  manager           users?              @relation("restaurants_manager", fields: [manager_id], references: [id])
  
  // Restaurant-specific relations
  tables            tables[]
  menus             menus[]
  staffs            restaurant_staffs[]
  inventory_items   inventory_items[]
  vouchers          vouchers[]
  promotions        promotions[]
  reviews           reviews[]
  revenue_reports   revenue_reports[]
  staff_schedules   staff_schedules[]
  staff_attendance  staff_attendance[]
  conversations     conversations[]
  orders            orders[]

  @@unique([organization_id, code], map: "uq_restaurant_org_code")
  @@index([organization_id], map: "idx_restaurants_organization")
  @@index([chain_id], map: "idx_restaurants_chain")
  @@index([manager_id], map: "idx_restaurants_manager")
  @@index([status], map: "idx_restaurants_status")
}

// ================================
// üçΩÔ∏è MENU MANAGEMENT
// ================================

/// Restaurant menus
model menus {
  id            String       @id @default(uuid()) @db.Uuid
  restaurant_id String       @db.Uuid
  name          String       @db.VarChar(100)
  description   String?      @db.Text
  image_url     String?      @db.VarChar(255)
  is_active     Boolean      @default(true)
  display_order Int          @default(0)
  created_at    DateTime     @default(now()) @db.Timestamptz(6)
  updated_at    DateTime     @default(now()) @db.Timestamptz(6)
  restaurants   restaurants  @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  menu_items    menu_items[]

  @@index([restaurant_id], map: "idx_menus_restaurant")
  @@index([is_active], map: "idx_menus_active")
}

/// Menu items (dishes/drinks)
model menu_items {
  id              String        @id @default(uuid()) @db.Uuid
  menu_id         String        @db.Uuid
  category_id     String?       @db.Uuid
  name            String        @db.VarChar(255)
  description     String?       @db.Text
  price           Decimal       @db.Decimal(12, 2)
  image_url       String?       @db.VarChar(255)
  is_available    Boolean       @default(true)
  is_featured     Boolean       @default(false)
  preparation_time Int?         // minutes
  calories        Int?
  allergens       String[]      // ["gluten", "dairy", "nuts"]
  dietary_info    String[]      // ["vegetarian", "vegan", "halal"]
  display_order   Int           @default(0)
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime      @default(now()) @db.Timestamptz(6)
  menus           menus         @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  categories      categories?   @relation(fields: [category_id], references: [id])
  
  // Related data
  cart_items      cart_items[]
  order_items     order_items[]
  recipes         recipes[]
  reviews         reviews[]

  @@index([menu_id], map: "idx_menu_items_menu")
  @@index([category_id], map: "idx_menu_items_category")
  @@index([is_available], map: "idx_menu_items_available")
  @@index([is_featured], map: "idx_menu_items_featured")
  @@index([price], map: "idx_menu_items_price")
}

// ================================
// ü™ë TABLE & RESERVATION MANAGEMENT
// ================================

/// Restaurant tables
model tables {
  id            String            @id @default(uuid()) @db.Uuid
  restaurant_id String            @db.Uuid
  table_number  String            @db.VarChar(20)
  capacity      Int               @default(4)
  location      String?           @db.VarChar(50) // "T·∫ßng 1", "Ngo√†i tr·ªùi"...
  status        table_status_enum @default(available)
  qr_code       String?           @unique @db.VarChar(255)
  created_at    DateTime          @default(now()) @db.Timestamptz(6)
  updated_at    DateTime          @default(now()) @db.Timestamptz(6)
  restaurants   restaurants       @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  reservations  reservations[]
  table_orders  table_orders[]

  @@unique([restaurant_id, table_number])
  @@index([restaurant_id], map: "idx_tables_restaurant")
  @@index([status], map: "idx_tables_status")
}

/// Table reservations
model reservations {
  id               String                 @id @default(uuid()) @db.Uuid
  table_id         String                 @db.Uuid
  customer_id      String?                @db.Uuid
  customer_name    String                 @db.VarChar(100)
  customer_phone   String                 @db.VarChar(20)
  customer_email   String?                @db.VarChar(255)
  party_size       Int
  reservation_date DateTime               @db.Timestamptz(6)
  duration_hours   Decimal                @default(2) @db.Decimal(4, 2)
  status           reservation_status_enum @default(pending)
  special_requests String?                @db.Text
  notes            String?                @db.Text
  created_at       DateTime               @default(now()) @db.Timestamptz(6)
  updated_at       DateTime               @default(now()) @db.Timestamptz(6)
  tables           tables                 @relation(fields: [table_id], references: [id])
  customers        users?                 @relation("reservations_customer", fields: [customer_id], references: [id])

  @@index([table_id], map: "idx_reservations_table")
  @@index([customer_id], map: "idx_reservations_customer")
  @@index([reservation_date], map: "idx_reservations_date")
  @@index([status], map: "idx_reservations_status")
}

/// Table ordering sessions
model table_orders {
  id            String                   @id @default(uuid()) @db.Uuid
  table_id      String                   @db.Uuid
  order_id      String?                  @db.Uuid
  session_code  String                   @unique @db.VarChar(20)
  status        table_order_status_enum  @default(active)
  opened_at     DateTime                 @default(now()) @db.Timestamptz(6)
  closed_at     DateTime?                @db.Timestamptz(6)
  total_amount  Decimal?                 @db.Decimal(14, 2)
  staff_id      String?                  @db.Uuid
  tables        tables                   @relation(fields: [table_id], references: [id])
  orders        orders?                  @relation(fields: [order_id], references: [id])
  staff         users?                   @relation("table_orders_staff", fields: [staff_id], references: [id])

  @@index([table_id], map: "idx_table_orders_table")
  @@index([session_code], map: "idx_table_orders_session")
  @@index([status], map: "idx_table_orders_status")
}

// ================================
// üõí ORDER MANAGEMENT
// ================================

/// Customer orders
model orders {
  id              String               @id @default(uuid()) @db.Uuid
  restaurant_id   String               @db.Uuid
  customer_id     String               @db.Uuid
  address_id      String?              @db.Uuid
  order_code      String               @unique @db.VarChar(20)
  order_type      order_type_enum      @default(dine_in)
  total_amount    Decimal              @db.Decimal(14, 2)
  delivery_fee    Decimal              @default(0) @db.Decimal(10, 2)
  discount_amount Decimal              @default(0) @db.Decimal(10, 2)
  tax_amount      Decimal              @default(0) @db.Decimal(10, 2)
  final_amount    Decimal              @db.Decimal(14, 2)
  status          order_status_enum    @default(pending)
  payment_status  payment_status_enum  @default(pending)
  notes           String?              @db.Text
  estimated_time  Int?                 // minutes
  created_at      DateTime             @default(now()) @db.Timestamptz(6)
  updated_at      DateTime             @default(now()) @db.Timestamptz(6)
  
  restaurants     restaurants          @relation(fields: [restaurant_id], references: [id])
  customers       users                @relation("orders_customer", fields: [customer_id], references: [id])
  addresses       addresses?           @relation(fields: [address_id], references: [id])
  
  // Related data
  order_items     order_items[]
  order_history   order_status_history[]
  payments        payments[]
  reviews         reviews[]
  voucher_usages  voucher_usages[]
  table_orders    table_orders[]

  @@index([restaurant_id], map: "idx_orders_restaurant")
  @@index([customer_id], map: "idx_orders_customer")
  @@index([status], map: "idx_orders_status")
  @@index([order_type], map: "idx_orders_type")
  @@index([created_at], map: "idx_orders_created")
}

/// Order items details
model order_items {
  id                   String              @id @default(uuid()) @db.Uuid
  order_id             String              @db.Uuid
  menu_item_id         String              @db.Uuid
  quantity             Int
  unit_price           Decimal             @db.Decimal(12, 2)
  total_price          Decimal             @db.Decimal(12, 2)
  special_instructions String?             @db.Text
  cooking_status       cooking_status_enum @default(pending)
  prepared_at          DateTime?           @db.Timestamptz(6)
  served_at            DateTime?           @db.Timestamptz(6)
  created_at           DateTime            @default(now()) @db.Timestamptz(6)
  orders               orders              @relation(fields: [order_id], references: [id], onDelete: Cascade)
  menu_items           menu_items          @relation(fields: [menu_item_id], references: [id])

  @@index([order_id], map: "idx_order_items_order")
  @@index([menu_item_id], map: "idx_order_items_menu_item")
  @@index([cooking_status], map: "idx_order_items_cooking_status")
}

/// Order status change history
model order_status_history {
  id                 String            @id @default(uuid()) @db.Uuid
  order_id           String            @db.Uuid
  status             order_status_enum
  changed_by_user_id String?           @db.Uuid
  notes              String?           @db.Text
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  orders             orders            @relation(fields: [order_id], references: [id], onDelete: Cascade)
  users              users?            @relation(fields: [changed_by_user_id], references: [id])

  @@index([order_id], map: "idx_order_status_history_order")
  @@index([created_at], map: "idx_order_status_history_created")
}

// ================================
// üí≥ PAYMENT MANAGEMENT
// ================================

/// Payment transactions
model payments {
  id               String                     @id @default(uuid()) @db.Uuid
  order_id         String                     @db.Uuid
  amount           Decimal                    @db.Decimal(14, 2)
  method           payment_method_enum
  status           payment_status_enum        @default(pending)
  provider         String?                    @db.VarChar(50) // "momo", "zalopay", "vnpay"
  transaction_id   String?                    @unique @db.VarChar(255)
  gateway_response Json?
  processed_at     DateTime?                  @db.Timestamptz(6)
  created_at       DateTime                   @default(now()) @db.Timestamptz(6)
  updated_at       DateTime                   @default(now()) @db.Timestamptz(6)
  orders           orders                     @relation(fields: [order_id], references: [id])

  @@index([order_id], map: "idx_payments_order")
  @@index([status], map: "idx_payments_status")
  @@index([method], map: "idx_payments_method")
  @@index([transaction_id], map: "idx_payments_transaction")
}

// ================================
// üë®‚Äçüíº STAFF MANAGEMENT
// ================================

/// Restaurant staff assignments
model restaurant_staffs {
  id            String                     @id @default(uuid()) @db.Uuid
  restaurant_id String                     @db.Uuid
  user_id       String                     @db.Uuid
  role          restaurant_staff_role_enum
  status        staff_status_enum          @default(active)
  hourly_rate   Decimal?                   @db.Decimal(10, 2)
  joined_at     DateTime                   @default(now()) @db.Timestamptz(6)
  left_at       DateTime?                  @db.Timestamptz(6)
  restaurants   restaurants                @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  users         users                      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([restaurant_id, user_id], map: "uq_restaurant_staff")
  @@index([user_id], map: "idx_restaurant_staff_user")
  @@index([role], map: "idx_restaurant_staff_role")
  @@index([status], map: "idx_restaurant_staff_status")
}

/// Staff work schedules
model staff_schedules {
  id            String                     @id @default(uuid()) @db.Uuid
  staff_id      String                     @db.Uuid
  restaurant_id String                     @db.Uuid
  shift_date    DateTime                   @db.Date
  shift_type    staff_shift_type_enum
  start_time    DateTime                   @db.Time
  end_time      DateTime                   @db.Time
  status        staff_schedule_status_enum @default(scheduled)
  notes         String?                    @db.Text
  created_at    DateTime                   @default(now()) @db.Timestamptz(6)
  updated_at    DateTime                   @default(now()) @db.Timestamptz(6)
  staff         users                      @relation("staff_schedules_staff", fields: [staff_id], references: [id])
  restaurants   restaurants                @relation(fields: [restaurant_id], references: [id])
  attendance    staff_attendance[]

  @@unique([staff_id, shift_date, shift_type])
  @@index([restaurant_id], map: "idx_staff_schedules_restaurant")
  @@index([shift_date], map: "idx_staff_schedules_date")
  @@index([status], map: "idx_staff_schedules_status")
}

/// Staff attendance tracking
model staff_attendance {
  id             String           @id @default(uuid()) @db.Uuid
  staff_id       String           @db.Uuid
  restaurant_id  String           @db.Uuid
  schedule_id    String?          @db.Uuid
  work_date      DateTime         @db.Date
  check_in_time  DateTime?        @db.Timestamptz(6)
  check_out_time DateTime?        @db.Timestamptz(6)
  break_duration Int?             // minutes
  overtime_hours Decimal?         @db.Decimal(4, 2)
  total_hours    Decimal?         @db.Decimal(4, 2)
  notes          String?          @db.Text
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  staff          users            @relation("staff_attendance_staff", fields: [staff_id], references: [id])
  restaurants    restaurants      @relation(fields: [restaurant_id], references: [id])
  schedules      staff_schedules? @relation(fields: [schedule_id], references: [id])

  @@unique([staff_id, work_date])
  @@index([restaurant_id], map: "idx_staff_attendance_restaurant")
  @@index([work_date], map: "idx_staff_attendance_date")
}

// ================================
// üè™ INVENTORY MANAGEMENT
// ================================

/// Inventory items
model inventory_items {
  id                     String                   @id @default(uuid()) @db.Uuid
  restaurant_id          String                   @db.Uuid
  name                   String                   @db.VarChar(100)
  description            String?                  @db.Text
  unit                   String                   @db.VarChar(20) // kg, l√≠t, c√°i...
  quantity               Decimal                  @db.Decimal(12, 2)
  min_quantity           Decimal?                 @db.Decimal(12, 2)
  max_quantity           Decimal?                 @db.Decimal(12, 2)
  unit_cost              Decimal?                 @db.Decimal(10, 2)
  supplier               String?                  @db.VarChar(100)
  expiry_date            DateTime?                @db.Date
  created_at             DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at             DateTime                 @default(now()) @db.Timestamptz(6)
  restaurants            restaurants              @relation(fields: [restaurant_id], references: [id])
  transactions           inventory_transactions[]
  recipe_ingredients     recipe_ingredients[]

  @@index([restaurant_id], map: "idx_inventory_items_restaurant")
  @@index([quantity], map: "idx_inventory_items_quantity")
  @@index([expiry_date], map: "idx_inventory_items_expiry")
}

/// Inventory transactions (import/export)
model inventory_transactions {
  id                String                          @id @default(uuid()) @db.Uuid
  inventory_item_id String                          @db.Uuid
  type              inventory_transaction_type_enum
  quantity          Decimal                         @db.Decimal(12, 2)
  unit_cost         Decimal?                        @db.Decimal(10, 2)
  total_cost        Decimal?                        @db.Decimal(12, 2)
  supplier          String?                         @db.VarChar(100)
  invoice_number    String?                         @db.VarChar(50)
  notes             String?                         @db.Text
  created_at        DateTime                        @default(now()) @db.Timestamptz(6)
  inventory_items   inventory_items                 @relation(fields: [inventory_item_id], references: [id])

  @@index([inventory_item_id], map: "idx_inventory_transactions_item")
  @@index([type], map: "idx_inventory_transactions_type")
  @@index([created_at], map: "idx_inventory_transactions_created")
}

/// Recipes for menu items
model recipes {
  id                 String               @id @default(uuid()) @db.Uuid
  menu_item_id       String               @db.Uuid
  name               String               @db.VarChar(100)
  description        String?              @db.Text
  instructions       String?              @db.Text
  prep_time          Int?                 // minutes
  cook_time          Int?                 // minutes
  serving_size       Int?
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  menu_items         menu_items           @relation(fields: [menu_item_id], references: [id])
  ingredients        recipe_ingredients[]

  @@index([menu_item_id], map: "idx_recipes_menu_item")
}

/// Recipe ingredients
model recipe_ingredients {
  id                String          @id @default(uuid()) @db.Uuid
  recipe_id         String          @db.Uuid
  inventory_item_id String          @db.Uuid
  quantity          Decimal         @db.Decimal(12, 2)
  unit              String          @db.VarChar(20)
  notes             String?         @db.Text
  recipes           recipes         @relation(fields: [recipe_id], references: [id])
  inventory_items   inventory_items @relation(fields: [inventory_item_id], references: [id])

  @@index([recipe_id], map: "idx_recipe_ingredients_recipe")
  @@index([inventory_item_id], map: "idx_recipe_ingredients_item")
}

// ================================
// üéüÔ∏è PROMOTIONS & VOUCHERS
// ================================

/// Vouchers and discount codes
model vouchers {
  id              String                     @id @default(uuid()) @db.Uuid
  restaurant_id   String?                    @db.Uuid
  code            String                     @unique @db.VarChar(50)
  name            String                     @db.VarChar(100)
  description     String?                    @db.Text
  discount_type   voucher_discount_type_enum
  discount_value  Decimal                    @db.Decimal(12, 2)
  min_order_value Decimal?                   @db.Decimal(12, 2)
  max_discount    Decimal?                   @db.Decimal(12, 2)
  usage_limit     Int?
  used_count      Int                        @default(0)
  start_date      DateTime                   @db.Timestamptz(6)
  end_date        DateTime                   @db.Timestamptz(6)
  is_active       Boolean                    @default(true)
  created_at      DateTime                   @default(now()) @db.Timestamptz(6)
  updated_at      DateTime                   @default(now()) @db.Timestamptz(6)
  restaurants     restaurants?               @relation(fields: [restaurant_id], references: [id])
  usages          voucher_usages[]

  @@index([restaurant_id], map: "idx_vouchers_restaurant")
  @@index([code], map: "idx_vouchers_code")
  @@index([is_active], map: "idx_vouchers_active")
  @@index([start_date, end_date], map: "idx_vouchers_dates")
}

/// Voucher usage history
model voucher_usages {
  id         String   @id @default(uuid()) @db.Uuid
  voucher_id String   @db.Uuid
  user_id    String   @db.Uuid
  order_id   String?  @db.Uuid
  used_at    DateTime @default(now()) @db.Timestamptz(6)
  vouchers   vouchers @relation(fields: [voucher_id], references: [id])
  users      users    @relation(fields: [user_id], references: [id])
  orders     orders?  @relation(fields: [order_id], references: [id])

  @@index([voucher_id], map: "idx_voucher_usages_voucher")
  @@index([user_id], map: "idx_voucher_usages_user")
  @@index([used_at], map: "idx_voucher_usages_used")
}

/// Restaurant promotions
model promotions {
  id                String               @id @default(uuid()) @db.Uuid
  restaurant_id     String               @db.Uuid
  name              String               @db.VarChar(100)
  description       String?              @db.Text
  type              promotion_type_enum
  discount_value    Decimal              @db.Decimal(12, 2)
  conditions        Json?                // Conditions for application
  applicable_items  String[]             // Menu item IDs
  time_restrictions Json?                // Time-based restrictions
  start_date        DateTime             @db.Timestamptz(6)
  end_date          DateTime             @db.Timestamptz(6)
  is_active         Boolean              @default(true)
  created_at        DateTime             @default(now()) @db.Timestamptz(6)
  updated_at        DateTime             @default(now()) @db.Timestamptz(6)
  restaurants       restaurants          @relation(fields: [restaurant_id], references: [id])

  @@index([restaurant_id], map: "idx_promotions_restaurant")
  @@index([start_date, end_date], map: "idx_promotions_dates")
  @@index([is_active], map: "idx_promotions_active")
}

// ================================
// ‚≠ê REVIEWS & RATINGS
// ================================

/// Customer reviews
model reviews {
  id            String             @id @default(uuid()) @db.Uuid
  customer_id   String             @db.Uuid
  restaurant_id String?            @db.Uuid
  order_id      String?            @db.Uuid
  menu_item_id  String?            @db.Uuid
  rating        Int                // 1-5 stars
  title         String?            @db.VarChar(255)
  content       String?            @db.Text
  photos        String[]           // Photo URLs
  status        review_status_enum @default(active)
  response      String?            @db.Text // Restaurant response
  responded_at  DateTime?          @db.Timestamptz(6)
  created_at    DateTime           @default(now()) @db.Timestamptz(6)
  updated_at    DateTime           @default(now()) @db.Timestamptz(6)
  customers     users              @relation("reviews_customer", fields: [customer_id], references: [id])
  restaurants   restaurants?       @relation(fields: [restaurant_id], references: [id])
  orders        orders?            @relation(fields: [order_id], references: [id])
  menu_items    menu_items?        @relation(fields: [menu_item_id], references: [id])

  @@index([customer_id], map: "idx_reviews_customer")
  @@index([restaurant_id], map: "idx_reviews_restaurant")
  @@index([rating], map: "idx_reviews_rating")
  @@index([status], map: "idx_reviews_status")
  @@index([created_at], map: "idx_reviews_created")
}

// ================================
// üìä ANALYTICS & REPORTING
// ================================

/// Revenue reports
model revenue_reports {
  id                        String                   @id @default(uuid()) @db.Uuid
  restaurant_id             String                   @db.Uuid
  report_date               DateTime                 @db.Date
  report_type               revenue_report_type_enum
  total_revenue             Decimal                  @db.Decimal(14, 2)
  total_orders              Int                      @default(0)
  total_customers           Int                      @default(0)
  avg_order_value           Decimal?                 @db.Decimal(12, 2)
  dine_in_revenue           Decimal?                 @db.Decimal(14, 2)
  takeaway_revenue          Decimal?                 @db.Decimal(14, 2)
  delivery_revenue          Decimal?                 @db.Decimal(14, 2)
  popular_items             Json?                    // Top selling items
  payment_methods_breakdown Json?                    // Payment method analysis
  hourly_breakdown          Json?                    // Revenue by hour
  created_at                DateTime                 @default(now()) @db.Timestamptz(6)
  restaurants               restaurants              @relation(fields: [restaurant_id], references: [id])

  @@unique([restaurant_id, report_date, report_type])
  @@index([restaurant_id], map: "idx_revenue_reports_restaurant")
  @@index([report_date], map: "idx_revenue_reports_date")
  @@index([report_type], map: "idx_revenue_reports_type")
}

// ================================
// üë§ USER MANAGEMENT
// ================================

/// Users (customers, staff, admins)
model users {
  id                    String             @id @default(uuid()) @db.Uuid
  clerk_id              String?            @unique @db.VarChar(255) // Clerk Auth ID
  username              String             @unique @db.VarChar(50)
  email                 String             @unique @db.VarChar(255)
  phone_code            String?            @db.VarChar(8)
  phone_number          String?            @db.VarChar(20)
  first_name            String             @db.VarChar(100)
  last_name             String             @db.VarChar(100)
  full_name             String             @db.VarChar(200)
  avatar_url            String?            @db.VarChar(255)
  date_of_birth         DateTime?          @db.Date
  gender                String?            @db.VarChar(10)
  status                user_status_enum   @default(active)
  role                  user_role_enum     @default(customer)
  email_verified_at     DateTime?          @db.Timestamptz(6)
  phone_verified_at     DateTime?          @db.Timestamptz(6)
  last_login_at         DateTime?          @db.Timestamptz(6)
  
  // Customer statistics
  total_orders          Int                @default(0)
  total_spent           Decimal            @default(0) @db.Decimal(14, 2)
  loyalty_points        Int                @default(0)
  
  created_at            DateTime           @default(now()) @db.Timestamptz(6)
  updated_at            DateTime           @updatedAt @db.Timestamptz(6)

  // Relations
  addresses                addresses[]
  cart_items               cart_items[]
  organizations_owned      organizations[]        @relation("organizations_owner")
  restaurants_managed      restaurants[]          @relation("restaurants_manager")
  restaurant_staffs        restaurant_staffs[]
  staff_schedules          staff_schedules[]      @relation("staff_schedules_staff")
  staff_attendance         staff_attendance[]     @relation("staff_attendance_staff")
  orders                   orders[]               @relation("orders_customer")
  order_status_history     order_status_history[]
  reservations             reservations[]         @relation("reservations_customer")
  table_orders_staffed     table_orders[]         @relation("table_orders_staff")
  reviews_written          reviews[]              @relation("reviews_customer")
  voucher_usages           voucher_usages[]
  conversations_as_customer conversations[]       @relation("conversations_customer")
  conversations_as_staff   conversations[]        @relation("conversations_staff")
  messages_sent            messages[]

  @@index([clerk_id], map: "idx_users_clerk")
  @@index([email], map: "idx_users_email")
  @@index([phone_number], map: "idx_users_phone")
  @@index([role], map: "idx_users_role")
  @@index([status], map: "idx_users_status")
  @@index([total_orders], map: "idx_users_total_orders")
}

// ================================
// üìä USER STATISTICS
// ================================

/// User activity statistics
model user_statistics {
  id                    String   @id @default(uuid()) @db.Uuid
  user_id               String   @unique @db.Uuid
  total_reservations    Int      @default(0)
  successful_reservations Int    @default(0)
  cancelled_reservations Int     @default(0)
  no_show_reservations  Int      @default(0)
  total_orders          Int      @default(0)
  completed_orders      Int      @default(0)
  cancelled_orders      Int      @default(0)
  total_spent           Decimal  @default(0) @db.Decimal(14, 2)
  loyalty_points        Int      @default(0)
  favorite_restaurant_id String? @db.Uuid
  last_order_date       DateTime? @db.Timestamptz(6)
  last_reservation_date DateTime? @db.Timestamptz(6)
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  updated_at            DateTime @default(now()) @db.Timestamptz(6)
  users                 users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "idx_user_statistics_user")
  @@index([total_orders], map: "idx_user_statistics_orders")
  @@index([total_spent], map: "idx_user_statistics_spent")
}

// ================================
// üîê AUTHENTICATION & SESSIONS
// ================================

/// User sessions
model sessions {
  id                 String    @id @default(uuid()) @db.Uuid
  user_id            String    @db.Uuid
  token_hash         String    @db.Text
  is_valid           Boolean   @default(true)
  expires_at         DateTime  @db.Timestamptz(6)
  ip_address         String?   @db.VarChar(45)
  user_agent         String?   @db.VarChar(255)
  last_accessed_at   DateTime? @db.Timestamptz(6)
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  updated_at         DateTime  @default(now()) @db.Timestamptz(6)
  users              users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "idx_sessions_user")
  @@index([expires_at], map: "idx_sessions_expires")
  @@index([is_valid], map: "idx_sessions_valid")
}

// ================================
// üìã ENUMS
// ================================

enum user_status_enum {
  active
  inactive
  suspended
  banned
}

enum user_role_enum {
  customer
  staff
  manager
  admin
  super_admin
}

enum restaurant_status_enum {
  active
  inactive
  maintenance
  closed
}

enum table_status_enum {
  available
  occupied
  reserved
  maintenance
  out_of_order
}

enum reservation_status_enum {
  pending
  confirmed
  seated
  completed
  cancelled
  no_show
}

enum table_order_status_enum {
  active
  completed
  cancelled
}

enum order_type_enum {
  dine_in
  takeaway
  delivery
}

enum order_status_enum {
  pending
  confirmed
  preparing
  ready
  served
  completed
  cancelled
}

enum cooking_status_enum {
  pending
  preparing
  cooking
  ready
  served
  cancelled
}

enum payment_method_enum {
  cash
  card
  bank_transfer
  momo
  zalopay
  viettelpay
  vnpay
  shopeepay
}

enum payment_status_enum {
  pending
  processing
  completed
  failed
  cancelled
  refunded
}

enum restaurant_staff_role_enum {
  staff
  supervisor
  manager
  chef
  sous_chef
  cashier
  waiter
  host
  cleaner
  security
}

enum staff_status_enum {
  active
  inactive
  on_leave
  suspended
  terminated
}

enum staff_shift_type_enum {
  morning
  afternoon
  evening
  night
  full_day
  split_shift
}

enum staff_schedule_status_enum {
  scheduled
  confirmed
  in_progress
  completed
  absent
  late
  cancelled
}

enum inventory_transaction_type_enum {
  purchase
  usage
  adjustment
  waste
  return
  transfer
}

enum voucher_discount_type_enum {
  percentage
  fixed_amount
}

enum promotion_type_enum {
  percentage
  fixed_amount
  buy_one_get_one
  combo_deal
  happy_hour
  seasonal
}

enum review_status_enum {
  active
  hidden
  flagged
  deleted
}

enum revenue_report_type_enum {
  daily
  weekly
  monthly
  yearly
}

enum conversation_type_enum {
  support
  feedback
  complaint
  inquiry
}

enum conversation_status_enum {
  active
  resolved
  closed
}

enum message_type_enum {
  text
  image
  file
  system
}
