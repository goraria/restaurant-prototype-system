import React, { useState } from 'react';
import {
  ScrollView,
  View,
  Text,
  TouchableOpacity,
  Alert
} from 'react-native';
import { ArrowLeft, Globe, Check, Clock, Star } from 'lucide-react-native';
import { useRouter } from 'expo-router';
import { HeaderStack } from '@/components/layout/header';
import { Card, CardContent } from '@/components/ui/card';

interface Language {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
  isPopular?: boolean;
  isComingSoon?: boolean;
}

export default function LanguageScreen() {
  const router = useRouter();
  const [selectedLanguage, setSelectedLanguage] = useState<string>('vi');

  const languages: Language[] = [
    {
      code: 'vi',
      name: 'Ti·∫øng Vi·ªát',
      nativeName: 'Ti·∫øng Vi·ªát',
      flag: 'üáªüá≥',
      isPopular: true
    },
    {
      code: 'en',
      name: 'English',
      nativeName: 'English',
      flag: 'üá∫üá∏',
      isPopular: true
    },
    {
      code: 'zh',
      name: 'Chinese',
      nativeName: '‰∏≠Êñá',
      flag: 'üá®üá≥',
      isPopular: true
    },
    {
      code: 'ko',
      name: 'Korean',
      nativeName: 'ÌïúÍµ≠Ïñ¥',
      flag: 'üá∞üá∑',
      isPopular: true
    },
    {
      code: 'ja',
      name: 'Japanese',
      nativeName: 'Êó•Êú¨Ë™û',
      flag: 'üáØüáµ',
      isPopular: true
    },
    {
      code: 'th',
      name: 'Thai',
      nativeName: '‡πÑ‡∏ó‡∏¢',
      flag: 'üáπüá≠',
      isComingSoon: true
    },
    {
      code: 'fr',
      name: 'French',
      nativeName: 'Fran√ßais',
      flag: 'üá´üá∑',
      isComingSoon: true
    },
    {
      code: 'de',
      name: 'German',
      nativeName: 'Deutsch',
      flag: 'üá©üá™',
      isComingSoon: true
    }
  ];

  const popularLanguages = languages.filter(lang => lang.isPopular);
  const comingSoonLanguages = languages.filter(lang => lang.isComingSoon);

  const handleLanguageSelect = (languageCode: string) => {
    if (languageCode === selectedLanguage) return;

    const language = languages.find(lang => lang.code === languageCode);
    if (!language) return;

    if (language.isComingSoon) {
      Alert.alert(
        'S·∫Øp c√≥',
        `${language.nativeName} s·∫Ω s·ªõm ƒë∆∞·ª£c h·ªó tr·ª£ trong phi√™n b·∫£n ti·∫øp theo!`,
        [{ text: 'OK' }]
      );
      return;
    }

    Alert.alert(
      'Thay ƒë·ªïi ng√¥n ng·ªØ',
      `B·∫°n c√≥ mu·ªën thay ƒë·ªïi ng√¥n ng·ªØ th√†nh ${language.nativeName}?`,
      [
        { text: 'H·ªßy', style: 'cancel' },
        {
          text: 'X√°c nh·∫≠n',
          onPress: () => {
            setSelectedLanguage(languageCode);
            Alert.alert(
              'Th√†nh c√¥ng',
              `Ng√¥n ng·ªØ ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh ${language.nativeName}. ·ª®ng d·ª•ng s·∫Ω kh·ªüi ƒë·ªông l·∫°i.`,
              [{ text: 'OK' }]
            );
          }
        }
      ]
    );
  };

  const renderLanguageItem = (language: Language, index: number, arr: Language[]) => (
    <View key={language.code}>
      <TouchableOpacity
        className={`flex-row items-center py-4 px-5 ${
          language.isComingSoon ? 'opacity-60' : 'active:bg-muted/50'
        }`}
        onPress={() => handleLanguageSelect(language.code)}
      >
        <View className="w-12 h-12 rounded-xl bg-white items-center justify-center mr-4 shadow-sm">
          <Text className="text-2xl">{language.flag}</Text>
        </View>
        
        <View className="flex-1">
          <Text className={`text-base font-medium mb-1 ${
            selectedLanguage === language.code ? 'text-primary font-semibold' : 'text-foreground'
          }`}>
            {language.nativeName}
          </Text>
          <Text className={`text-sm ${
            selectedLanguage === language.code ? 'text-primary' : 'text-muted-foreground'
          }`}>
            {language.name}
          </Text>
        </View>

        <View className="flex-row items-center">
          {language.isComingSoon ? (
            <View className="flex-row items-center px-2 py-1 bg-muted rounded-lg">
              <Clock size={12} color="#6b7280" />
              <Text className="text-xs text-muted-foreground ml-1 font-medium">S·∫Øp c√≥</Text>
            </View>
          ) : language.isPopular ? (
            <View className="mr-2">
              <Star size={16} color="#fbbf24" />
            </View>
          ) : null}
          
          {selectedLanguage === language.code && !language.isComingSoon && (
            <Check size={20} color="#EC6683" />
          )}
        </View>
      </TouchableOpacity>
      
      {index < arr.length - 1 && (
        <View className="border-b border-border/50 ml-16" />
      )}
    </View>
  );

  return (
    <>
      <HeaderStack
        position="left"
        iconLeft={ArrowLeft}
        iconLeftAction={() => router.back()}
        title="Ng√¥n ng·ªØ"
      />
      
      <ScrollView className="flex-1 bg-background">
        {/* Ti√™u ƒë·ªÅ l·ªõn ki·ªÉu iOS 18 */}
        <View className="px-5 pt-2 pb-6">
          <Text className="text-4xl font-bold text-foreground tracking-tight">Ng√¥n ng·ªØ</Text>
          <Text className="text-base text-muted-foreground mt-2 leading-6">
            Ch·ªçn ng√¥n ng·ªØ hi·ªÉn th·ªã cho ·ª©ng d·ª•ng
          </Text>
        </View>

        {/* Bi·ªÉu t∆∞·ª£ng trung t√¢m */}
        <View className="items-center py-8">
          <View className="w-20 h-20 bg-primary/10 rounded-2xl items-center justify-center mb-4">
            <Globe size={40} color="#EC6683" />
          </View>
          <Text className="text-lg font-semibold text-foreground">Ch·ªçn ng√¥n ng·ªØ y√™u th√≠ch</Text>
          <Text className="text-sm text-muted-foreground text-center px-8 mt-2 leading-5">
            Thay ƒë·ªïi ng√¥n ng·ªØ s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn to√†n b·ªô giao di·ªán ·ª©ng d·ª•ng
          </Text>
        </View>

        {/* Popular languages */}
        <View className="px-4 mb-8">
          <Text className="text-xs font-medium text-muted-foreground uppercase tracking-wider mb-3 px-1">
            ‚≠ê Ph·ªï bi·∫øn
          </Text>
          <Card className="border-0 shadow-sm bg-card/50 backdrop-blur-sm">
            <CardContent className="p-0">
              {popularLanguages.map((language, index) => 
                renderLanguageItem(language, index, popularLanguages)
              )}
            </CardContent>
          </Card>
        </View>

        {/* Coming soon languages */}
        {comingSoonLanguages.length > 0 && (
          <View className="px-4 mb-8">
            <Text className="text-xs font-medium text-muted-foreground uppercase tracking-wider mb-3 px-1">
              ‚è∞ S·∫Øp c√≥
            </Text>
            <Card className="border-0 shadow-sm bg-card/50 backdrop-blur-sm">
              <CardContent className="p-0">
                {comingSoonLanguages.map((language, index) => 
                  renderLanguageItem(language, index, comingSoonLanguages)
                )}
              </CardContent>
            </Card>
          </View>
        )}

        {/* Th√¥ng tin l∆∞u √Ω */}
        <View className="px-4 mb-8">
          <Text className="text-xs font-medium text-muted-foreground uppercase tracking-wider mb-3 px-1">
            üìù L∆∞u √Ω
          </Text>
          <Card className="border-0 shadow-sm bg-card/50 backdrop-blur-sm">
            <CardContent className="p-5">
              <View className="space-y-3">
                <View className="flex-row items-start">
                  <Text className="text-2xl mr-3 mt-0.5">‚Ä¢</Text>
                  <Text className="text-sm text-muted-foreground leading-5 flex-1">
                    Thay ƒë·ªïi ng√¥n ng·ªØ s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn to√†n b·ªô giao di·ªán ·ª©ng d·ª•ng
                  </Text>
                </View>
                <View className="flex-row items-start">
                  <Text className="text-2xl mr-3 mt-0.5">‚Ä¢</Text>
                  <Text className="text-sm text-muted-foreground leading-5 flex-1">
                    ·ª®ng d·ª•ng s·∫Ω kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi
                  </Text>
                </View>
                <View className="flex-row items-start">
                  <Text className="text-2xl mr-3 mt-0.5">‚Ä¢</Text>
                  <Text className="text-sm text-muted-foreground leading-5 flex-1">
                    M·ªôt s·ªë ng√¥n ng·ªØ c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c d·ªãch ho√†n to√†n
                  </Text>
                </View>
              </View>
            </CardContent>
          </Card>
        </View>

        {/* Kho·∫£ng tr·ªëng cu·ªëi trang */}
        <View className="h-20" />
      </ScrollView>
    </>
  );
}
