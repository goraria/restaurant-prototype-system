import { ScrollView, View, TouchableOpacity } from "react-native";
import { Link, Stack, useRouter } from "expo-router";
import { Text } from "@/components/ui/text";
import { Card, CardContent } from "@/components/ui/card";
import { Icon } from "@/components/ui/icon";
import { ArrowLeft, SquarePen, Settings, Check, X } from "lucide-react-native";
import { useState } from "react";

export default function Notifications() {
  const router = useRouter();
  const [notifications, setNotifications] = useState([
    {
      id: 1,
      title: "ƒê·∫∑t b√†n th√†nh c√¥ng",
      message: "B√†n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n cho 19:00 h√¥m nay t·∫°i Nh√† H√†ng H∆∞∆°ng Vi·ªát",
      time: "5 ph√∫t tr∆∞·ªõc",
      type: "booking",
      read: false,
      icon: "‚úÖ"
    },
    {
      id: 2,
      title: "Khuy·∫øn m√£i ƒë·∫∑c bi·ªát",
      message: "Gi·∫£m 30% cho t·∫•t c·∫£ m√≥n ƒÉn ch√≠nh trong tu·∫ßn n√†y! √Åp d·ª•ng ƒë·∫øn 23:59 Ch·ªß nh·∫≠t",
      time: "1 gi·ªù tr∆∞·ªõc",
      type: "promotion",
      read: false,
      icon: "üéâ"
    },
    {
      id: 3,
      title: "M√≥n ƒÉn ƒë√£ s·∫µn s√†ng",
      message: "Ph·ªü B√≤ ƒê·∫∑c Bi·ªát c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã xong. Vui l√≤ng ƒë·∫øn qu·∫ßy l·∫•y m√≥n",
      time: "2 gi·ªù tr∆∞·ªõc",
      type: "order",
      read: true,
      icon: "üçú"
    },
    {
      id: 4,
      title: "ƒê√°nh gi√° tr·∫£i nghi·ªám",
      message: "H√£y chia s·∫ª c·∫£m nh·∫≠n c·ªßa b·∫°n v·ªÅ b·ªØa ƒÉn h√¥m qua t·∫°i Nh√† H√†ng H∆∞∆°ng Vi·ªát",
      time: "1 ng√†y tr∆∞·ªõc",
      type: "review",
      read: true,
      icon: "‚≠ê"
    },
    {
      id: 5,
      title: "ƒêi·ªÉm th∆∞·ªüng m·ªõi",
      message: "B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c 50 ƒëi·ªÉm th∆∞·ªüng t·ª´ ƒë∆°n h√†ng g·∫ßn nh·∫•t. T·ªïng ƒëi·ªÉm: 250",
      time: "2 ng√†y tr∆∞·ªõc",
      type: "points",
      read: true,
      icon: "üèÜ"
    }
  ]);

  const markAsRead = (id: number) => {
    setNotifications(prev => 
      prev.map(notif => 
        notif.id === id ? { ...notif, read: true } : notif
      )
    );
  };

  const markAllAsRead = () => {
    setNotifications(prev => 
      prev.map(notif => ({ ...notif, read: true }))
    );
  };

  const deleteNotification = (id: number) => {
    setNotifications(prev => prev.filter(notif => notif.id !== id));
  };

  const unreadCount = notifications.filter(n => !n.read).length;

  return (
    <>
      <Stack.Screen
        options={{
          headerShown: true,
          header: () => (
            <View className="bg-background pt-16 pb-4 px-4 border-b border-border">
              <View className="flex-row items-center justify-between gap-3">
                <TouchableOpacity
                  onPress={() => router.back()}
                  className="w-10 h-10 rounded-full items-center justify-center"
                >
                  <Icon as={ArrowLeft} className="size-6" />
                </TouchableOpacity>
                <View className="flex-1 justify-center items-center">
                  <Text className="text-lg font-semibold">Th√¥ng b√°o</Text>
                </View>
                <TouchableOpacity
                  onPress={() => router.push("/(settings)/notifications" as any)}
                  className="w-10 h-10 rounded-full items-center justify-center"
                >
                  <Icon as={Settings} className="size-6" />
                </TouchableOpacity>
              </View>
            </View>
          ),
        }}
      />
      <ScrollView className="flex-1 bg-background">
        {/* Ti√™u ƒë·ªÅ l·ªõn ki·ªÉu iOS 18 */}
        <View className="px-5 pt-2 pb-4">
          <Text className="text-4xl font-bold text-foreground tracking-tight">Th√¥ng b√°o</Text>
          <Text className="text-base text-muted-foreground mt-1">
            {unreadCount > 0 ? `${unreadCount} th√¥ng b√°o ch∆∞a ƒë·ªçc` : 'T·∫•t c·∫£ ƒë√£ ƒë∆∞·ª£c ƒë·ªçc'}
          </Text>
        </View>

        {/* Actions */}
        {unreadCount > 0 && (
          <View className="px-4 mb-6">
            <TouchableOpacity 
              onPress={markAllAsRead}
              className="w-full border border-border py-3 px-4 rounded-lg flex-row items-center justify-center"
            >
              <Check size={16} className="mr-2" />
              <Text className="font-medium">ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc</Text>
            </TouchableOpacity>
          </View>
        )}

        {/* Notifications List */}
        <View className="px-4 mb-8">
          {notifications.length > 0 ? (
            notifications.map((notification) => (
              <TouchableOpacity 
                key={notification.id}
                onPress={() => markAsRead(notification.id)}
                className="mb-3"
              >
                <Card className={`border-0 shadow-sm backdrop-blur-sm ${
                  notification.read ? 'bg-card/30' : 'bg-card/70'
                }`}>
                  <CardContent className="p-4">
                    <View className="flex-row items-start">
                      <View className="mr-4 mt-1">
                        <Text className="text-2xl">{notification.icon}</Text>
                      </View>
                      <View className="flex-1">
                        <View className="flex-row items-start justify-between mb-1">
                          <Text className={`font-semibold text-base flex-1 ${
                            notification.read ? 'text-muted-foreground' : 'text-foreground'
                          }`} numberOfLines={1}>
                            {notification.title}
                          </Text>
                          <TouchableOpacity 
                            onPress={() => deleteNotification(notification.id)}
                            className="ml-2 p-1"
                          >
                            <X size={16} className="text-muted-foreground" />
                          </TouchableOpacity>
                        </View>
                        <Text className={`text-sm mb-2 leading-5 ${
                          notification.read ? 'text-muted-foreground' : 'text-foreground'
                        }`} numberOfLines={2}>
                          {notification.message}
                        </Text>
                        <View className="flex-row items-center justify-between">
                          <Text className="text-xs text-muted-foreground">
                            {notification.time}
                          </Text>
                          {!notification.read && (
                            <View className="w-2 h-2 bg-primary rounded-full" />
                          )}
                        </View>
                      </View>
                    </View>
                  </CardContent>
                </Card>
              </TouchableOpacity>
            ))
          ) : (
            <Card className="border-0 shadow-sm bg-card/50 backdrop-blur-sm">
              <CardContent className="p-8 items-center">
                <Text className="text-4xl mb-3">üîî</Text>
                <Text className="text-lg font-semibold text-foreground mb-2">
                  Kh√¥ng c√≥ th√¥ng b√°o
                </Text>
                <Text className="text-sm text-muted-foreground text-center">
                  T·∫•t c·∫£ th√¥ng b√°o s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y
                </Text>
              </CardContent>
            </Card>
          )}
        </View>

        {/* Footer spacing */}
        <View className="h-8" />
      </ScrollView>
    </>
  );
}