import { z } from 'zod';

// ================================
// üéØ RESERVATION SCHEMAS
// ================================

// Base Reservation Schema
export const ReservationSchema = z.object({
  id: z.string().uuid(),
  table_id: z.string().uuid(),
  customer_id: z.string().uuid().optional(),
  customer_name: z.string().min(1).max(100),
  customer_phone: z.string().min(1).max(20),
  customer_email: z.string().email().max(255).optional(),
  party_size: z.number().int().min(1),
  reservation_date: z.date(),
  duration_hours: z.number().min(0.25).max(24),
  status: z.enum(['pending', 'confirmed', 'seated', 'completed', 'cancelled', 'no_show']),
  special_requests: z.string().optional(),
  notes: z.string().optional(),
  created_at: z.date(),
  updated_at: z.date(),
});

// Create Reservation Schema
export const CreateReservationSchema = z.object({
  table_id: z.string().uuid("ID b√†n kh√¥ng h·ª£p l·ªá"),
  customer_id: z.string().uuid("ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá").optional(),
  customer_name: z.string()
    .min(1, "T√™n kh√°ch h√†ng l√† b·∫Øt bu·ªôc")
    .max(100, "T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±"),
  customer_phone: z.string()
    .min(1, "S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc")
    .max(20, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c qu√° 20 k√Ω t·ª±"),
  customer_email: z.string()
    .email("Email kh√¥ng h·ª£p l·ªá")
    .max(255, "Email kh√¥ng ƒë∆∞·ª£c qu√° 255 k√Ω t·ª±")
    .optional(),
  party_size: z.number()
    .int("S·ªë ng∆∞·ªùi ph·∫£i l√† s·ªë nguy√™n")
    .min(1, "S·ªë ng∆∞·ªùi ph·∫£i √≠t nh·∫•t 1")
    .max(50, "S·ªë ng∆∞·ªùi kh√¥ng ƒë∆∞·ª£c qu√° 50"),
  reservation_date: z.union([
    z.date(),
    z.string().transform((str) => new Date(str))
  ]).refine((date) => date > new Date(), "Th·ªùi gian ƒë·∫∑t b√†n ph·∫£i trong t∆∞∆°ng lai"),
  duration_hours: z.number()
    .min(0.25, "Th·ªùi gian t·ªëi thi·ªÉu 15 ph√∫t")
    .max(24, "Th·ªùi gian t·ªëi ƒëa 24 ti·∫øng")
    .default(2),
  special_requests: z.string().optional(),
  notes: z.string().optional(),
});

// Update Reservation Schema
export const UpdateReservationSchema = z.object({
  customer_name: z.string()
    .min(1, "T√™n kh√°ch h√†ng l√† b·∫Øt bu·ªôc")
    .max(100, "T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±")
    .optional(),
  customer_phone: z.string()
    .min(1, "S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc")
    .max(20, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c qu√° 20 k√Ω t·ª±")
    .optional(),
  customer_email: z.string()
    .email("Email kh√¥ng h·ª£p l·ªá")
    .max(255, "Email kh√¥ng ƒë∆∞·ª£c qu√° 255 k√Ω t·ª±")
    .optional(),
  party_size: z.number()
    .int("S·ªë ng∆∞·ªùi ph·∫£i l√† s·ªë nguy√™n")
    .min(1, "S·ªë ng∆∞·ªùi ph·∫£i √≠t nh·∫•t 1")
    .max(50, "S·ªë ng∆∞·ªùi kh√¥ng ƒë∆∞·ª£c qu√° 50")
    .optional(),
  reservation_date: z.date("Th·ªùi gian ƒë·∫∑t b√†n kh√¥ng h·ª£p l·ªá")
    .refine((date) => date > new Date(), "Th·ªùi gian ƒë·∫∑t b√†n ph·∫£i trong t∆∞∆°ng lai")
    .optional(),
  duration_hours: z.number()
    .min(0.25, "Th·ªùi gian t·ªëi thi·ªÉu 15 ph√∫t")
    .max(24, "Th·ªùi gian t·ªëi ƒëa 24 ti·∫øng")
    .optional(),
  special_requests: z.string().optional(),
  notes: z.string().optional(),
});

// Reservation Status Update Schema
export const UpdateReservationStatusSchema = z.object({
  status: z.enum(['pending', 'confirmed', 'seated', 'completed', 'cancelled', 'no_show'], {
    message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá"
  }),
  notes: z.string()
    .max(500, "Ghi ch√∫ kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±")
    .optional()
});

// Reservation Query Schema
export const ReservationQuerySchema = z.object({
  restaurant_id: z.string().uuid("ID nh√† h√†ng kh√¥ng h·ª£p l·ªá").optional(),
  table_id: z.string().uuid("ID b√†n kh√¥ng h·ª£p l·ªá").optional(),
  customer_id: z.string().uuid("ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá").optional(),
  status: z.enum(['pending', 'confirmed', 'seated', 'completed', 'cancelled', 'no_show']).optional(),
  date_from: z.string().datetime("Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá").optional(),
  date_to: z.string().datetime("Ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá").optional(),
  customer_phone: z.string().optional(),
  customer_name: z.string().optional(),
  page: z.number().min(1, "Trang ph·∫£i l·ªõn h∆°n 0").default(1),
  limit: z.number().min(1, "Gi·ªõi h·∫°n ph·∫£i l·ªõn h∆°n 0").max(100, "Gi·ªõi h·∫°n t·ªëi ƒëa 100").default(10),
  sort_by: z.enum(['reservation_date', 'created_at', 'customer_name', 'party_size']).default('reservation_date'),
  sort_order: z.enum(['asc', 'desc']).default('asc')
});

// Check Table Availability Schema
export const CheckAvailabilitySchema = z.object({
  restaurant_id: z.string().uuid("ID nh√† h√†ng kh√¥ng h·ª£p l·ªá"),
  reservation_date: z.string().datetime("Th·ªùi gian kh√¥ng h·ª£p l·ªá"),
  duration_hours: z.number()
    .min(0.5, "Th·ªùi gian t·ªëi thi·ªÉu 30 ph√∫t")
    .max(8, "Th·ªùi gian t·ªëi ƒëa 8 ti·∫øng")
    .default(2),
  party_size: z.number()
    .min(1, "S·ªë ng∆∞·ªùi ph·∫£i √≠t nh·∫•t 1")
    .max(20, "S·ªë ng∆∞·ªùi kh√¥ng ƒë∆∞·ª£c qu√° 20"),
  table_id: z.string().uuid("ID b√†n kh√¥ng h·ª£p l·ªá").optional()
});

// Bulk Reservation Operations Schema
export const BulkUpdateReservationSchema = z.object({
  reservation_ids: z.array(z.string().uuid("ID ƒë·∫∑t b√†n kh√¥ng h·ª£p l·ªá"))
    .min(1, "Ph·∫£i ch·ªçn √≠t nh·∫•t 1 ƒë·∫∑t b√†n"),
  status: z.enum(['confirmed', 'cancelled', 'no_show'], {
    message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá"
  }),
  notes: z.string()
    .max(500, "Ghi ch√∫ kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±")
    .optional()
});

// Reservation Analytics Schema
export const ReservationAnalyticsSchema = z.object({
  restaurant_id: z.string().uuid("ID nh√† h√†ng kh√¥ng h·ª£p l·ªá"),
  date_from: z.string().datetime("Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá"),
  date_to: z.string().datetime("Ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá"),
  group_by: z.enum(['day', 'week', 'month', 'hour']).default('day')
});

// Walk-in Customer Schema (for immediate seating)
export const CreateWalkInSchema = z.object({
  table_id: z.string().uuid("ID b√†n kh√¥ng h·ª£p l·ªá"),
  customer_name: z.string()
    .min(2, "T√™n kh√°ch h√†ng ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±")
    .max(100, "T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±"),
  customer_phone: z.string()
    .regex(/^(\+84|0)[0-9]{9,10}$/, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
    .optional(),
  party_size: z.number()
    .min(1, "S·ªë ng∆∞·ªùi ph·∫£i √≠t nh·∫•t 1")
    .max(20, "S·ªë ng∆∞·ªùi kh√¥ng ƒë∆∞·ª£c qu√° 20"),
  notes: z.string()
    .max(500, "Ghi ch√∫ kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±")
    .optional()
});

// Waitlist Schema (when no tables available)
export const CreateWaitlistSchema = z.object({
  restaurant_id: z.string().uuid("ID nh√† h√†ng kh√¥ng h·ª£p l·ªá"),
  customer_name: z.string()
    .min(2, "T√™n kh√°ch h√†ng ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±")
    .max(100, "T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±"),
  customer_phone: z.string()
    .regex(/^(\+84|0)[0-9]{9,10}$/, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá"),
  customer_email: z.string()
    .email("Email kh√¥ng h·ª£p l·ªá")
    .optional(),
  party_size: z.number()
    .min(1, "S·ªë ng∆∞·ªùi ph·∫£i √≠t nh·∫•t 1")
    .max(20, "S·ªë ng∆∞·ªùi kh√¥ng ƒë∆∞·ª£c qu√° 20"),
  preferred_time: z.string()
    .datetime("Th·ªùi gian ∆∞a th√≠ch kh√¥ng h·ª£p l·ªá"),
  max_wait_time: z.number()
    .min(15, "Th·ªùi gian ch·ªù t·ªëi thi·ªÉu 15 ph√∫t")
    .max(480, "Th·ªùi gian ch·ªù t·ªëi ƒëa 8 ti·∫øng")
    .default(120), // 2 hours
  notes: z.string()
    .max(500, "Ghi ch√∫ kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±")
    .optional()
});

// Waitlist Status Update Schema
export const UpdateWaitlistStatusSchema = z.object({
  status: z.enum(['waiting', 'notified', 'seated', 'cancelled', 'expired'], {
    message: "Tr·∫°ng th√°i waitlist kh√¥ng h·ª£p l·ªá"
  }),
  notes: z.string()
    .max(500, "Ghi ch√∫ kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±")
    .optional()
});

// Waitlist Query Schema
export const WaitlistQuerySchema = z.object({
  restaurant_id: z.string().uuid("ID nh√† h√†ng kh√¥ng h·ª£p l·ªá"),
  status: z.enum(['waiting', 'notified', 'seated', 'cancelled', 'expired']).optional(),
  page: z.number().min(1, "Trang ph·∫£i l·ªõn h∆°n 0").default(1),
  limit: z.number().min(1, "Gi·ªõi h·∫°n ph·∫£i l·ªõn h∆°n 0").max(100, "Gi·ªõi h·∫°n t·ªëi ƒëa 100").default(10),
  sort_by: z.enum(['created_at', 'preferred_time', 'party_size']).default('created_at'),
  sort_order: z.enum(['asc', 'desc']).default('asc')
});

// Reservation Search Schema
export const ReservationSearchSchema = z.object({
  phone: z.string()
    .min(1, "S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc")
    .max(20, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c qu√° 20 k√Ω t·ª±"),
  restaurant_id: z.string().uuid("ID nh√† h√†ng kh√¥ng h·ª£p l·ªá").optional()
});

// Daily Stats Schema
export const DailyStatsSchema = z.object({
  restaurant_id: z.string().uuid("ID nh√† h√†ng kh√¥ng h·ª£p l·ªá"),
  date: z.string()
    .regex(/^\d{4}-\d{2}-\d{2}$/, "ƒê·ªãnh d·∫°ng ng√†y ph·∫£i l√† YYYY-MM-DD")
});

// Table Availability Enhanced Schema
export const EnhancedTableAvailabilitySchema = z.object({
  restaurant_id: z.string().uuid("ID nh√† h√†ng kh√¥ng h·ª£p l·ªá"),
  party_size: z.number()
    .min(1, "S·ªë ng∆∞·ªùi ph·∫£i √≠t nh·∫•t 1")
    .max(50, "S·ªë ng∆∞·ªùi kh√¥ng ƒë∆∞·ª£c qu√° 50"),
  reservation_date: z.string().datetime("Th·ªùi gian kh√¥ng h·ª£p l·ªá"),
  duration_hours: z.number()
    .min(0.5, "Th·ªùi gian t·ªëi thi·ªÉu 30 ph√∫t")
    .max(8, "Th·ªùi gian t·ªëi ƒëa 8 ti·∫øng")
    .default(2),
  preferred_location: z.string().optional(),
  max_price_per_hour: z.number().optional(),
  features: z.array(z.string()).optional()
});

// Export all schemas
export type CreateReservationType = z.infer<typeof CreateReservationSchema>;
export type UpdateReservationType = z.infer<typeof UpdateReservationSchema>;
export type UpdateReservationStatusType = z.infer<typeof UpdateReservationStatusSchema>;
export type ReservationQueryType = z.infer<typeof ReservationQuerySchema>;
export type CheckAvailabilityType = z.infer<typeof CheckAvailabilitySchema>;
export type BulkUpdateReservationType = z.infer<typeof BulkUpdateReservationSchema>;
export type ReservationAnalyticsType = z.infer<typeof ReservationAnalyticsSchema>;
export type CreateWalkInType = z.infer<typeof CreateWalkInSchema>;
export type CreateWaitlistType = z.infer<typeof CreateWaitlistSchema>;
export type UpdateWaitlistStatusType = z.infer<typeof UpdateWaitlistStatusSchema>;
export type WaitlistQueryType = z.infer<typeof WaitlistQuerySchema>;
export type ReservationSearchType = z.infer<typeof ReservationSearchSchema>;
export type DailyStatsType = z.infer<typeof DailyStatsSchema>;
export type EnhancedTableAvailabilityType = z.infer<typeof EnhancedTableAvailabilitySchema>;
